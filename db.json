{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1458788250000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1458788250000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1458788250000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1458788250000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1458788250000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1458788250000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1458788250000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1458788250000},{"_id":"themes/next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1458788250000},{"_id":"themes/next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1458788250000},{"_id":"themes/next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1458788250000},{"_id":"themes/next/_config.yml","hash":"9ba60a382a25a3600016eb3c3590e8acef069f80","modified":1458813614000},{"_id":"source/_posts/2016-01-08-markdown.md","hash":"c35d34df6d84f98410b768c2dbee6faffa9e9d4e","modified":1458811271000},{"_id":"source/_posts/2016-01-12-我为什么想要开一个博客.md","hash":"e79ace514b878b21e4f8fd7513f5ce92b150b3d2","modified":1458811271000},{"_id":"source/_posts/2016-01-22-ES6study-1.md","hash":"299e51545e61a64bbaa2e8ba2cce44d3d8db1e02","modified":1458811271000},{"_id":"source/_posts/2016-01-25-好的博客及文章.md","hash":"f76d33f35b26922e4715251ce6c680f078dc2196","modified":1458811272000},{"_id":"source/_posts/2016-01-25-ES6study-2.md","hash":"5a35ea94f62de032251b1b4e8e5c302419cbcd32","modified":1458811271000},{"_id":"source/_posts/2016-01-26-Charles解决跨域问题.md","hash":"0c0670ea25215fbfe3d39402b90400f96a1b9b6a","modified":1458811271000},{"_id":"source/_posts/2016-01-29-初学webpack遇到的坑.md","hash":"3a6f3353859e8b9480dcd9a5bdd50375dc5f929c","modified":1458811271000},{"_id":"source/_posts/2016-02-01-ES6study-3.md","hash":"6604275e5cf18fb3ce458f4f32e78f311488344b","modified":1458811271000},{"_id":"source/_posts/2016-02-18-初学React遇到的坑.md","hash":"29e48c98e4faf132417956def13543d9cf3c6448","modified":1458811271000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1458799680000},{"_id":"source/_posts/2016-02-01-温柔的对待每一个人.md","hash":"ed1ca675728b4a82dfe7f7f4951e55d90a11bd2c","modified":1458811272000},{"_id":"source/_posts/2016-02-15-2015小总结.md","hash":"79007b745b688c492270b9a199bdcc15d3021e0f","modified":1458811271000},{"_id":"source/_posts/2016-03-10-工作总结.md","hash":"068aa37222e325f85acd4f3dc49d9ca474f91909","modified":1458811394000},{"_id":"source/_posts/2016-02-19-工作总结.md","hash":"575ec9c909f3732eba82854e756c7c9de14ce82b","modified":1458811393000},{"_id":"source/_posts/2016-03-16-未来三个月自己的计划.md","hash":"33cc68b65e3f078bbf574f7cabaa0c31068dd3e3","modified":1458554111000},{"_id":"source/_posts/2016-03-23-百度ife之html.md","hash":"ebacbbceb0953490a6185b15f8f40442fddec453","modified":1458796693000},{"_id":"source/_posts/2016-03-18-HTML5的学习.md","hash":"8dbbf25f52890f9f579d46382f6c96fa4c16d9b8","modified":1458796694000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1458788250000},{"_id":"source/about/index.md","hash":"1773c5c09285d162226fac14bf34f3ea8f7bb807","modified":1458804965000},{"_id":"source/categories/index.md","hash":"a0dadb32e14cec5cf91f4f203f347b41fbc54b0c","modified":1458804865000},{"_id":"source/tags/index.md","hash":"1d1e40849fbead18d56a0d57180e6aa06e9ce5c5","modified":1458804865000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d6047c2afeabe9a329d92eb2a03490ff181616c2","modified":1458788250000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1458788250000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1458788250000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1458788250000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1458788250000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1458788250000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1458788250000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1458788250000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1458788250000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1458788250000},{"_id":"themes/next/layout/_layout.swig","hash":"b2bba2630b51ec27e3242859e8d4fe3b181742c2","modified":1458788250000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1ed98647f98fe72b4131dde6bb1c5438f7963fa0","modified":1458812254000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1458788250000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1458788250000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1458788250000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1458788250000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1458788250000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1458788250000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1458788250000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1458788250000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1458788013000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1458788250000},{"_id":"themes/next/.git/packed-refs","hash":"84267aa25f7d076e15cfaaff0cef2c6704850e56","modified":1458788250000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1458788251000},{"_id":"themes/next/.git/index","hash":"2655d2bca2a778914ed7fcdbf4e3e8ebd4bff9c3","modified":1458788251000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1458788251000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1458788251000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788251000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1458788250000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1458788250000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1458788250000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1458788250000},{"_id":"themes/next/layout/_macro/post.swig","hash":"379737761f44fb71de997a73192f35b8e568ac58","modified":1458788250000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0ff291b272808fd471747f66b621822ed1dc8abd","modified":1458788250000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1458788250000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e8e9c986ce1a0b370afd36703d49f1818492cb64","modified":1458788250000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1458788250000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1458788250000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1458788250000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1458788250000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1458788250000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1458788250000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1458788250000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1458788250000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1458788250000},{"_id":"themes/next/layout/_partials/head.swig","hash":"56af0385b6f05fc06c9848428e70f39ac724921f","modified":1458803592000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1458788251000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1458788251000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1458788251000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1458788251000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1458788251000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1458788251000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1458788251000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1458788251000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458788251000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458788251000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1458788251000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458788251000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1458788251000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1458788013000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1458788013000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1458788013000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1458788013000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1458788013000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1458788013000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1458788013000},{"_id":"themes/next/.git/logs/HEAD","hash":"94f5e54f46dc017faea396c058556670371efbb6","modified":1458788250000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1458788013000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1458788013000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1458788013000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788250000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788250000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788250000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788251000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788251000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788250000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458788250000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1458788250000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1458788250000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1458788250000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1458788250000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1458788250000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1458788250000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1458788250000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1458788250000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1458788250000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ce88ec0557b6d765ae38dd5984b178c7fc4d376e","modified":1458788250000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1458788250000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1458788251000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bcf8238cf842bbfc8f3ea733889bc4dacf59d3c4","modified":1458788251000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"23df0070bef4952cc0e669f20fc78a8abba9676e","modified":1458788251000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1458788251000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1458788250000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1458788251000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1458788251000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1458788251000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1458788251000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1458788251000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1458788251000},{"_id":"themes/next/source/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1458788251000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1458788251000},{"_id":"themes/next/.git/refs/heads/master","hash":"f071709dda39572dd6d4ead5897f5440630d86f7","modified":1458788250000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1458788251000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1458788250000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5522ddf7df5c150d97804584840976daa0e12d63","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1458788251000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1458788250000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1458788250000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"2e829b0a7b6cbc4318672f3eeb7b26249038132d","modified":1458788250000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1458788250000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1458788250000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1458788250000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1458788250000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1458788251000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1458788250000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458788251000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1458788251000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458788251000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1458788251000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"94f5e54f46dc017faea396c058556670371efbb6","modified":1458788250000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1458788250000},{"_id":"themes/next/.git/objects/pack/pack-55ef104256ea9ea598fbf775e9738a6067eb5432.idx","hash":"fa3aaca23624bf4dc8f1ec22dd41568d72316710","modified":1458788250000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458788251000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458788251000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1458788251000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4c0be672d977ef793c72cf838f1d920f2749dda0","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"12f703e5fea9d8a7ba65c8cea93a5cf5c2b78457","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1458788250000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1458788250000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1458788251000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458788251000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1458788251000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"94f5e54f46dc017faea396c058556670371efbb6","modified":1458788250000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1458788251000},{"_id":"themes/next/.git/objects/pack/pack-55ef104256ea9ea598fbf775e9738a6067eb5432.pack","hash":"fd985f76ab14bf562c44bc15ccb8dce4398d57bf","modified":1458788250000}],"Category":[{"name":"杂事二三","_id":"cim631wdw0005dk5nqpiysbuv"},{"name":"markdown","_id":"cim631wet000bdk5n4j9slz6e"},{"name":"ES6","_id":"cim631wf3000hdk5nxa1n9u50"},{"name":"Charles","_id":"cim631wfn000vdk5n4hoaaoud"},{"name":"webpack","_id":"cim631wfv0015dk5n039db7lj"},{"name":"React","_id":"cim631wg1001ddk5nbw766n31"},{"name":"工作总结","_id":"cim631wg2001hdk5n0bhuumhb"},{"name":"HTML","_id":"cim631wg7001pdk5n0j2qgyl0"}],"Data":[],"Page":[{"title":"categories","type":"categories","date":"2016-03-24T03:43:24.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\ndate: 2016-03-24 11:43:24\ncomments: false\n---\n","updated":"2016-03-24T07:34:25.000Z","path":"categories/index.html","layout":"page","_id":"cim631wdj0001dk5nd8qmc48e","content":"","excerpt":"","more":""},{"title":"about","date":"2016-03-24T03:43:00.000Z","comments":0,"_content":"\n这是我的土豆频道~ 欢迎大家捧场~~~ ([这里](http://www.tudou.com/home/_63884113/))\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-03-24 11:43:00\ncomments: false\n---\n\n这是我的土豆频道~ 欢迎大家捧场~~~ ([这里](http://www.tudou.com/home/_63884113/))\n","updated":"2016-03-24T07:36:05.000Z","path":"about/index.html","layout":"page","_id":"cim631wdq0003dk5n31mvad2v","content":"<p>这是我的土豆频道~ 欢迎大家捧场~~~ (<a href=\"http://www.tudou.com/home/_63884113/\" target=\"_blank\" rel=\"external\">这里</a>)</p>\n","excerpt":"","more":"<p>这是我的土豆频道~ 欢迎大家捧场~~~ (<a href=\"http://www.tudou.com/home/_63884113/\">这里</a>)</p>\n"},{"title":"tags","date":"2016-03-24T03:39:56.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-24 11:39:56\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-03-24T07:34:25.000Z","path":"tags/index.html","layout":"page","_id":"cim631we00007dk5nli6h9mpw","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"我为什么想要开一个博客","date":"2016-01-12T14:46:12.000Z","_content":"\n不知道什么时候开始，不喜欢在再QQ空间或者微信里发表最近的动态和心情，不再向无关紧要的人去表达自己的看法，也许和以前经历的一些事情有关，唯一能刷存在感的事情就是在朋友圈里发一下我最近练习的曲子，这也是在满足自己那一点小小的虚荣心吧。\n\n自从毕业以来，深深感觉到了之前对于学习确实是疏忽了，进而浪费了很多可以用来成长的机会。毕业之前从来没想过，以后要干什么，以后能干什么，以后想干什么。真正事情到了眼前不得不面对的时候才会幡然醒悟，原来自己错过了很多很多，听过这么一句话：如果总是在后悔中度过，那你一定没有进步。我也一样，总是在夜深的时候矫情起来，想着过去的点点滴滴，在盘算着原来如果这么做现在将会怎样，后悔、惋惜也怀念着当初，可是时间的车轮滚滚并不会留给我们这样的机会让我们停下脚步，唯有更加努力的向前奔跑才可能追回我们失去的、期待的和想要得到的。\n\n浑浑噩噩的活了这么多年，也应该对自己负责了。曾有人说过，每天拿出一个小时的时间，来学习一项技能，一年之后你将在这方面超过百分之九十九的人，我深以为然。两年的时间我一直坚持的练习吉他，现在虽说我并不能以其为生，但是他确实变成了我的一项额外技能。所以坚持的重要性不言而喻。\n\n说了这么多无非是对我想要建立这么一个博客阐述一下自己的观点。第一，长大后有一些话不想对任何人说，只是想找一个可能没有很多人关注却又开放的地方说说自己想说的话，原来这个地方其实是我的空间留言板和并没有人关注的微博，现在我觉得我应该换一种方式来重新开始这件事情了；第二，独立思考、学习、回顾和分享。以为学习和回顾其实是密不可分的，只有学习，而没有回顾和总结是不扎实的，而有了总结而没有分享是不可靠的，不是说如果你不能和别人讲清楚一件事情就意味着你并没有搞懂这件事情吗？所以一个分享的过程其实是一个在学习的过程，可以查漏补缺；第三，锻炼自己的恒心，不需要频繁不断，只要可以坚持不懈的坚持下去，就算一个月一篇，十年也是一个不小的数目；第四，是给自己年老以后留下一些纪念了，以至于老了之后我们回想起过去，不至于再回想起过去竟然毫无头绪，竟然没有能和外人炫耀的事情。\n\n目前，我能想到的原因大概就这么几点，如果再有想起我会再来补充，最后希望自己可以坚持下去，就像自己基本每个月一更的弹唱视频一样（虽说并没有几个人看），但也还在坚持着。\n\n已是深夜，关机，睡觉。\n","source":"_posts/2016-01-12-我为什么想要开一个博客.md","raw":"---\nlayout: post\ntitle: 我为什么想要开一个博客\ndate: 2016-01-12 22:46:12\ntags: [杂事二三]\ncategories: 杂事二三\n---\n\n不知道什么时候开始，不喜欢在再QQ空间或者微信里发表最近的动态和心情，不再向无关紧要的人去表达自己的看法，也许和以前经历的一些事情有关，唯一能刷存在感的事情就是在朋友圈里发一下我最近练习的曲子，这也是在满足自己那一点小小的虚荣心吧。\n\n自从毕业以来，深深感觉到了之前对于学习确实是疏忽了，进而浪费了很多可以用来成长的机会。毕业之前从来没想过，以后要干什么，以后能干什么，以后想干什么。真正事情到了眼前不得不面对的时候才会幡然醒悟，原来自己错过了很多很多，听过这么一句话：如果总是在后悔中度过，那你一定没有进步。我也一样，总是在夜深的时候矫情起来，想着过去的点点滴滴，在盘算着原来如果这么做现在将会怎样，后悔、惋惜也怀念着当初，可是时间的车轮滚滚并不会留给我们这样的机会让我们停下脚步，唯有更加努力的向前奔跑才可能追回我们失去的、期待的和想要得到的。\n\n浑浑噩噩的活了这么多年，也应该对自己负责了。曾有人说过，每天拿出一个小时的时间，来学习一项技能，一年之后你将在这方面超过百分之九十九的人，我深以为然。两年的时间我一直坚持的练习吉他，现在虽说我并不能以其为生，但是他确实变成了我的一项额外技能。所以坚持的重要性不言而喻。\n\n说了这么多无非是对我想要建立这么一个博客阐述一下自己的观点。第一，长大后有一些话不想对任何人说，只是想找一个可能没有很多人关注却又开放的地方说说自己想说的话，原来这个地方其实是我的空间留言板和并没有人关注的微博，现在我觉得我应该换一种方式来重新开始这件事情了；第二，独立思考、学习、回顾和分享。以为学习和回顾其实是密不可分的，只有学习，而没有回顾和总结是不扎实的，而有了总结而没有分享是不可靠的，不是说如果你不能和别人讲清楚一件事情就意味着你并没有搞懂这件事情吗？所以一个分享的过程其实是一个在学习的过程，可以查漏补缺；第三，锻炼自己的恒心，不需要频繁不断，只要可以坚持不懈的坚持下去，就算一个月一篇，十年也是一个不小的数目；第四，是给自己年老以后留下一些纪念了，以至于老了之后我们回想起过去，不至于再回想起过去竟然毫无头绪，竟然没有能和外人炫耀的事情。\n\n目前，我能想到的原因大概就这么几点，如果再有想起我会再来补充，最后希望自己可以坚持下去，就像自己基本每个月一更的弹唱视频一样（虽说并没有几个人看），但也还在坚持着。\n\n已是深夜，关机，睡觉。\n","slug":"我为什么想要开一个博客","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wd90000dk5nopeff6dy","content":"<p>不知道什么时候开始，不喜欢在再QQ空间或者微信里发表最近的动态和心情，不再向无关紧要的人去表达自己的看法，也许和以前经历的一些事情有关，唯一能刷存在感的事情就是在朋友圈里发一下我最近练习的曲子，这也是在满足自己那一点小小的虚荣心吧。</p>\n<p>自从毕业以来，深深感觉到了之前对于学习确实是疏忽了，进而浪费了很多可以用来成长的机会。毕业之前从来没想过，以后要干什么，以后能干什么，以后想干什么。真正事情到了眼前不得不面对的时候才会幡然醒悟，原来自己错过了很多很多，听过这么一句话：如果总是在后悔中度过，那你一定没有进步。我也一样，总是在夜深的时候矫情起来，想着过去的点点滴滴，在盘算着原来如果这么做现在将会怎样，后悔、惋惜也怀念着当初，可是时间的车轮滚滚并不会留给我们这样的机会让我们停下脚步，唯有更加努力的向前奔跑才可能追回我们失去的、期待的和想要得到的。</p>\n<p>浑浑噩噩的活了这么多年，也应该对自己负责了。曾有人说过，每天拿出一个小时的时间，来学习一项技能，一年之后你将在这方面超过百分之九十九的人，我深以为然。两年的时间我一直坚持的练习吉他，现在虽说我并不能以其为生，但是他确实变成了我的一项额外技能。所以坚持的重要性不言而喻。</p>\n<p>说了这么多无非是对我想要建立这么一个博客阐述一下自己的观点。第一，长大后有一些话不想对任何人说，只是想找一个可能没有很多人关注却又开放的地方说说自己想说的话，原来这个地方其实是我的空间留言板和并没有人关注的微博，现在我觉得我应该换一种方式来重新开始这件事情了；第二，独立思考、学习、回顾和分享。以为学习和回顾其实是密不可分的，只有学习，而没有回顾和总结是不扎实的，而有了总结而没有分享是不可靠的，不是说如果你不能和别人讲清楚一件事情就意味着你并没有搞懂这件事情吗？所以一个分享的过程其实是一个在学习的过程，可以查漏补缺；第三，锻炼自己的恒心，不需要频繁不断，只要可以坚持不懈的坚持下去，就算一个月一篇，十年也是一个不小的数目；第四，是给自己年老以后留下一些纪念了，以至于老了之后我们回想起过去，不至于再回想起过去竟然毫无头绪，竟然没有能和外人炫耀的事情。</p>\n<p>目前，我能想到的原因大概就这么几点，如果再有想起我会再来补充，最后希望自己可以坚持下去，就像自己基本每个月一更的弹唱视频一样（虽说并没有几个人看），但也还在坚持着。</p>\n<p>已是深夜，关机，睡觉。</p>\n","excerpt":"","more":"<p>不知道什么时候开始，不喜欢在再QQ空间或者微信里发表最近的动态和心情，不再向无关紧要的人去表达自己的看法，也许和以前经历的一些事情有关，唯一能刷存在感的事情就是在朋友圈里发一下我最近练习的曲子，这也是在满足自己那一点小小的虚荣心吧。</p>\n<p>自从毕业以来，深深感觉到了之前对于学习确实是疏忽了，进而浪费了很多可以用来成长的机会。毕业之前从来没想过，以后要干什么，以后能干什么，以后想干什么。真正事情到了眼前不得不面对的时候才会幡然醒悟，原来自己错过了很多很多，听过这么一句话：如果总是在后悔中度过，那你一定没有进步。我也一样，总是在夜深的时候矫情起来，想着过去的点点滴滴，在盘算着原来如果这么做现在将会怎样，后悔、惋惜也怀念着当初，可是时间的车轮滚滚并不会留给我们这样的机会让我们停下脚步，唯有更加努力的向前奔跑才可能追回我们失去的、期待的和想要得到的。</p>\n<p>浑浑噩噩的活了这么多年，也应该对自己负责了。曾有人说过，每天拿出一个小时的时间，来学习一项技能，一年之后你将在这方面超过百分之九十九的人，我深以为然。两年的时间我一直坚持的练习吉他，现在虽说我并不能以其为生，但是他确实变成了我的一项额外技能。所以坚持的重要性不言而喻。</p>\n<p>说了这么多无非是对我想要建立这么一个博客阐述一下自己的观点。第一，长大后有一些话不想对任何人说，只是想找一个可能没有很多人关注却又开放的地方说说自己想说的话，原来这个地方其实是我的空间留言板和并没有人关注的微博，现在我觉得我应该换一种方式来重新开始这件事情了；第二，独立思考、学习、回顾和分享。以为学习和回顾其实是密不可分的，只有学习，而没有回顾和总结是不扎实的，而有了总结而没有分享是不可靠的，不是说如果你不能和别人讲清楚一件事情就意味着你并没有搞懂这件事情吗？所以一个分享的过程其实是一个在学习的过程，可以查漏补缺；第三，锻炼自己的恒心，不需要频繁不断，只要可以坚持不懈的坚持下去，就算一个月一篇，十年也是一个不小的数目；第四，是给自己年老以后留下一些纪念了，以至于老了之后我们回想起过去，不至于再回想起过去竟然毫无头绪，竟然没有能和外人炫耀的事情。</p>\n<p>目前，我能想到的原因大概就这么几点，如果再有想起我会再来补充，最后希望自己可以坚持下去，就像自己基本每个月一更的弹唱视频一样（虽说并没有几个人看），但也还在坚持着。</p>\n<p>已是深夜，关机，睡觉。</p>\n"},{"layout":"post","title":"markdown语法简介","date":"2016-01-08T12:46:12.000Z","_content":"\n在我看来markdown语法就是可以不需要了解html,来编写博客网页.\n总结这个也是为了将来自己有不会的地方可以很快的查看一下.\n\n### 1. 标题标签写法\n\n* ***markdown中的写法:***\n\n```bash\n一级标题\n=======\n\n二级标题\n-----------\n\n### 其他级别标题\n```\n\n* ***对应的html结构:***\n\n```html\n<h1>一级标题</h1>\n\n<h2>二级标题</h2>\n\n<h3>其他级别标题</h3>\n```\n\n### 2. 段落标签<p>写法\n\n* ***markdown中的写法:***\n\n```bash\n这是一个段落,段落分隔用一个空白行\n```\n\n* ***对应的html结构:***\n\n```html\n<p>这是一个段落,段落分隔用一个空白行</p>\n```\n\n* ***在页面中显示的效果:***\n\n这是一个段落,段落分隔用一个空白行\n\n---\n\n### 3. 强调< em >,粗体< strong >,代码< code >,删除< s >写法\n* ***markdown中的写法:***\n\n```bash\n各类标签:*强调标签em*,**加粗标签strong**,`代码标签code`\n```\n\n* ***对应的html结构:***\n\n```html\n<p>Text attributes <em>italic</em>, <strong>bold</strong>,<code>monospace</code></p>\n```\n\n* ***在页面中显示的效果:***\n\n各类标签:\n*强调标签em*,\n**加粗标签strong**,\n`代码标签code`\n\n---\n\n### 4. 有序列表<ol>和无序列表<ul>写法\n* ***markdown中的写法:***\n\n```bash\n有序列表:\n\n1. 列表1\n2. 列表2\n3. 列表3\n```\n\n```bash\n无序列表:\n\n* 列表1\n* 列表2\n* 列表3\n```\n\n* ***对应的html结构:***\n\n```html\n<p>有序列表:</p>\n\n<ol>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ol>\n```\n\n```html\n<p>无序列表:</p>\n\n<ul>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ul>\n```\n\n* ***在页面中显示的效果:***\n\n有序列表:\n\n1. 列表1\n2. 列表2\n3. 列表3\n\n无序列表:\n\n* 列表1\n* 列表2\n* 列表3\n\n---\n\n### 5. 链接的写法\n* ***markdown中的写法:***\n\n行内式写法:\n\n```bash\n这是行内式写法的[例子](http://example.com/ \"Title\")\n\n这是行内式写法没有title属性的[例子](http://example.net/)\n```\n参考式写法1:\n\n```bash\n这是参考式写法1的[例子][id]\n[id]: http://example.com/  \"Optional Title Here\"\n```\n参考式写法2:\n\n```bash\n这是参考式写法2的[例子][]\n[例子]: http://example.com/  \"Optional Title Here\"\n```\n\n* ***对应的html结构:***\n\n行内式:\n\n```html\n<p>这是行内式写法的<a href=\"http://example.com/\" title=\"Title\">例子</a></p>\n\n<p>这是行内式写法没有title属性的<a href=\"http://example.net/\">例子</a></p>\n```\n参考式1:\n\n```html\n<p>这是参考式写法1的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n```\n参考式2:\n\n```html\n<p>这是参考式写法2的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n```\n* ***在页面中显示的效果:***\n\n这是行内式写法的[例子](http://example.com/ \"Title\")\n\n这是行内式写法没有title属性的[例子](http://example.net/)\n\n这是参考式写法1的[例子] [id]\n\n[id]: http://example.com/  \"Optional Title Here\"\n\n这是参考式写法2的[例子][]\n\n[例子]: http://example.com/  \"Optional Title Here\"\n\n---\n\n### 6. 反斜杠转译\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```bash\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n\n以上,其实还有图片的插入,不过和添加链接类似,在此不再赘述了.\n","source":"_posts/2016-01-08-markdown.md","raw":"---\nlayout: post\ntitle:  \"markdown语法简介\"\ndate:   2016-01-08 20:46:12\ntags: [markdown]\ncategories: markdown\n---\n\n在我看来markdown语法就是可以不需要了解html,来编写博客网页.\n总结这个也是为了将来自己有不会的地方可以很快的查看一下.\n\n### 1. 标题标签写法\n\n* ***markdown中的写法:***\n\n```bash\n一级标题\n=======\n\n二级标题\n-----------\n\n### 其他级别标题\n```\n\n* ***对应的html结构:***\n\n```html\n<h1>一级标题</h1>\n\n<h2>二级标题</h2>\n\n<h3>其他级别标题</h3>\n```\n\n### 2. 段落标签<p>写法\n\n* ***markdown中的写法:***\n\n```bash\n这是一个段落,段落分隔用一个空白行\n```\n\n* ***对应的html结构:***\n\n```html\n<p>这是一个段落,段落分隔用一个空白行</p>\n```\n\n* ***在页面中显示的效果:***\n\n这是一个段落,段落分隔用一个空白行\n\n---\n\n### 3. 强调< em >,粗体< strong >,代码< code >,删除< s >写法\n* ***markdown中的写法:***\n\n```bash\n各类标签:*强调标签em*,**加粗标签strong**,`代码标签code`\n```\n\n* ***对应的html结构:***\n\n```html\n<p>Text attributes <em>italic</em>, <strong>bold</strong>,<code>monospace</code></p>\n```\n\n* ***在页面中显示的效果:***\n\n各类标签:\n*强调标签em*,\n**加粗标签strong**,\n`代码标签code`\n\n---\n\n### 4. 有序列表<ol>和无序列表<ul>写法\n* ***markdown中的写法:***\n\n```bash\n有序列表:\n\n1. 列表1\n2. 列表2\n3. 列表3\n```\n\n```bash\n无序列表:\n\n* 列表1\n* 列表2\n* 列表3\n```\n\n* ***对应的html结构:***\n\n```html\n<p>有序列表:</p>\n\n<ol>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ol>\n```\n\n```html\n<p>无序列表:</p>\n\n<ul>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ul>\n```\n\n* ***在页面中显示的效果:***\n\n有序列表:\n\n1. 列表1\n2. 列表2\n3. 列表3\n\n无序列表:\n\n* 列表1\n* 列表2\n* 列表3\n\n---\n\n### 5. 链接的写法\n* ***markdown中的写法:***\n\n行内式写法:\n\n```bash\n这是行内式写法的[例子](http://example.com/ \"Title\")\n\n这是行内式写法没有title属性的[例子](http://example.net/)\n```\n参考式写法1:\n\n```bash\n这是参考式写法1的[例子][id]\n[id]: http://example.com/  \"Optional Title Here\"\n```\n参考式写法2:\n\n```bash\n这是参考式写法2的[例子][]\n[例子]: http://example.com/  \"Optional Title Here\"\n```\n\n* ***对应的html结构:***\n\n行内式:\n\n```html\n<p>这是行内式写法的<a href=\"http://example.com/\" title=\"Title\">例子</a></p>\n\n<p>这是行内式写法没有title属性的<a href=\"http://example.net/\">例子</a></p>\n```\n参考式1:\n\n```html\n<p>这是参考式写法1的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n```\n参考式2:\n\n```html\n<p>这是参考式写法2的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n```\n* ***在页面中显示的效果:***\n\n这是行内式写法的[例子](http://example.com/ \"Title\")\n\n这是行内式写法没有title属性的[例子](http://example.net/)\n\n这是参考式写法1的[例子] [id]\n\n[id]: http://example.com/  \"Optional Title Here\"\n\n这是参考式写法2的[例子][]\n\n[例子]: http://example.com/  \"Optional Title Here\"\n\n---\n\n### 6. 反斜杠转译\n\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n```bash\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n\n以上,其实还有图片的插入,不过和添加链接类似,在此不再赘述了.\n","slug":"markdown","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wdm0002dk5nvu2d5vog","content":"<p>在我看来markdown语法就是可以不需要了解html,来编写博客网页.<br>总结这个也是为了将来自己有不会的地方可以很快的查看一下.</p>\n<h3 id=\"1-标题标签写法\"><a href=\"#1-标题标签写法\" class=\"headerlink\" title=\"1. 标题标签写法\"></a>1. 标题标签写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=======</span><br><span class=\"line\"></span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 其他级别标题</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>一级标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>二级标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>其他级别标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-段落标签写法\"><a href=\"#2-段落标签写法\" class=\"headerlink\" title=\"2. 段落标签写法\"></a>2. 段落标签<p>写法</p></h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个段落,段落分隔用一个空白行</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落,段落分隔用一个空白行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>这是一个段落,段落分隔用一个空白行</p>\n<hr>\n<h3 id=\"3-强调-lt-em-gt-粗体-lt-strong-gt-代码-lt-code-gt-删除-lt-s-gt-写法\"><a href=\"#3-强调-lt-em-gt-粗体-lt-strong-gt-代码-lt-code-gt-删除-lt-s-gt-写法\" class=\"headerlink\" title=\"3. 强调&lt; em &gt;,粗体&lt; strong &gt;,代码&lt; code &gt;,删除&lt; s &gt;写法\"></a>3. 强调&lt; em &gt;,粗体&lt; strong &gt;,代码&lt; code &gt;,删除&lt; s &gt;写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">各类标签:*强调标签em*,**加粗标签strong**,`代码标签code`</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Text attributes <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>italic<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>bold<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>,<span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>各类标签:<br><em>强调标签em</em>,<br><strong>加粗标签strong</strong>,<br><code>代码标签code</code></p>\n<hr>\n<h3 id=\"4-有序列表和无序列表写法\"><a href=\"#4-有序列表和无序列表写法\" class=\"headerlink\" title=\"4. 有序列表和无序列表写法\"></a>4. 有序列表<ol>和无序列表<ul>写法</ul></ol></h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有序列表:</span><br><span class=\"line\"></span><br><span class=\"line\">1. 列表1</span><br><span class=\"line\">2. 列表2</span><br><span class=\"line\">3. 列表3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无序列表:</span><br><span class=\"line\"></span><br><span class=\"line\">* 列表1</span><br><span class=\"line\">* 列表2</span><br><span class=\"line\">* 列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>有序列表:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>无序列表:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>有序列表:</p>\n<ol>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ol>\n<p>无序列表:</p>\n<ul>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ul>\n<hr>\n<h3 id=\"5-链接的写法\"><a href=\"#5-链接的写法\" class=\"headerlink\" title=\"5. 链接的写法\"></a>5. 链接的写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<p>行内式写法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是行内式写法的[例子](http://example.com/ <span class=\"string\">\"Title\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">这是行内式写法没有title属性的[例子](http://example.net/)</span><br></pre></td></tr></table></figure>\n<p>参考式写法1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是参考式写法1的[例子][id]</span><br><span class=\"line\">[id]: http://example.com/  <span class=\"string\">\"Optional Title Here\"</span></span><br></pre></td></tr></table></figure>\n<p>参考式写法2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是参考式写法2的[例子][]</span><br><span class=\"line\">[例子]: http://example.com/  <span class=\"string\">\"Optional Title Here\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<p>行内式:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是行内式写法的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是行内式写法没有title属性的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.net/\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考式1:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是参考式写法1的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Optional Title Here\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考式2:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是参考式写法2的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Optional Title Here\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>这是行内式写法的<a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"external\">例子</a></p>\n<p>这是行内式写法没有title属性的<a href=\"http://example.net/\" target=\"_blank\" rel=\"external\">例子</a></p>\n<p>这是参考式写法1的<a href=\"http://example.com/\" title=\"Optional Title Here\" target=\"_blank\" rel=\"external\">例子</a></p>\n<p>这是参考式写法2的<a href=\"http://example.com/\" title=\"Optional Title Here\" target=\"_blank\" rel=\"external\">例子</a></p>\n<hr>\n<h3 id=\"6-反斜杠转译\"><a href=\"#6-反斜杠转译\" class=\"headerlink\" title=\"6. 反斜杠转译\"></a>6. 反斜杠转译</h3><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\">*   星号</span><br><span class=\"line\">_   底线</span><br><span class=\"line\">&#123;&#125;  花括号</span><br><span class=\"line\">[]  方括号</span><br><span class=\"line\">()  括弧</span><br><span class=\"line\"><span class=\"comment\">#   井字号</span></span><br><span class=\"line\">+   加号</span><br><span class=\"line\">-   减号</span><br><span class=\"line\">.   英文句点</span><br><span class=\"line\">!   惊叹号</span><br></pre></td></tr></table></figure>\n<p>以上,其实还有图片的插入,不过和添加链接类似,在此不再赘述了.</p>\n","excerpt":"","more":"<p>在我看来markdown语法就是可以不需要了解html,来编写博客网页.<br>总结这个也是为了将来自己有不会的地方可以很快的查看一下.</p>\n<h3 id=\"1-标题标签写法\"><a href=\"#1-标题标签写法\" class=\"headerlink\" title=\"1. 标题标签写法\"></a>1. 标题标签写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一级标题</span><br><span class=\"line\">=======</span><br><span class=\"line\"></span><br><span class=\"line\">二级标题</span><br><span class=\"line\">-----------</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### 其他级别标题</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>一级标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>二级标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>其他级别标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-段落标签写法\"><a href=\"#2-段落标签写法\" class=\"headerlink\" title=\"2. 段落标签写法\"></a>2. 段落标签<p>写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个段落,段落分隔用一个空白行</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是一个段落,段落分隔用一个空白行<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>这是一个段落,段落分隔用一个空白行</p>\n<hr>\n<h3 id=\"3-强调-lt-em-gt-粗体-lt-strong-gt-代码-lt-code-gt-删除-lt-s-gt-写法\"><a href=\"#3-强调-lt-em-gt-粗体-lt-strong-gt-代码-lt-code-gt-删除-lt-s-gt-写法\" class=\"headerlink\" title=\"3. 强调&lt; em &gt;,粗体&lt; strong &gt;,代码&lt; code &gt;,删除&lt; s &gt;写法\"></a>3. 强调&lt; em &gt;,粗体&lt; strong &gt;,代码&lt; code &gt;,删除&lt; s &gt;写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">各类标签:*强调标签em*,**加粗标签strong**,`代码标签code`</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Text attributes <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>italic<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span>, <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>bold<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>,<span class=\"tag\">&lt;<span class=\"name\">code</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>各类标签:<br><em>强调标签em</em>,<br><strong>加粗标签strong</strong>,<br><code>代码标签code</code></p>\n<hr>\n<h3 id=\"4-有序列表和无序列表写法\"><a href=\"#4-有序列表和无序列表写法\" class=\"headerlink\" title=\"4. 有序列表和无序列表写法\"></a>4. 有序列表<ol>和无序列表<ul>写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有序列表:</span><br><span class=\"line\"></span><br><span class=\"line\">1. 列表1</span><br><span class=\"line\">2. 列表2</span><br><span class=\"line\">3. 列表3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无序列表:</span><br><span class=\"line\"></span><br><span class=\"line\">* 列表1</span><br><span class=\"line\">* 列表2</span><br><span class=\"line\">* 列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>有序列表:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>无序列表:<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>有序列表:</p>\n<ol>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ol>\n<p>无序列表:</p>\n<ul>\n<li>列表1</li>\n<li>列表2</li>\n<li>列表3</li>\n</ul>\n<hr>\n<h3 id=\"5-链接的写法\"><a href=\"#5-链接的写法\" class=\"headerlink\" title=\"5. 链接的写法\"></a>5. 链接的写法</h3><ul>\n<li><strong><em>markdown中的写法:</em></strong></li>\n</ul>\n<p>行内式写法:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是行内式写法的[例子](http://example.com/ <span class=\"string\">\"Title\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">这是行内式写法没有title属性的[例子](http://example.net/)</span><br></pre></td></tr></table></figure>\n<p>参考式写法1:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是参考式写法1的[例子][id]</span><br><span class=\"line\">[id]: http://example.com/  <span class=\"string\">\"Optional Title Here\"</span></span><br></pre></td></tr></table></figure>\n<p>参考式写法2:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是参考式写法2的[例子][]</span><br><span class=\"line\">[例子]: http://example.com/  <span class=\"string\">\"Optional Title Here\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>对应的html结构:</em></strong></li>\n</ul>\n<p>行内式:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是行内式写法的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Title\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是行内式写法没有title属性的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.net/\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考式1:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是参考式写法1的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Optional Title Here\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考式2:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是参考式写法2的<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://example.com/\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Optional Title Here\"</span>&gt;</span>例子<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>在页面中显示的效果:</em></strong></li>\n</ul>\n<p>这是行内式写法的<a href=\"http://example.com/\" title=\"Title\">例子</a></p>\n<p>这是行内式写法没有title属性的<a href=\"http://example.net/\">例子</a></p>\n<p>这是参考式写法1的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n<p>这是参考式写法2的<a href=\"http://example.com/\" title=\"Optional Title Here\">例子</a></p>\n<hr>\n<h3 id=\"6-反斜杠转译\"><a href=\"#6-反斜杠转译\" class=\"headerlink\" title=\"6. 反斜杠转译\"></a>6. 反斜杠转译</h3><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\   反斜线</span><br><span class=\"line\">`   反引号</span><br><span class=\"line\">*   星号</span><br><span class=\"line\">_   底线</span><br><span class=\"line\">&#123;&#125;  花括号</span><br><span class=\"line\">[]  方括号</span><br><span class=\"line\">()  括弧</span><br><span class=\"line\"><span class=\"comment\">#   井字号</span></span><br><span class=\"line\">+   加号</span><br><span class=\"line\">-   减号</span><br><span class=\"line\">.   英文句点</span><br><span class=\"line\">!   惊叹号</span><br></pre></td></tr></table></figure>\n<p>以上,其实还有图片的插入,不过和添加链接类似,在此不再赘述了.</p>\n"},{"layout":"post","title":"ES6学习笔记(let和const命令)","date":"2016-01-21T16:00:00.000Z","_content":"笔记根据阮一峰老师的[ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/let)，内容基本来自于此书，总结是为了理解学习和加深印象，把认为重要的部分记录下来。\n\n### 1. let命令\n\n**************************\n\n#### 基本用法\n\n\nES6中新增加了`let`用来声明变量,他和`var`的用法类似，但是let声明的变量只在let所在的代码块内有效。\n\n```js\n\n{\n  let a = 10;\n  var b = 1;\n  a // 10\n}\n\na // ReferenceError: a is not defined.\nb // 1\n\n```\n\n\n如上面代码所示，如果在代码块外面调用了let的话，结果会报错。这表明let声明的变量只在他所在的代码块有效。\n\n所以`for`循环中，我们用let声明会很合适。\n```js\n\nfor( let i = 0; i < arr.length; i++){}\n\nconsole.log(i)//ReferenceError: i is not defined\n\n```\n\n上面代码的计数器i,只在for循环内有效。\n\n<br>\n下面的代码如果使用`var`，最终的输出结果是10。\n\n```js\n\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n\n```\n\n因为`var`声明的`i`在全局作用域中都有效，当在循环当中时`a[6]`返回`function () {console.log(i);};`，当在`for`循环执行完毕后`i`的值会变成10。当执行`a[6]()`时结果为10。\n\n<br>\n\n如果使用`let`，声明的变量只在块级作用域内有效，代码如下。\n\n```js\n\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n```\n\n如上面代码所示，因为`i`只在本轮循环内有效，所以每一次循环的`i`其实都是一个新的变量，所以最后结果为6。\n\n*******************\n\n#### 不存在变量提升\n\n`let`不会像`var`存在变量提升的现象，所以`let`要在声明之后调用，否则会出现错误。\n\n```js\n\nconsole.log(foo); // 输出undefined\nconsole.log(bar); // 报错ReferenceError\n\nvar foo = 2;\nlet bar = 2;\n\n```\n\n如上代码，在执行代码前，js会提前读取声明的`var`和`function`的变量名（变量值没有预先加载），所以在执行代码前，变量`foo`已经存在了会输出`undefined`，而变量`bar`不会发生变量提升，所以会抛出一个错误。\n\n************\n\n#### 暂时性死区\n\n只要有块级作用域内存在`let`命令，他所声明的变量就绑定这个区域，不再受到外部影响。\n\n```js\n\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\n\n上面代码中，因为块级作用域内`let`声明了局部变量`tmp`，`tmp`就绑定到了这个块级作用域中，块级作用域外的`var`声明会失效，在块级作用域内在还没有`let`声明前就对`tmp`赋值的话就会报错。\n\nES6中规定，如果区块中存在`let`和`const`命令，这个区块对这两种声明的变量从一开始就形成了封闭的作用域，凡是在声明之前就使用这些变量的话就会报错。\n\n简单来说，在代码块内，如果使用`let`命令来声明变量，这个变量在声明之前都是不可用的。这个在语法上称为“暂时性死区”（temporal dead zone，简称TDZ）。\n\n```js\n\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n\n```\n\n上面的代码中，在`let`命令声明变量`tmp`前，都属于`tmp`的“死区”。\n\n“暂时性死区”也意味着`typeof`操作会出现错误。\n\n```js\n\ntypeof x; // ReferenceError\nlet x;\n\n```\n\n但是如果一个变量根本没有被声明，使用`typeof`反而不会报错。\n```js\n//undeclared_variable为为声明变量\ntypeof undeclared_variable // \"undefined\"\n\n```\n\n所以，新语法在有了`let`声明之后，一定要声明完变量之后再去使用，否则有可能会报错。\n\n<br>\n\n还有一些特别的“死区”。\n```js\n\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n\n```\n\n上面代码运行会报错，因为在把`y`的值赋给`x`前，`y`还没有声明，属于死区。\n\n总之，暂时性死区的本质就是，在已进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有在声明变量后才可以获取和使用该变量。\n\n*******\n\n#### 不允许重复声明\n\n`let`不允许在相同作用域中，重复声明同一个变量。\n\n```js\n\n// 报错\nfunction () {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction () {\n  let a = 10;\n  let a = 1;\n}\n\n```\n\n也不能在函数内部重新声明参数。\n\n```js\n\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n\n*******\n\n### 2. 块级作用域\n\n#### 为什么需要块级作用域？\n\n在ES5中只有全局作用域和函数作用域，没有块级作用域，这会造成很多问题。\n\n计数的循环变量泄露为全局变量。\n\n```js\n\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++){\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n\n```\n\n*******\n\n#### ES6的块级作用域\n\n`let`是为JavaScript新增了块级作用域。\n```js\n\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n```\n\n最后输出的结果为5，这表示`let`声明的是一个块级作用域，外层的代码块不受内层的影响，如果使用`var`声明的话，最后输出结果为10。\n\n块级作用域出现后，立即执行匿名函数（IIFE）就不是唯一的选择了。\n```js\n\n// IIFE写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n\n```\n\n*******\n\n### 3. const命令\n\nconst也用来声明变量，这个变量是常量一旦声明，他的值是不可以改变的。\n\n```js\n\n'use strict';\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: \"PI\" is read-only\n\n```\n\n在严格模式下，改变声明的常量的值会报错。在常规模式下不会报错但也不起作用。\n```js\n\nconst PI = 3.1415;\nPI = 3; // 常规模式时，重新赋值无效，但不报错\nPI // 3.1415\n\n```\n\nconst声明的变量不可以改变值，所以一旦声明后必须立即初始化。\n\n```js\n\n'use strict';\nconst foo;\n// SyntaxError: missing = in const declaration\n\n```\n\n如上面代码所示，在严格模式下，如果没有立即初始化，会报错。在常规模式下，不会报错，但是以后对`foo`赋值的话也是无效的。\n\n```js\n\nconst foo;\nfoo = 1; // 常规模式，重新赋值无效\nfoo // undefined\n\n```\n\n`const`的作用与和`let`相同，都是在块级作用域之内有效，并且也不存在声明提升，会出现暂时性死区，只能在声明之后才能够调用。\n\n```js\n\nif (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n\n```\n\n`const`声明的常量，也和`let`一样不可以重复声明。\n\n```js\n\nvar message = \"Hello!\";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = \"Goodbye!\";\nconst age = 30;\n\n```\n\n对于复合型变量名，变量名不会指向数据，而是指向数据所在的地址。`const`命令可以使指向的地址不变，但是不能保证地址内的数据不变。比如，如果使用`const`声明了一个对象，其实是声明了一个指向对象的地址，这个地址是不可变的，但是可以为这个对象来添加新的属性。\n\n```js\n\nconst a = [];\na.push(\"Hello\"); // 可执行\na.length = 0;    // 可执行\na = [\"Dave\"];    // 报错\n\n```\n\n如上，变量`a`是一个数组，数组本身是可以改写的，但是如果将另一个数组赋值给`a`，就会报错。\n\n如果想让一个对象，不能添加新的属性，可以使用`Object.freeze`的方法。\n\n```js\n\nconst foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n```\n\n如上，添加新的属性不会起作用，在严格模式下还会报错。\n\nES5声明变量的方法有两个：`var`,`function`。ES6除了这两种方法外，还有`let`，`const`，`import`和`class`这四种方法。\n\n*******\n\n### 4. 跨模块常量\n\n`const`声明的常量只在当前代码块有效。如果想设置跨模块的常量，可以采用下面的写法。\n\n```js\n\nconst foo = Object.freeze({});\n\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n\n```\n\n******\n\n### 5. 全局对象的属性\n\nES6规定了，使用`var`和`function`声明的全局变量，依旧是全局对象的属性；使用`let`命令，`const`命令和`class`命令声明的全局变量，不属于全局对象的属性。\n\n```js\n\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n```\n\n*******\n\n以上。\n","source":"_posts/2016-01-22-ES6study-1.md","raw":"---\nlayout: post\ntitle: ES6学习笔记(let和const命令)\ndate: 2016-01-22\ntags: [ES6]\ncategories: ES6\n---\n笔记根据阮一峰老师的[ECMAScript 6 入门](http://es6.ruanyifeng.com/#docs/let)，内容基本来自于此书，总结是为了理解学习和加深印象，把认为重要的部分记录下来。\n\n### 1. let命令\n\n**************************\n\n#### 基本用法\n\n\nES6中新增加了`let`用来声明变量,他和`var`的用法类似，但是let声明的变量只在let所在的代码块内有效。\n\n```js\n\n{\n  let a = 10;\n  var b = 1;\n  a // 10\n}\n\na // ReferenceError: a is not defined.\nb // 1\n\n```\n\n\n如上面代码所示，如果在代码块外面调用了let的话，结果会报错。这表明let声明的变量只在他所在的代码块有效。\n\n所以`for`循环中，我们用let声明会很合适。\n```js\n\nfor( let i = 0; i < arr.length; i++){}\n\nconsole.log(i)//ReferenceError: i is not defined\n\n```\n\n上面代码的计数器i,只在for循环内有效。\n\n<br>\n下面的代码如果使用`var`，最终的输出结果是10。\n\n```js\n\nvar a = [];\nfor (var i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 10\n\n```\n\n因为`var`声明的`i`在全局作用域中都有效，当在循环当中时`a[6]`返回`function () {console.log(i);};`，当在`for`循环执行完毕后`i`的值会变成10。当执行`a[6]()`时结果为10。\n\n<br>\n\n如果使用`let`，声明的变量只在块级作用域内有效，代码如下。\n\n```js\n\nvar a = [];\nfor (let i = 0; i < 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6](); // 6\n\n```\n\n如上面代码所示，因为`i`只在本轮循环内有效，所以每一次循环的`i`其实都是一个新的变量，所以最后结果为6。\n\n*******************\n\n#### 不存在变量提升\n\n`let`不会像`var`存在变量提升的现象，所以`let`要在声明之后调用，否则会出现错误。\n\n```js\n\nconsole.log(foo); // 输出undefined\nconsole.log(bar); // 报错ReferenceError\n\nvar foo = 2;\nlet bar = 2;\n\n```\n\n如上代码，在执行代码前，js会提前读取声明的`var`和`function`的变量名（变量值没有预先加载），所以在执行代码前，变量`foo`已经存在了会输出`undefined`，而变量`bar`不会发生变量提升，所以会抛出一个错误。\n\n************\n\n#### 暂时性死区\n\n只要有块级作用域内存在`let`命令，他所声明的变量就绑定这个区域，不再受到外部影响。\n\n```js\n\nvar tmp = 123;\n\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n\n```\n\n上面代码中，因为块级作用域内`let`声明了局部变量`tmp`，`tmp`就绑定到了这个块级作用域中，块级作用域外的`var`声明会失效，在块级作用域内在还没有`let`声明前就对`tmp`赋值的话就会报错。\n\nES6中规定，如果区块中存在`let`和`const`命令，这个区块对这两种声明的变量从一开始就形成了封闭的作用域，凡是在声明之前就使用这些变量的话就会报错。\n\n简单来说，在代码块内，如果使用`let`命令来声明变量，这个变量在声明之前都是不可用的。这个在语法上称为“暂时性死区”（temporal dead zone，简称TDZ）。\n\n```js\n\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n\n```\n\n上面的代码中，在`let`命令声明变量`tmp`前，都属于`tmp`的“死区”。\n\n“暂时性死区”也意味着`typeof`操作会出现错误。\n\n```js\n\ntypeof x; // ReferenceError\nlet x;\n\n```\n\n但是如果一个变量根本没有被声明，使用`typeof`反而不会报错。\n```js\n//undeclared_variable为为声明变量\ntypeof undeclared_variable // \"undefined\"\n\n```\n\n所以，新语法在有了`let`声明之后，一定要声明完变量之后再去使用，否则有可能会报错。\n\n<br>\n\n还有一些特别的“死区”。\n```js\n\nfunction bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar(); // 报错\n\n```\n\n上面代码运行会报错，因为在把`y`的值赋给`x`前，`y`还没有声明，属于死区。\n\n总之，暂时性死区的本质就是，在已进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有在声明变量后才可以获取和使用该变量。\n\n*******\n\n#### 不允许重复声明\n\n`let`不允许在相同作用域中，重复声明同一个变量。\n\n```js\n\n// 报错\nfunction () {\n  let a = 10;\n  var a = 1;\n}\n\n// 报错\nfunction () {\n  let a = 10;\n  let a = 1;\n}\n\n```\n\n也不能在函数内部重新声明参数。\n\n```js\n\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n\n*******\n\n### 2. 块级作用域\n\n#### 为什么需要块级作用域？\n\n在ES5中只有全局作用域和函数作用域，没有块级作用域，这会造成很多问题。\n\n计数的循环变量泄露为全局变量。\n\n```js\n\nvar s = 'hello';\n\nfor (var i = 0; i < s.length; i++){\n  console.log(s[i]);\n}\n\nconsole.log(i); // 5\n\n```\n\n*******\n\n#### ES6的块级作用域\n\n`let`是为JavaScript新增了块级作用域。\n```js\n\nfunction f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n); // 5\n}\n\n```\n\n最后输出的结果为5，这表示`let`声明的是一个块级作用域，外层的代码块不受内层的影响，如果使用`var`声明的话，最后输出结果为10。\n\n块级作用域出现后，立即执行匿名函数（IIFE）就不是唯一的选择了。\n```js\n\n// IIFE写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n\n```\n\n*******\n\n### 3. const命令\n\nconst也用来声明变量，这个变量是常量一旦声明，他的值是不可以改变的。\n\n```js\n\n'use strict';\nconst PI = 3.1415;\nPI // 3.1415\n\nPI = 3;\n// TypeError: \"PI\" is read-only\n\n```\n\n在严格模式下，改变声明的常量的值会报错。在常规模式下不会报错但也不起作用。\n```js\n\nconst PI = 3.1415;\nPI = 3; // 常规模式时，重新赋值无效，但不报错\nPI // 3.1415\n\n```\n\nconst声明的变量不可以改变值，所以一旦声明后必须立即初始化。\n\n```js\n\n'use strict';\nconst foo;\n// SyntaxError: missing = in const declaration\n\n```\n\n如上面代码所示，在严格模式下，如果没有立即初始化，会报错。在常规模式下，不会报错，但是以后对`foo`赋值的话也是无效的。\n\n```js\n\nconst foo;\nfoo = 1; // 常规模式，重新赋值无效\nfoo // undefined\n\n```\n\n`const`的作用与和`let`相同，都是在块级作用域之内有效，并且也不存在声明提升，会出现暂时性死区，只能在声明之后才能够调用。\n\n```js\n\nif (true) {\n  console.log(MAX); // ReferenceError\n  const MAX = 5;\n}\n\n```\n\n`const`声明的常量，也和`let`一样不可以重复声明。\n\n```js\n\nvar message = \"Hello!\";\nlet age = 25;\n\n// 以下两行都会报错\nconst message = \"Goodbye!\";\nconst age = 30;\n\n```\n\n对于复合型变量名，变量名不会指向数据，而是指向数据所在的地址。`const`命令可以使指向的地址不变，但是不能保证地址内的数据不变。比如，如果使用`const`声明了一个对象，其实是声明了一个指向对象的地址，这个地址是不可变的，但是可以为这个对象来添加新的属性。\n\n```js\n\nconst a = [];\na.push(\"Hello\"); // 可执行\na.length = 0;    // 可执行\na = [\"Dave\"];    // 报错\n\n```\n\n如上，变量`a`是一个数组，数组本身是可以改写的，但是如果将另一个数组赋值给`a`，就会报错。\n\n如果想让一个对象，不能添加新的属性，可以使用`Object.freeze`的方法。\n\n```js\n\nconst foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n\n```\n\n如上，添加新的属性不会起作用，在严格模式下还会报错。\n\nES5声明变量的方法有两个：`var`,`function`。ES6除了这两种方法外，还有`let`，`const`，`import`和`class`这四种方法。\n\n*******\n\n### 4. 跨模块常量\n\n`const`声明的常量只在当前代码块有效。如果想设置跨模块的常量，可以采用下面的写法。\n\n```js\n\nconst foo = Object.freeze({});\n\n// constants.js 模块\nexport const A = 1;\nexport const B = 3;\nexport const C = 4;\n\n// test1.js 模块\nimport * as constants from './constants';\nconsole.log(constants.A); // 1\nconsole.log(constants.B); // 3\n\n// test2.js 模块\nimport {A, B} from './constants';\nconsole.log(A); // 1\nconsole.log(B); // 3\n\n```\n\n******\n\n### 5. 全局对象的属性\n\nES6规定了，使用`var`和`function`声明的全局变量，依旧是全局对象的属性；使用`let`命令，`const`命令和`class`命令声明的全局变量，不属于全局对象的属性。\n\n```js\n\nvar a = 1;\n// 如果在Node的REPL环境，可以写成global.a\n// 或者采用通用方法，写成this.a\nwindow.a // 1\n\nlet b = 1;\nwindow.b // undefined\n\n```\n\n*******\n\n以上。\n","slug":"ES6study-1","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wdx0006dk5nhg8a3maj","content":"<p>笔记根据阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门</a>，内容基本来自于此书，总结是为了理解学习和加深印象，把认为重要的部分记录下来。</p>\n<h3 id=\"1-let命令\"><a href=\"#1-let命令\" class=\"headerlink\" title=\"1. let命令\"></a>1. let命令</h3><hr>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>ES6中新增加了<code>let</code>用来声明变量,他和<code>var</code>的用法类似，但是let声明的变量只在let所在的代码块内有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  a <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined.</span></span><br><span class=\"line\">b <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，如果在代码块外面调用了let的话，结果会报错。这表明let声明的变量只在他所在的代码块有效。</p>\n<p>所以<code>for</code>循环中，我们用let声明会很合适。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)<span class=\"comment\">//ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码的计数器i,只在for循环内有效。</p>\n<p><br><br>下面的代码如果使用<code>var</code>，最终的输出结果是10。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>var</code>声明的<code>i</code>在全局作用域中都有效，当在循环当中时<code>a[6]</code>返回<code>function () {console.log(i);};</code>，当在<code>for</code>循环执行完毕后<code>i</code>的值会变成10。当执行<code>a[6]()</code>时结果为10。</p>\n<p><br></p>\n<p>如果使用<code>let</code>，声明的变量只在块级作用域内有效，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，因为<code>i</code>只在本轮循环内有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后结果为6。</p>\n<hr>\n<h4 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h4><p><code>let</code>不会像<code>var</code>存在变量提升的现象，所以<code>let</code>要在声明之后调用，否则会出现错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>如上代码，在执行代码前，js会提前读取声明的<code>var</code>和<code>function</code>的变量名（变量值没有预先加载），所以在执行代码前，变量<code>foo</code>已经存在了会输出<code>undefined</code>，而变量<code>bar</code>不会发生变量提升，所以会抛出一个错误。</p>\n<hr>\n<h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p>只要有块级作用域内存在<code>let</code>命令，他所声明的变量就绑定这个区域，不再受到外部影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，因为块级作用域内<code>let</code>声明了局部变量<code>tmp</code>，<code>tmp</code>就绑定到了这个块级作用域中，块级作用域外的<code>var</code>声明会失效，在块级作用域内在还没有<code>let</code>声明前就对<code>tmp</code>赋值的话就会报错。</p>\n<p>ES6中规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这两种声明的变量从一开始就形成了封闭的作用域，凡是在声明之前就使用这些变量的话就会报错。</p>\n<p>简单来说，在代码块内，如果使用<code>let</code>命令来声明变量，这个变量在声明之前都是不可用的。这个在语法上称为“暂时性死区”（temporal dead zone，简称TDZ）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，在<code>let</code>命令声明变量<code>tmp</code>前，都属于<code>tmp</code>的“死区”。</p>\n<p>“暂时性死区”也意味着<code>typeof</code>操作会出现错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br></pre></td></tr></table></figure>\n<p>但是如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//undeclared_variable为为声明变量</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，新语法在有了<code>let</code>声明之后，一定要声明完变量之后再去使用，否则有可能会报错。</p>\n<p><br></p>\n<p>还有一些特别的“死区”。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = 2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码运行会报错，因为在把<code>y</code>的值赋给<code>x</code>前，<code>y</code>还没有声明，属于死区。</p>\n<p>总之，暂时性死区的本质就是，在已进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有在声明变量后才可以获取和使用该变量。</p>\n<hr>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p><code>let</code>不允许在相同作用域中，重复声明同一个变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也不能在函数内部重新声明参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-块级作用域\"><a href=\"#2-块级作用域\" class=\"headerlink\" title=\"2. 块级作用域\"></a>2. 块级作用域</h3><h4 id=\"为什么需要块级作用域？\"><a href=\"#为什么需要块级作用域？\" class=\"headerlink\" title=\"为什么需要块级作用域？\"></a>为什么需要块级作用域？</h4><p>在ES5中只有全局作用域和函数作用域，没有块级作用域，这会造成很多问题。</p>\n<p>计数的循环变量泄露为全局变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"ES6的块级作用域\"><a href=\"#ES6的块级作用域\" class=\"headerlink\" title=\"ES6的块级作用域\"></a>ES6的块级作用域</h4><p><code>let</code>是为JavaScript新增了块级作用域。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出的结果为5，这表示<code>let</code>声明的是一个块级作用域，外层的代码块不受内层的影响，如果使用<code>var</code>声明的话，最后输出结果为10。</p>\n<p>块级作用域出现后，立即执行匿名函数（IIFE）就不是唯一的选择了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE写法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-const命令\"><a href=\"#3-const命令\" class=\"headerlink\" title=\"3. const命令\"></a>3. const命令</h3><p>const也用来声明变量，这个变量是常量一旦声明，他的值是不可以改变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span><br><span class=\"line\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">PI <span class=\"comment\">// 3.1415</span></span><br><span class=\"line\"></span><br><span class=\"line\">PI = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: \"PI\" is read-only</span></span><br></pre></td></tr></table></figure>\n<p>在严格模式下，改变声明的常量的值会报错。在常规模式下不会报错但也不起作用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">// 常规模式时，重新赋值无效，但不报错</span></span><br><span class=\"line\">PI <span class=\"comment\">// 3.1415</span></span><br></pre></td></tr></table></figure></p>\n<p>const声明的变量不可以改变值，所以一旦声明后必须立即初始化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span><br><span class=\"line\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: missing = in const declaration</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，在严格模式下，如果没有立即初始化，会报错。在常规模式下，不会报错，但是以后对<code>foo</code>赋值的话也是无效的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo;</span><br><span class=\"line\">foo = <span class=\"number\">1</span>; <span class=\"comment\">// 常规模式，重新赋值无效</span></span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code>的作用与和<code>let</code>相同，都是在块级作用域之内有效，并且也不存在声明提升，会出现暂时性死区，只能在声明之后才能够调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(MAX); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>const</code>声明的常量，也和<code>let</code>一样不可以重复声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下两行都会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">\"Goodbye!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n<p>对于复合型变量名，变量名不会指向数据，而是指向数据所在的地址。<code>const</code>命令可以使指向的地址不变，但是不能保证地址内的数据不变。比如，如果使用<code>const</code>声明了一个对象，其实是声明了一个指向对象的地址，这个地址是不可变的，但是可以为这个对象来添加新的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">\"Dave\"</span>];    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>如上，变量<code>a</code>是一个数组，数组本身是可以改写的，但是如果将另一个数组赋值给<code>a</code>，就会报错。</p>\n<p>如果想让一个对象，不能添加新的属性，可以使用<code>Object.freeze</code>的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<p>如上，添加新的属性不会起作用，在严格模式下还会报错。</p>\n<p>ES5声明变量的方法有两个：<code>var</code>,<code>function</code>。ES6除了这两种方法外，还有<code>let</code>，<code>const</code>，<code>import</code>和<code>class</code>这四种方法。</p>\n<hr>\n<h3 id=\"4-跨模块常量\"><a href=\"#4-跨模块常量\" class=\"headerlink\" title=\"4. 跨模块常量\"></a>4. 跨模块常量</h3><p><code>const</code>声明的常量只在当前代码块有效。如果想设置跨模块的常量，可以采用下面的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// constants.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> B = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> C = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test1.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.B); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test2.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A, B&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-全局对象的属性\"><a href=\"#5-全局对象的属性\" class=\"headerlink\" title=\"5. 全局对象的属性\"></a>5. 全局对象的属性</h3><p>ES6规定了，使用<code>var</code>和<code>function</code>声明的全局变量，依旧是全局对象的属性；使用<code>let</code>命令，<code>const</code>命令和<code>class</code>命令声明的全局变量，不属于全局对象的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果在Node的REPL环境，可以写成global.a</span></span><br><span class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成this.a</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上。</p>\n","excerpt":"","more":"<p>笔记根据阮一峰老师的<a href=\"http://es6.ruanyifeng.com/#docs/let\">ECMAScript 6 入门</a>，内容基本来自于此书，总结是为了理解学习和加深印象，把认为重要的部分记录下来。</p>\n<h3 id=\"1-let命令\"><a href=\"#1-let命令\" class=\"headerlink\" title=\"1. let命令\"></a>1. let命令</h3><hr>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>ES6中新增加了<code>let</code>用来声明变量,他和<code>var</code>的用法类似，但是let声明的变量只在let所在的代码块内有效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  a <span class=\"comment\">// 10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"comment\">// ReferenceError: a is not defined.</span></span><br><span class=\"line\">b <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，如果在代码块外面调用了let的话，结果会报错。这表明let声明的变量只在他所在的代码块有效。</p>\n<p>所以<code>for</code>循环中，我们用let声明会很合适。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i)<span class=\"comment\">//ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码的计数器i,只在for循环内有效。</p>\n<p><br><br>下面的代码如果使用<code>var</code>，最终的输出结果是10。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>var</code>声明的<code>i</code>在全局作用域中都有效，当在循环当中时<code>a[6]</code>返回<code>function () {console.log(i);};</code>，当在<code>for</code>循环执行完毕后<code>i</code>的值会变成10。当执行<code>a[6]()</code>时结果为10。</p>\n<p><br></p>\n<p>如果使用<code>let</code>，声明的变量只在块级作用域内有效，代码如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  a[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，因为<code>i</code>只在本轮循环内有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后结果为6。</p>\n<hr>\n<h4 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h4><p><code>let</code>不会像<code>var</code>存在变量提升的现象，所以<code>let</code>要在声明之后调用，否则会出现错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<p>如上代码，在执行代码前，js会提前读取声明的<code>var</code>和<code>function</code>的变量名（变量值没有预先加载），所以在执行代码前，变量<code>foo</code>已经存在了会输出<code>undefined</code>，而变量<code>bar</code>不会发生变量提升，所以会抛出一个错误。</p>\n<hr>\n<h4 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h4><p>只要有块级作用域内存在<code>let</code>命令，他所声明的变量就绑定这个区域，不再受到外部影响。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，因为块级作用域内<code>let</code>声明了局部变量<code>tmp</code>，<code>tmp</code>就绑定到了这个块级作用域中，块级作用域外的<code>var</code>声明会失效，在块级作用域内在还没有<code>let</code>声明前就对<code>tmp</code>赋值的话就会报错。</p>\n<p>ES6中规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这两种声明的变量从一开始就形成了封闭的作用域，凡是在声明之前就使用这些变量的话就会报错。</p>\n<p>简单来说，在代码块内，如果使用<code>let</code>命令来声明变量，这个变量在声明之前都是不可用的。这个在语法上称为“暂时性死区”（temporal dead zone，简称TDZ）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TDZ开始</span></span><br><span class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp; <span class=\"comment\">// TDZ结束</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  tmp = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(tmp); <span class=\"comment\">// 123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，在<code>let</code>命令声明变量<code>tmp</code>前，都属于<code>tmp</code>的“死区”。</p>\n<p>“暂时性死区”也意味着<code>typeof</code>操作会出现错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> x; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br></pre></td></tr></table></figure>\n<p>但是如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//undeclared_variable为为声明变量</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> undeclared_variable <span class=\"comment\">// \"undefined\"</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，新语法在有了<code>let</code>声明之后，一定要声明完变量之后再去使用，否则有可能会报错。</p>\n<p><br></p>\n<p>还有一些特别的“死区”。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\">x = y, y = 2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar(); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码运行会报错，因为在把<code>y</code>的值赋给<code>x</code>前，<code>y</code>还没有声明，属于死区。</p>\n<p>总之，暂时性死区的本质就是，在已进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有在声明变量后才可以获取和使用该变量。</p>\n<hr>\n<h4 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h4><p><code>let</code>不允许在相同作用域中，重复声明同一个变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也不能在函数内部重新声明参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-块级作用域\"><a href=\"#2-块级作用域\" class=\"headerlink\" title=\"2. 块级作用域\"></a>2. 块级作用域</h3><h4 id=\"为什么需要块级作用域？\"><a href=\"#为什么需要块级作用域？\" class=\"headerlink\" title=\"为什么需要块级作用域？\"></a>为什么需要块级作用域？</h4><p>在ES5中只有全局作用域和函数作用域，没有块级作用域，这会造成很多问题。</p>\n<p>计数的循环变量泄露为全局变量。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(i); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"ES6的块级作用域\"><a href=\"#ES6的块级作用域\" class=\"headerlink\" title=\"ES6的块级作用域\"></a>ES6的块级作用域</h4><p><code>let</code>是为JavaScript新增了块级作用域。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(n); <span class=\"comment\">// 5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后输出的结果为5，这表示<code>let</code>声明的是一个块级作用域，外层的代码块不受内层的影响，如果使用<code>var</code>声明的话，最后输出结果为10。</p>\n<p>块级作用域出现后，立即执行匿名函数（IIFE）就不是唯一的选择了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IIFE写法</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 块级作用域写法</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"3-const命令\"><a href=\"#3-const命令\" class=\"headerlink\" title=\"3. const命令\"></a>3. const命令</h3><p>const也用来声明变量，这个变量是常量一旦声明，他的值是不可以改变的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span><br><span class=\"line\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">PI <span class=\"comment\">// 3.1415</span></span><br><span class=\"line\"></span><br><span class=\"line\">PI = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeError: \"PI\" is read-only</span></span><br></pre></td></tr></table></figure>\n<p>在严格模式下，改变声明的常量的值会报错。在常规模式下不会报错但也不起作用。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">// 常规模式时，重新赋值无效，但不报错</span></span><br><span class=\"line\">PI <span class=\"comment\">// 3.1415</span></span><br></pre></td></tr></table></figure></p>\n<p>const声明的变量不可以改变值，所以一旦声明后必须立即初始化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"></span><br><span class=\"line\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> foo;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: missing = in const declaration</span></span><br></pre></td></tr></table></figure>\n<p>如上面代码所示，在严格模式下，如果没有立即初始化，会报错。在常规模式下，不会报错，但是以后对<code>foo</code>赋值的话也是无效的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo;</span><br><span class=\"line\">foo = <span class=\"number\">1</span>; <span class=\"comment\">// 常规模式，重新赋值无效</span></span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code>的作用与和<code>let</code>相同，都是在块级作用域之内有效，并且也不存在声明提升，会出现暂时性死区，只能在声明之后才能够调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(MAX); <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> MAX = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>const</code>声明的常量，也和<code>let</code>一样不可以重复声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下两行都会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">\"Goodbye!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> age = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n<p>对于复合型变量名，变量名不会指向数据，而是指向数据所在的地址。<code>const</code>命令可以使指向的地址不变，但是不能保证地址内的数据不变。比如，如果使用<code>const</code>声明了一个对象，其实是声明了一个指向对象的地址，这个地址是不可变的，但是可以为这个对象来添加新的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">a.push(<span class=\"string\">\"Hello\"</span>); <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a.length = <span class=\"number\">0</span>;    <span class=\"comment\">// 可执行</span></span><br><span class=\"line\">a = [<span class=\"string\">\"Dave\"</span>];    <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>如上，变量<code>a</code>是一个数组，数组本身是可以改写的，但是如果将另一个数组赋值给<code>a</code>，就会报错。</p>\n<p>如果想让一个对象，不能添加新的属性，可以使用<code>Object.freeze</code>的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></span><br><span class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></span><br><span class=\"line\">foo.prop = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<p>如上，添加新的属性不会起作用，在严格模式下还会报错。</p>\n<p>ES5声明变量的方法有两个：<code>var</code>,<code>function</code>。ES6除了这两种方法外，还有<code>let</code>，<code>const</code>，<code>import</code>和<code>class</code>这四种方法。</p>\n<hr>\n<h3 id=\"4-跨模块常量\"><a href=\"#4-跨模块常量\" class=\"headerlink\" title=\"4. 跨模块常量\"></a>4. 跨模块常量</h3><p><code>const</code>声明的常量只在当前代码块有效。如果想设置跨模块的常量，可以采用下面的写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// constants.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> A = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> B = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> C = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test1.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> constants <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(constants.B); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// test2.js 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;A, B&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./constants'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(B); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-全局对象的属性\"><a href=\"#5-全局对象的属性\" class=\"headerlink\" title=\"5. 全局对象的属性\"></a>5. 全局对象的属性</h3><p>ES6规定了，使用<code>var</code>和<code>function</code>声明的全局变量，依旧是全局对象的属性；使用<code>let</code>命令，<code>const</code>命令和<code>class</code>命令声明的全局变量，不属于全局对象的属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果在Node的REPL环境，可以写成global.a</span></span><br><span class=\"line\"><span class=\"comment\">// 或者采用通用方法，写成this.a</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.a <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.b <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上。</p>\n"},{"layout":"post","title":"好的博客及文章","date":"2016-01-24T16:00:00.000Z","_content":"\n\n这个可能会不定时的放一些看到的比较好的博客和文章。\n\n可能会更新，也可能会一直不更新 /抠鼻\n\nairbnb程序编写规范——[这里](https://github.com/vikingmute/javascript)\n","source":"_posts/2016-01-25-好的博客及文章.md","raw":"---\nlayout: post\ntitle: 好的博客及文章\ndate: 2016-01-25\ntags: [好的博客]\ncategories: 杂事二三\n---\n\n\n这个可能会不定时的放一些看到的比较好的博客和文章。\n\n可能会更新，也可能会一直不更新 /抠鼻\n\nairbnb程序编写规范——[这里](https://github.com/vikingmute/javascript)\n","slug":"好的博客及文章","published":1,"updated":"2016-03-24T09:21:12.000Z","comments":1,"photos":[],"link":"","_id":"cim631we30008dk5nhwpzek16","content":"<p>这个可能会不定时的放一些看到的比较好的博客和文章。</p>\n<p>可能会更新，也可能会一直不更新 /抠鼻</p>\n<p>airbnb程序编写规范——<a href=\"https://github.com/vikingmute/javascript\" target=\"_blank\" rel=\"external\">这里</a></p>\n","excerpt":"","more":"<p>这个可能会不定时的放一些看到的比较好的博客和文章。</p>\n<p>可能会更新，也可能会一直不更新 /抠鼻</p>\n<p>airbnb程序编写规范——<a href=\"https://github.com/vikingmute/javascript\">这里</a></p>\n"},{"layout":"post","title":"ES6学习笔记(变量的解构赋值)","date":"2016-01-24T16:00:00.000Z","_content":"\n解构赋值这块，主要讲了数组，对象，字符串，数值和布尔值，函数参数这五类的解构赋值。\n\n### 1. 结构赋值的用途\n\n首先，我们先不看具体的用法，来看看结构赋值会运用到哪些地方，先有一个大概的印象。\n\n#### 交换变量的值\n\n```js\n\n[x, y] = [y, x];\n\n```\n\n如上代码，这样写交换变量，简洁易懂，语义清晰。\n\n******\n\n#### 从函数返回多个值\n\n原来函数只能返回一个值，如果需要返回多个值需要把他们放到一个数组或者是对象里返回。有了解构赋值之后，一切就方便多了。\n\n```js\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nvar [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nvar { foo, bar } = example();\n\n```\n\n******\n\n#### 函数参数的定义\n\n```js\n\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3])\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1})\n\n```\n\n*******\n\n#### 提取JSON数据\n\n解构赋值对提取JSON对象中的数据，尤其有用。\n\n```js\n\nvar jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number)\n// 42, OK, [867, 5309]\n\n```\n\n*****\n\n#### 函数参数的默认值\n\n```js\n\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n\n可以指定参数的默认值，避免了在函数体当中写`var foo = config.foo || 'default foo';`这样的语句。\n\n*****\n\n#### 遍历Map结构\n\n任何部署了Iterator接口的对象，都可以用`for...of`循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就很方便了。\n\n```js\n\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n```\n\n如上，声明了两个变量`key`和`value`去接收了键值对。如果想只接收键名或者键值，可以运用如下写法。\n\n```js\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n\n```\n\n****\n\n#### 输入模块的制定方法\n\n加载模块时，往往需要制定输入哪些方法，解构赋值使得输入语句非常清晰。（我没懂。。。。）\n\n```js\n\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n\n```\n\n****\n\n### 2. 数组的解构赋值\n\n#### 基本用法\n\n按照一定的模式（格式），从数组和对象中取值来赋值给变量，这个过程被称为解构赋值。\n\n以前，为变量赋值，只能是以下的形式：\n\n```js\n\nvar a = 1;\nvar b = 2;\nvar c = 3;\n\n```\n\n而ES6允许以这种形式来赋值：\n\n```js\n\nvar [a, b, c] = [1, 2, 3];\n\n```\n\n如上代码，等号两边可以按照对应位置，去对变量赋值。\n\n这种写法属于“模式匹配”，只要等号两边的模式相同，右边的值就会赋给左边的变量中去。下面是一些解构的例子。\n\n```js\n\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n```\n\n如果解构不成功，变量的值就为`undefined`。\n\n```js\n\nvar [foo] = [];\nvar [bar, foo] = [1];\n\n```\n\n还有一种情况是不完全解构，等号左边的模式只可以匹配到一部分等号右边的数组，这种情况依然可以解构成功。\n\n如果等号的右边不是一个可以遍历的解构（[具体看这里](http://es6.ruanyifeng.com/#docs/iterator)），那么就会报错。\n\n```js\n\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n\n```\n\n上面的式子都会报错，因为等号右边的值，要么转为对象以后不具备Iterator接口（前五个表达式），要么本身就不具备Iterator接口（最后一个表达式）。\n\n解构赋值不仅适用于`var`命令，也适用于`let`和`const`命令。对于Set解构，也可以使用数组的解构赋值。\n\n```js\n\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n\n```\n\n*****\n\n#### 默认值\n\n解构赋值允许指定默认值。\n\n```js\n\nvar [foo = true] = [];\nfoo // true\n\n[x, y = 'b'] = ['a'] // x='a', y='b'\n[x, y = 'b'] = ['a', undefined] // x='a', y='b'\n\n```\n\n这里要注意的是，如果要使用默认的值，一定要严责等于`undefined`，否则默认值是不会生效的。\n\n```js\n\nvar [x = 1] = [undefined];\nx // 1\n\nvar [x = 1] = [null];\nx // null\n\n```\n\n如上代码，如果等号右边是`null`的话，默认值就不会生效，因为`null`不严格等于`undefiend`。\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\n\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError\n\n```\n\n如果代码，最后一个表达式报错是因为在`x`用到`y`时，`y`还没有声明。\n\n******\n\n### 3. 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```js\n\nvar { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\n```\n\n对象的解构和数组不同的是，数组的解构是有顺序限制的，变量的取值是由他的位置决定的，而对象的属性没有次序，变量必须与属性同名才能取到正确的值。\n\n```js\n\nvar { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nvar { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n\n```\n\n如上代码，等号左边两个变量的次序与等号右边两个属性的次序不一致，但是取值正确，如果变量没有对应的同名属性的话会取不到值。\n\n如果变量名和属性名不一致，我们必须引用一个叫`模式`的东西，我可能理解的比较通俗，先看以下的代码，在做解释。\n\n```js\n\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n```\n\n对象的赋值解构的内部机制其实是这样的：\n\n```js\n\nvar { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n\n```\n\n`:`之前的部分我们叫做`模式`，`:`之后的部分才是`变量`，在解构赋值内部机制是先根据模式找到同名的属性，再给对应的变量赋值，真正被赋值的是`：`后面的变量。\n\n在平时对象解构赋值的时候我们把`:`之后的变量给省略掉了，这样在内部他会加上一个和模式名字相同的变量名，在省略了变量名的情况下，我们打印模式名是不会出错的。\n\n但如果`变量`名和`模式`名是不一样的时候，比如下面这种情况：\n\n```js\n\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n```\n\n如上这样，真正被赋值的就是变量`baz`，而不是模式`foo`。\n\n和数组一样，解构也可以用于嵌套解构的对象。\n\n```js\n\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n\n```\n\n如上，只有`line`是变量，`loc`和`start`都是模式，不会被赋值。\n\n嵌套赋值的例子：\n\n```js\n\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n\n```\n\n对象的解构也可以指定默认的值。\n\n```js\n\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {};\nmsg // \"Something went wrong\"\n\n```\n\n默认值生效的条件，也是对象的属性值严格等于`undefined`。如果不是严格等于`undefined`默认值就不会生效。\n\n```js\n\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n\n```\n\n如果解构失败的话。变量的值也会等于`undefined`。\n\n```js\n\nvar {foo} = {bar: 'baz'}\nfoo // undefined\n\n```\n\n如果，解构的模式是一个对象的话，而模式名却在等号的右边不存在的话，那么将会报错。因为在解构的时候，首先会寻找与模式同名的属性，如果没有这个属性名就会报错。\n\n```js\n\n// 报错\nvar {foo: {bar}} = {baz: 'baz'}\n\n```\n\n### 4. 字符串的解构赋值\n\n字符串解构赋值是，会转换为一个类似数组的对象。\n\n```js\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n```\n\n### 5. 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，会先转为对象。\n\n```js\n\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n\n```\n\n解构赋值的规则是，只要等号右边的值不是对象，就先将其转化为对象，但是由于`undefined`和`null`不能转为对象，所以对他们进行解构赋值都会报错。\n\n\n### 6. 函数参数的解构赋值\n\n```js\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]) // 3\n\n```\n\n如上代码，函数`add`的参数实际上不是一个数组，而是通过结构得刀的变量`x`和`y`。\n\n函数参数的解构也可以使用默认值。\n\n```js\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n```\n\n以上还有很多细节方面没有描述，只是在常用方面做出了总结，详细的[请看](http://es6.ruanyifeng.com/#docs/destructuring)\n\n\n","source":"_posts/2016-01-25-ES6study-2.md","raw":"---\nlayout: post\ntitle: ES6学习笔记(变量的解构赋值)\ndate: 2016-01-25\ntags: [ES6]\ncategories: ES6\n---\n\n解构赋值这块，主要讲了数组，对象，字符串，数值和布尔值，函数参数这五类的解构赋值。\n\n### 1. 结构赋值的用途\n\n首先，我们先不看具体的用法，来看看结构赋值会运用到哪些地方，先有一个大概的印象。\n\n#### 交换变量的值\n\n```js\n\n[x, y] = [y, x];\n\n```\n\n如上代码，这样写交换变量，简洁易懂，语义清晰。\n\n******\n\n#### 从函数返回多个值\n\n原来函数只能返回一个值，如果需要返回多个值需要把他们放到一个数组或者是对象里返回。有了解构赋值之后，一切就方便多了。\n\n```js\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nvar [a, b, c] = example();\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nvar { foo, bar } = example();\n\n```\n\n******\n\n#### 函数参数的定义\n\n```js\n\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3])\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1})\n\n```\n\n*******\n\n#### 提取JSON数据\n\n解构赋值对提取JSON对象中的数据，尤其有用。\n\n```js\n\nvar jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number)\n// 42, OK, [867, 5309]\n\n```\n\n*****\n\n#### 函数参数的默认值\n\n```js\n\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n\n可以指定参数的默认值，避免了在函数体当中写`var foo = config.foo || 'default foo';`这样的语句。\n\n*****\n\n#### 遍历Map结构\n\n任何部署了Iterator接口的对象，都可以用`for...of`循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就很方便了。\n\n```js\n\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n```\n\n如上，声明了两个变量`key`和`value`去接收了键值对。如果想只接收键名或者键值，可以运用如下写法。\n\n```js\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n\n```\n\n****\n\n#### 输入模块的制定方法\n\n加载模块时，往往需要制定输入哪些方法，解构赋值使得输入语句非常清晰。（我没懂。。。。）\n\n```js\n\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n\n```\n\n****\n\n### 2. 数组的解构赋值\n\n#### 基本用法\n\n按照一定的模式（格式），从数组和对象中取值来赋值给变量，这个过程被称为解构赋值。\n\n以前，为变量赋值，只能是以下的形式：\n\n```js\n\nvar a = 1;\nvar b = 2;\nvar c = 3;\n\n```\n\n而ES6允许以这种形式来赋值：\n\n```js\n\nvar [a, b, c] = [1, 2, 3];\n\n```\n\n如上代码，等号两边可以按照对应位置，去对变量赋值。\n\n这种写法属于“模式匹配”，只要等号两边的模式相同，右边的值就会赋给左边的变量中去。下面是一些解构的例子。\n\n```js\n\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n\n```\n\n如果解构不成功，变量的值就为`undefined`。\n\n```js\n\nvar [foo] = [];\nvar [bar, foo] = [1];\n\n```\n\n还有一种情况是不完全解构，等号左边的模式只可以匹配到一部分等号右边的数组，这种情况依然可以解构成功。\n\n如果等号的右边不是一个可以遍历的解构（[具体看这里](http://es6.ruanyifeng.com/#docs/iterator)），那么就会报错。\n\n```js\n\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n\n```\n\n上面的式子都会报错，因为等号右边的值，要么转为对象以后不具备Iterator接口（前五个表达式），要么本身就不具备Iterator接口（最后一个表达式）。\n\n解构赋值不仅适用于`var`命令，也适用于`let`和`const`命令。对于Set解构，也可以使用数组的解构赋值。\n\n```js\n\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n\n```\n\n*****\n\n#### 默认值\n\n解构赋值允许指定默认值。\n\n```js\n\nvar [foo = true] = [];\nfoo // true\n\n[x, y = 'b'] = ['a'] // x='a', y='b'\n[x, y = 'b'] = ['a', undefined] // x='a', y='b'\n\n```\n\n这里要注意的是，如果要使用默认的值，一定要严责等于`undefined`，否则默认值是不会生效的。\n\n```js\n\nvar [x = 1] = [undefined];\nx // 1\n\nvar [x = 1] = [null];\nx // null\n\n```\n\n如上代码，如果等号右边是`null`的话，默认值就不会生效，因为`null`不严格等于`undefiend`。\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```js\n\nlet [x = 1, y = x] = [];     // x=1; y=1\nlet [x = 1, y = x] = [2];    // x=2; y=2\nlet [x = 1, y = x] = [1, 2]; // x=1; y=2\nlet [x = y, y = 1] = [];     // ReferenceError\n\n```\n\n如果代码，最后一个表达式报错是因为在`x`用到`y`时，`y`还没有声明。\n\n******\n\n### 3. 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```js\n\nvar { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\n```\n\n对象的解构和数组不同的是，数组的解构是有顺序限制的，变量的取值是由他的位置决定的，而对象的属性没有次序，变量必须与属性同名才能取到正确的值。\n\n```js\n\nvar { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nvar { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n\n```\n\n如上代码，等号左边两个变量的次序与等号右边两个属性的次序不一致，但是取值正确，如果变量没有对应的同名属性的话会取不到值。\n\n如果变量名和属性名不一致，我们必须引用一个叫`模式`的东西，我可能理解的比较通俗，先看以下的代码，在做解释。\n\n```js\n\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n```\n\n对象的赋值解构的内部机制其实是这样的：\n\n```js\n\nvar { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n\n```\n\n`:`之前的部分我们叫做`模式`，`:`之后的部分才是`变量`，在解构赋值内部机制是先根据模式找到同名的属性，再给对应的变量赋值，真正被赋值的是`：`后面的变量。\n\n在平时对象解构赋值的时候我们把`:`之后的变量给省略掉了，这样在内部他会加上一个和模式名字相同的变量名，在省略了变量名的情况下，我们打印模式名是不会出错的。\n\n但如果`变量`名和`模式`名是不一样的时候，比如下面这种情况：\n\n```js\n\nvar { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n```\n\n如上这样，真正被赋值的就是变量`baz`，而不是模式`foo`。\n\n和数组一样，解构也可以用于嵌套解构的对象。\n\n```js\n\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n\n```\n\n如上，只有`line`是变量，`loc`和`start`都是模式，不会被赋值。\n\n嵌套赋值的例子：\n\n```js\n\nlet obj = {};\nlet arr = [];\n\n({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true });\n\nobj // {prop:123}\narr // [true]\n\n```\n\n对象的解构也可以指定默认的值。\n\n```js\n\nvar {x = 3} = {};\nx // 3\n\nvar {x, y = 5} = {x: 1};\nx // 1\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {};\nmsg // \"Something went wrong\"\n\n```\n\n默认值生效的条件，也是对象的属性值严格等于`undefined`。如果不是严格等于`undefined`默认值就不会生效。\n\n```js\n\nvar {x = 3} = {x: undefined};\nx // 3\n\nvar {x = 3} = {x: null};\nx // null\n\n```\n\n如果解构失败的话。变量的值也会等于`undefined`。\n\n```js\n\nvar {foo} = {bar: 'baz'}\nfoo // undefined\n\n```\n\n如果，解构的模式是一个对象的话，而模式名却在等号的右边不存在的话，那么将会报错。因为在解构的时候，首先会寻找与模式同名的属性，如果没有这个属性名就会报错。\n\n```js\n\n// 报错\nvar {foo: {bar}} = {baz: 'baz'}\n\n```\n\n### 4. 字符串的解构赋值\n\n字符串解构赋值是，会转换为一个类似数组的对象。\n\n```js\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n```\n\n### 5. 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，会先转为对象。\n\n```js\n\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\n\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n\n```\n\n解构赋值的规则是，只要等号右边的值不是对象，就先将其转化为对象，但是由于`undefined`和`null`不能转为对象，所以对他们进行解构赋值都会报错。\n\n\n### 6. 函数参数的解构赋值\n\n```js\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]) // 3\n\n```\n\n如上代码，函数`add`的参数实际上不是一个数组，而是通过结构得刀的变量`x`和`y`。\n\n函数参数的解构也可以使用默认值。\n\n```js\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n```\n\n以上还有很多细节方面没有描述，只是在常用方面做出了总结，详细的[请看](http://es6.ruanyifeng.com/#docs/destructuring)\n\n\n","slug":"ES6study-2","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631weq000adk5nhqd7x42b","content":"<p>解构赋值这块，主要讲了数组，对象，字符串，数值和布尔值，函数参数这五类的解构赋值。</p>\n<h3 id=\"1-结构赋值的用途\"><a href=\"#1-结构赋值的用途\" class=\"headerlink\" title=\"1. 结构赋值的用途\"></a>1. 结构赋值的用途</h3><p>首先，我们先不看具体的用法，来看看结构赋值会运用到哪些地方，先有一个大概的印象。</p>\n<h4 id=\"交换变量的值\"><a href=\"#交换变量的值\" class=\"headerlink\" title=\"交换变量的值\"></a>交换变量的值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>如上代码，这样写交换变量，简洁易懂，语义清晰。</p>\n<hr>\n<h4 id=\"从函数返回多个值\"><a href=\"#从函数返回多个值\" class=\"headerlink\" title=\"从函数返回多个值\"></a>从函数返回多个值</h4><p>原来函数只能返回一个值，如果需要返回多个值需要把他们放到一个数组或者是对象里返回。有了解构赋值之后，一切就方便多了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"函数参数的定义\"><a href=\"#函数参数的定义\" class=\"headerlink\" title=\"函数参数的定义\"></a>函数参数的定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: <span class=\"number\">3</span>, y: <span class=\"number\">2</span>, x: <span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"提取JSON数据\"><a href=\"#提取JSON数据\" class=\"headerlink\" title=\"提取JSON数据\"></a>提取JSON数据</h4><p>解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, OK, [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span><br><span class=\"line\">  async = true,</span><br><span class=\"line\">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以指定参数的默认值，避免了在函数体当中写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<hr>\n<h4 id=\"遍历Map结构\"><a href=\"#遍历Map结构\" class=\"headerlink\" title=\"遍历Map结构\"></a>遍历Map结构</h4><p>任何部署了Iterator接口的对象，都可以用<code>for...of</code>循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就很方便了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如上，声明了两个变量<code>key</code>和<code>value</code>去接收了键值对。如果想只接收键名或者键值，可以运用如下写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"输入模块的制定方法\"><a href=\"#输入模块的制定方法\" class=\"headerlink\" title=\"输入模块的制定方法\"></a>输入模块的制定方法</h4><p>加载模块时，往往需要制定输入哪些方法，解构赋值使得输入语句非常清晰。（我没懂。。。。）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-数组的解构赋值\"><a href=\"#2-数组的解构赋值\" class=\"headerlink\" title=\"2. 数组的解构赋值\"></a>2. 数组的解构赋值</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>按照一定的模式（格式），从数组和对象中取值来赋值给变量，这个过程被称为解构赋值。</p>\n<p>以前，为变量赋值，只能是以下的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>而ES6允许以这种形式来赋值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>如上代码，等号两边可以按照对应位置，去对变量赋值。</p>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，右边的值就会赋给左边的变量中去。下面是一些解构的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [foo] = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [bar, foo] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>还有一种情况是不完全解构，等号左边的模式只可以匹配到一部分等号右边的数组，这种情况依然可以解构成功。</p>\n<p>如果等号的右边不是一个可以遍历的解构（<a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"external\">具体看这里</a>），那么就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的式子都会报错，因为等号右边的值，要么转为对象以后不具备Iterator接口（前五个表达式），要么本身就不具备Iterator接口（最后一个表达式）。</p>\n<p>解构赋值不仅适用于<code>var</code>命令，也适用于<code>let</code>和<code>const</code>命令。对于Set解构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n<p>这里要注意的是，如果要使用默认的值，一定要严责等于<code>undefined</code>，否则默认值是不会生效的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，如果等号右边是<code>null</code>的话，默认值就不会生效，因为<code>null</code>不严格等于<code>undefiend</code>。</p>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>如果代码，最后一个表达式报错是因为在<code>x</code>用到<code>y</code>时，<code>y</code>还没有声明。</p>\n<hr>\n<h3 id=\"3-对象的解构赋值\"><a href=\"#3-对象的解构赋值\" class=\"headerlink\" title=\"3. 对象的解构赋值\"></a>3. 对象的解构赋值</h3><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构和数组不同的是，数组的解构是有顺序限制的，变量的取值是由他的位置决定的，而对象的属性没有次序，变量必须与属性同名才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; bar, foo &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，等号左边两个变量的次序与等号右边两个属性的次序不一致，但是取值正确，如果变量没有对应的同名属性的话会取不到值。</p>\n<p>如果变量名和属性名不一致，我们必须引用一个叫<code>模式</code>的东西，我可能理解的比较通俗，先看以下的代码，在做解释。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; first: <span class=\"string\">'hello'</span>, last: <span class=\"string\">'world'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; first: f, last: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<p>对象的赋值解构的内部机制其实是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: foo, bar: bar &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>:</code>之前的部分我们叫做<code>模式</code>，<code>:</code>之后的部分才是<code>变量</code>，在解构赋值内部机制是先根据模式找到同名的属性，再给对应的变量赋值，真正被赋值的是<code>：</code>后面的变量。</p>\n<p>在平时对象解构赋值的时候我们把<code>:</code>之后的变量给省略掉了，这样在内部他会加上一个和模式名字相同的变量名，在省略了变量名的情况下，我们打印模式名是不会出错的。</p>\n<p>但如果<code>变量</code>名和<code>模式</code>名是不一样的时候，比如下面这种情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n<p>如上这样，真正被赋值的就是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>和数组一样，解构也可以用于嵌套解构的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node = &#123;</span><br><span class=\"line\">  loc: &#123;</span><br><span class=\"line\">    start: &#123;</span><br><span class=\"line\">      line: <span class=\"number\">1</span>,</span><br><span class=\"line\">      column: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></span><br><span class=\"line\">start <span class=\"comment\">// error: start is undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不会被赋值。</p>\n<p>嵌套赋值的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123; foo: obj.prop, bar: arr[<span class=\"number\">0</span>] &#125; = &#123; foo: <span class=\"number\">123</span>, bar: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构也可以指定默认的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;x: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; message: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n<p>默认值生效的条件，也是对象的属性值严格等于<code>undefined</code>。如果不是严格等于<code>undefined</code>默认值就不会生效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;x: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;x: <span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>如果解构失败的话。变量的值也会等于<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo&#125; = &#123;bar: <span class=\"string\">'baz'</span>&#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果，解构的模式是一个对象的话，而模式名却在等号的右边不存在的话，那么将会报错。因为在解构的时候，首先会寻找与模式同名的属性，如果没有这个属性名就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo: &#123;bar&#125;&#125; = &#123;baz: <span class=\"string\">'baz'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-字符串的解构赋值\"><a href=\"#4-字符串的解构赋值\" class=\"headerlink\" title=\"4. 字符串的解构赋值\"></a>4. 字符串的解构赋值</h3><p>字符串解构赋值是，会转换为一个类似数组的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-数值和布尔值的解构赋值\"><a href=\"#5-数值和布尔值的解构赋值\" class=\"headerlink\" title=\"5. 数值和布尔值的解构赋值\"></a>5. 数值和布尔值的解构赋值</h3><p>解构赋值时，如果等号右边是数值和布尔值，会先转为对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;toString: s&#125; = <span class=\"number\">123</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;toString: s&#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转化为对象，但是由于<code>undefined</code>和<code>null</code>不能转为对象，所以对他们进行解构赋值都会报错。</p>\n<h3 id=\"6-函数参数的解构赋值\"><a href=\"#6-函数参数的解构赋值\" class=\"headerlink\" title=\"6. 函数参数的解构赋值\"></a>6. 函数参数的解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，函数<code>add</code>的参数实际上不是一个数组，而是通过结构得刀的变量<code>x</code>和<code>y</code>。</p>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = 0, y = 0&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;x: <span class=\"number\">3</span>, y: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;x: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>以上还有很多细节方面没有描述，只是在常用方面做出了总结，详细的<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\" target=\"_blank\" rel=\"external\">请看</a></p>\n","excerpt":"","more":"<p>解构赋值这块，主要讲了数组，对象，字符串，数值和布尔值，函数参数这五类的解构赋值。</p>\n<h3 id=\"1-结构赋值的用途\"><a href=\"#1-结构赋值的用途\" class=\"headerlink\" title=\"1. 结构赋值的用途\"></a>1. 结构赋值的用途</h3><p>首先，我们先不看具体的用法，来看看结构赋值会运用到哪些地方，先有一个大概的印象。</p>\n<h4 id=\"交换变量的值\"><a href=\"#交换变量的值\" class=\"headerlink\" title=\"交换变量的值\"></a>交换变量的值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>如上代码，这样写交换变量，简洁易懂，语义清晰。</p>\n<hr>\n<h4 id=\"从函数返回多个值\"><a href=\"#从函数返回多个值\" class=\"headerlink\" title=\"从函数返回多个值\"></a>从函数返回多个值</h4><p>原来函数只能返回一个值，如果需要返回多个值需要把他们放到一个数组或者是对象里返回。有了解构赋值之后，一切就方便多了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"函数参数的定义\"><a href=\"#函数参数的定义\" class=\"headerlink\" title=\"函数参数的定义\"></a>函数参数的定义</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;z: <span class=\"number\">3</span>, y: <span class=\"number\">2</span>, x: <span class=\"number\">1</span>&#125;)</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"提取JSON数据\"><a href=\"#提取JSON数据\" class=\"headerlink\" title=\"提取JSON数据\"></a>提取JSON数据</h4><p>解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, data: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, OK, [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span><br><span class=\"line\">  async = true,</span><br><span class=\"line\">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>可以指定参数的默认值，避免了在函数体当中写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<hr>\n<h4 id=\"遍历Map结构\"><a href=\"#遍历Map结构\" class=\"headerlink\" title=\"遍历Map结构\"></a>遍历Map结构</h4><p>任何部署了Iterator接口的对象，都可以用<code>for...of</code>循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就很方便了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如上，声明了两个变量<code>key</code>和<code>value</code>去接收了键值对。如果想只接收键名或者键值，可以运用如下写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"输入模块的制定方法\"><a href=\"#输入模块的制定方法\" class=\"headerlink\" title=\"输入模块的制定方法\"></a>输入模块的制定方法</h4><p>加载模块时，往往需要制定输入哪些方法，解构赋值使得输入语句非常清晰。（我没懂。。。。）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-数组的解构赋值\"><a href=\"#2-数组的解构赋值\" class=\"headerlink\" title=\"2. 数组的解构赋值\"></a>2. 数组的解构赋值</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>按照一定的模式（格式），从数组和对象中取值来赋值给变量，这个过程被称为解构赋值。</p>\n<p>以前，为变量赋值，只能是以下的形式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>而ES6允许以这种形式来赋值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>如上代码，等号两边可以按照对应位置，去对变量赋值。</p>\n<p>这种写法属于“模式匹配”，只要等号两边的模式相同，右边的值就会赋给左边的变量中去。下面是一些解构的例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [foo] = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> [bar, foo] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>还有一种情况是不完全解构，等号左边的模式只可以匹配到一部分等号右边的数组，这种情况依然可以解构成功。</p>\n<p>如果等号的右边不是一个可以遍历的解构（<a href=\"http://es6.ruanyifeng.com/#docs/iterator\">具体看这里</a>），那么就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的式子都会报错，因为等号右边的值，要么转为对象以后不具备Iterator接口（前五个表达式），要么本身就不具备Iterator接口（最后一个表达式）。</p>\n<p>解构赋值不仅适用于<code>var</code>命令，也适用于<code>let</code>和<code>const</code>命令。对于Set解构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h4><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\">[x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n<p>这里要注意的是，如果要使用默认的值，一定要严责等于<code>undefined</code>，否则默认值是不会生效的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，如果等号右边是<code>null</code>的话，默认值就不会生效，因为<code>null</code>不严格等于<code>undefiend</code>。</p>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>如果代码，最后一个表达式报错是因为在<code>x</code>用到<code>y</code>时，<code>y</code>还没有声明。</p>\n<hr>\n<h3 id=\"3-对象的解构赋值\"><a href=\"#3-对象的解构赋值\" class=\"headerlink\" title=\"3. 对象的解构赋值\"></a>3. 对象的解构赋值</h3><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo, bar &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构和数组不同的是，数组的解构是有顺序限制的，变量的取值是由他的位置决定的，而对象的属性没有次序，变量必须与属性同名才能取到正确的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; bar, foo &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，等号左边两个变量的次序与等号右边两个属性的次序不一致，但是取值正确，如果变量没有对应的同名属性的话会取不到值。</p>\n<p>如果变量名和属性名不一致，我们必须引用一个叫<code>模式</code>的东西，我可能理解的比较通俗，先看以下的代码，在做解释。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; first: <span class=\"string\">'hello'</span>, last: <span class=\"string\">'world'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; first: f, last: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<p>对象的赋值解构的内部机制其实是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: foo, bar: bar &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>:</code>之前的部分我们叫做<code>模式</code>，<code>:</code>之后的部分才是<code>变量</code>，在解构赋值内部机制是先根据模式找到同名的属性，再给对应的变量赋值，真正被赋值的是<code>：</code>后面的变量。</p>\n<p>在平时对象解构赋值的时候我们把<code>:</code>之后的变量给省略掉了，这样在内部他会加上一个和模式名字相同的变量名，在省略了变量名的情况下，我们打印模式名是不会出错的。</p>\n<p>但如果<code>变量</code>名和<code>模式</code>名是不一样的时候，比如下面这种情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; foo: baz &#125; = &#123; foo: <span class=\"string\">\"aaa\"</span>, bar: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n<p>如上这样，真正被赋值的就是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>和数组一样，解构也可以用于嵌套解构的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node = &#123;</span><br><span class=\"line\">  loc: &#123;</span><br><span class=\"line\">    start: &#123;</span><br><span class=\"line\">      line: <span class=\"number\">1</span>,</span><br><span class=\"line\">      column: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></span><br><span class=\"line\">start <span class=\"comment\">// error: start is undefined</span></span><br></pre></td></tr></table></figure>\n<p>如上，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不会被赋值。</p>\n<p>嵌套赋值的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123; foo: obj.prop, bar: arr[<span class=\"number\">0</span>] &#125; = &#123; foo: <span class=\"number\">123</span>, bar: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构也可以指定默认的值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;x: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; message: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n<p>默认值生效的条件，也是对象的属性值严格等于<code>undefined</code>。如果不是严格等于<code>undefined</code>默认值就不会生效。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;x: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;x: <span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>如果解构失败的话。变量的值也会等于<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo&#125; = &#123;bar: <span class=\"string\">'baz'</span>&#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果，解构的模式是一个对象的话，而模式名却在等号的右边不存在的话，那么将会报错。因为在解构的时候，首先会寻找与模式同名的属性，如果没有这个属性名就会报错。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;foo: &#123;bar&#125;&#125; = &#123;baz: <span class=\"string\">'baz'</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-字符串的解构赋值\"><a href=\"#4-字符串的解构赋值\" class=\"headerlink\" title=\"4. 字符串的解构赋值\"></a>4. 字符串的解构赋值</h3><p>字符串解构赋值是，会转换为一个类似数组的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-数值和布尔值的解构赋值\"><a href=\"#5-数值和布尔值的解构赋值\" class=\"headerlink\" title=\"5. 数值和布尔值的解构赋值\"></a>5. 数值和布尔值的解构赋值</h3><p>解构赋值时，如果等号右边是数值和布尔值，会先转为对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;toString: s&#125; = <span class=\"number\">123</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;toString: s&#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>解构赋值的规则是，只要等号右边的值不是对象，就先将其转化为对象，但是由于<code>undefined</code>和<code>null</code>不能转为对象，所以对他们进行解构赋值都会报错。</p>\n<h3 id=\"6-函数参数的解构赋值\"><a href=\"#6-函数参数的解构赋值\" class=\"headerlink\" title=\"6. 函数参数的解构赋值\"></a>6. 函数参数的解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，函数<code>add</code>的参数实际上不是一个数组，而是通过结构得刀的变量<code>x</code>和<code>y</code>。</p>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = 0, y = 0&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;x: <span class=\"number\">3</span>, y: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;x: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>以上还有很多细节方面没有描述，只是在常用方面做出了总结，详细的<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\">请看</a></p>\n"},{"layout":"post","title":"通过Charles解决手机调试本地页面时的跨域问题","date":"2016-01-25T16:00:00.000Z","_content":"\n今天在调试本地页面的时候遇到了一个问题，在本地调试页面，如果访问服务器的接口就会遇到跨域的问题。当在pc端调试本地页面的时候，使用浏览器插件allow-control-allow-origin就可以解决跨域的问题。但是如果是用手机端来调试页面的话，手机端没有解决跨域的插件，那应该怎么解决这个问题呢？经过同事的指导，我基本解决了手机跨域的问题，总结出来以便未来使用。\n\n解决手机跨域的问题，是通过Charles这个软件，通过把手机的访问请求通过本地pc来代理，来解决跨域的问题。大概思路是这个样子，下面我来把过程简单总结一下。\n\n******\n\n首先，我们应该设置一下手机的代理，一般都是在wifi链接的位置进行代理的设置，主机名填写本地pc端的ip地址，通过`ifconfig`指令来查看ip地址，可以看到我的ip地址为 172.100.108.94 ，端口号Charles默认为8888，设置好之后，打开Charles，弹出一个对话框选择allow，我们就可以通过Charles的代理来连接网络了。\n\n![p1](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp1.png)\n\n******\n\n这样我们通过代理，就等于使用本地的pc端来访问页面了，但是我们在访问服务器接口的时候，因为没有解决跨域的浏览器插件，我们还是不可以访问服务器的接口。\n\n以我实际操作来举例子，我需要访问的是 `api.haojin.in/shop_list `这个接口，我使用手机通过代理后，我的ip变成了本地pc端的ip，但是还是跨域无法访问服务器的接口。\n\n我如果需要访问成功必须保证我的域名和服务器的一致，这样才可以访问。\n\n******\n\n所以，我改了访问接口的js文件，原本js中接口为`api.haojin.in/shop_list ` ， 我改为我本地的ip加上接口名 `http://172.100.108.94:63341/shop_list` 这里需要注意，如果你使用的不是默认端口的话，你需要把端口号也加上。\n\n这样我们通过代理，来访问接口时，就保证了我们是在同一个域当中，但是我们本地不存在这样一个接口，所以访问这个接口的时候时出错的。\n\n所以我们再通过Charles的map remote功能，map remote的功能就是把一个请求重定向到另一个地址上面，这样我们只要把 `http://172.100.108.94:63341/shop_list` 重定向到 `api.haojin.in/shop_list ` 我们就可以成功的访问到服务器的接口了。\n\n所以我们在Charles中找到tools中的map remote选项，如下图所示。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp2.png)\n\n点击add（添加）我们就可以增加一条重定向。在弹出的界面中我们就可以设置我们需要的参数了。如下图。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp3.png)\n\n上面一栏就是我们原本的请求，填写协议，域名，端口号，路径等参数就可以了。下面一栏就是我们需要重定向到的地址，可以看到端口号没有填，他默认是80端口。\n\n点击ok保存后，我们就可以成功的访问到服务器的接口了。这样我们就解决了手机调试本地页面时的跨域问题。\n\n通过抓包查看，我们可以看到通过手机已经可以成功的访问到服务器的接口。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp4.png)\n\n******\n\n但是这种方法也有很多不足的地方，比如：第一，我们这样设置只能访问指定的一个接口，当有多个接口时，我们必须把每个接口依次设置一遍，这本身也很浪费时间。第二，我们需要更改本地js文件当中的接口，当完成本地调试如果需要上线的时候，还需要把本地的js文件改回去，这样在来回更改的过程中可能出现错误。第三，这样更改之后我们通过手机访问时没有问题，但是pc端访问时因为没有通过代理，pc端的页面就不能访问到服务器的接口了，这样也会造成麻烦，pc端和手机端无法一起调试，除非pc端也通过代理来访问服务器接口。\n\n以上就是我这次遇到问题时的解决办法，虽然可能这个解决办法不是最好的，但起码他可以解决这个问题，我也会继续在网上寻找更好的解决办法，希望可以更加简单和优雅的解决这个问题。\n\n","source":"_posts/2016-01-26-Charles解决跨域问题.md","raw":"---\nlayout: post\ntitle: 通过Charles解决手机调试本地页面时的跨域问题\ndate: 2016-01-26\ntags: [Charles,跨域问题]\ncategories: Charles\n---\n\n今天在调试本地页面的时候遇到了一个问题，在本地调试页面，如果访问服务器的接口就会遇到跨域的问题。当在pc端调试本地页面的时候，使用浏览器插件allow-control-allow-origin就可以解决跨域的问题。但是如果是用手机端来调试页面的话，手机端没有解决跨域的插件，那应该怎么解决这个问题呢？经过同事的指导，我基本解决了手机跨域的问题，总结出来以便未来使用。\n\n解决手机跨域的问题，是通过Charles这个软件，通过把手机的访问请求通过本地pc来代理，来解决跨域的问题。大概思路是这个样子，下面我来把过程简单总结一下。\n\n******\n\n首先，我们应该设置一下手机的代理，一般都是在wifi链接的位置进行代理的设置，主机名填写本地pc端的ip地址，通过`ifconfig`指令来查看ip地址，可以看到我的ip地址为 172.100.108.94 ，端口号Charles默认为8888，设置好之后，打开Charles，弹出一个对话框选择allow，我们就可以通过Charles的代理来连接网络了。\n\n![p1](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp1.png)\n\n******\n\n这样我们通过代理，就等于使用本地的pc端来访问页面了，但是我们在访问服务器接口的时候，因为没有解决跨域的浏览器插件，我们还是不可以访问服务器的接口。\n\n以我实际操作来举例子，我需要访问的是 `api.haojin.in/shop_list `这个接口，我使用手机通过代理后，我的ip变成了本地pc端的ip，但是还是跨域无法访问服务器的接口。\n\n我如果需要访问成功必须保证我的域名和服务器的一致，这样才可以访问。\n\n******\n\n所以，我改了访问接口的js文件，原本js中接口为`api.haojin.in/shop_list ` ， 我改为我本地的ip加上接口名 `http://172.100.108.94:63341/shop_list` 这里需要注意，如果你使用的不是默认端口的话，你需要把端口号也加上。\n\n这样我们通过代理，来访问接口时，就保证了我们是在同一个域当中，但是我们本地不存在这样一个接口，所以访问这个接口的时候时出错的。\n\n所以我们再通过Charles的map remote功能，map remote的功能就是把一个请求重定向到另一个地址上面，这样我们只要把 `http://172.100.108.94:63341/shop_list` 重定向到 `api.haojin.in/shop_list ` 我们就可以成功的访问到服务器的接口了。\n\n所以我们在Charles中找到tools中的map remote选项，如下图所示。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp2.png)\n\n点击add（添加）我们就可以增加一条重定向。在弹出的界面中我们就可以设置我们需要的参数了。如下图。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp3.png)\n\n上面一栏就是我们原本的请求，填写协议，域名，端口号，路径等参数就可以了。下面一栏就是我们需要重定向到的地址，可以看到端口号没有填，他默认是80端口。\n\n点击ok保存后，我们就可以成功的访问到服务器的接口了。这样我们就解决了手机调试本地页面时的跨域问题。\n\n通过抓包查看，我们可以看到通过手机已经可以成功的访问到服务器的接口。\n\n![p2](http://7xqch8.com1.z0.glb.clouddn.com/blog_picp4.png)\n\n******\n\n但是这种方法也有很多不足的地方，比如：第一，我们这样设置只能访问指定的一个接口，当有多个接口时，我们必须把每个接口依次设置一遍，这本身也很浪费时间。第二，我们需要更改本地js文件当中的接口，当完成本地调试如果需要上线的时候，还需要把本地的js文件改回去，这样在来回更改的过程中可能出现错误。第三，这样更改之后我们通过手机访问时没有问题，但是pc端访问时因为没有通过代理，pc端的页面就不能访问到服务器的接口了，这样也会造成麻烦，pc端和手机端无法一起调试，除非pc端也通过代理来访问服务器接口。\n\n以上就是我这次遇到问题时的解决办法，虽然可能这个解决办法不是最好的，但起码他可以解决这个问题，我也会继续在网上寻找更好的解决办法，希望可以更加简单和优雅的解决这个问题。\n\n","slug":"Charles解决跨域问题","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631weu000ddk5nyowfxjdj","content":"<p>今天在调试本地页面的时候遇到了一个问题，在本地调试页面，如果访问服务器的接口就会遇到跨域的问题。当在pc端调试本地页面的时候，使用浏览器插件allow-control-allow-origin就可以解决跨域的问题。但是如果是用手机端来调试页面的话，手机端没有解决跨域的插件，那应该怎么解决这个问题呢？经过同事的指导，我基本解决了手机跨域的问题，总结出来以便未来使用。</p>\n<p>解决手机跨域的问题，是通过Charles这个软件，通过把手机的访问请求通过本地pc来代理，来解决跨域的问题。大概思路是这个样子，下面我来把过程简单总结一下。</p>\n<hr>\n<p>首先，我们应该设置一下手机的代理，一般都是在wifi链接的位置进行代理的设置，主机名填写本地pc端的ip地址，通过<code>ifconfig</code>指令来查看ip地址，可以看到我的ip地址为 172.100.108.94 ，端口号Charles默认为8888，设置好之后，打开Charles，弹出一个对话框选择allow，我们就可以通过Charles的代理来连接网络了。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp1.png\" alt=\"p1\"></p>\n<hr>\n<p>这样我们通过代理，就等于使用本地的pc端来访问页面了，但是我们在访问服务器接口的时候，因为没有解决跨域的浏览器插件，我们还是不可以访问服务器的接口。</p>\n<p>以我实际操作来举例子，我需要访问的是 <code>api.haojin.in/shop_list</code>这个接口，我使用手机通过代理后，我的ip变成了本地pc端的ip，但是还是跨域无法访问服务器的接口。</p>\n<p>我如果需要访问成功必须保证我的域名和服务器的一致，这样才可以访问。</p>\n<hr>\n<p>所以，我改了访问接口的js文件，原本js中接口为<code>api.haojin.in/shop_list</code> ， 我改为我本地的ip加上接口名 <code>http://172.100.108.94:63341/shop_list</code> 这里需要注意，如果你使用的不是默认端口的话，你需要把端口号也加上。</p>\n<p>这样我们通过代理，来访问接口时，就保证了我们是在同一个域当中，但是我们本地不存在这样一个接口，所以访问这个接口的时候时出错的。</p>\n<p>所以我们再通过Charles的map remote功能，map remote的功能就是把一个请求重定向到另一个地址上面，这样我们只要把 <code>http://172.100.108.94:63341/shop_list</code> 重定向到 <code>api.haojin.in/shop_list</code> 我们就可以成功的访问到服务器的接口了。</p>\n<p>所以我们在Charles中找到tools中的map remote选项，如下图所示。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp2.png\" alt=\"p2\"></p>\n<p>点击add（添加）我们就可以增加一条重定向。在弹出的界面中我们就可以设置我们需要的参数了。如下图。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp3.png\" alt=\"p2\"></p>\n<p>上面一栏就是我们原本的请求，填写协议，域名，端口号，路径等参数就可以了。下面一栏就是我们需要重定向到的地址，可以看到端口号没有填，他默认是80端口。</p>\n<p>点击ok保存后，我们就可以成功的访问到服务器的接口了。这样我们就解决了手机调试本地页面时的跨域问题。</p>\n<p>通过抓包查看，我们可以看到通过手机已经可以成功的访问到服务器的接口。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp4.png\" alt=\"p2\"></p>\n<hr>\n<p>但是这种方法也有很多不足的地方，比如：第一，我们这样设置只能访问指定的一个接口，当有多个接口时，我们必须把每个接口依次设置一遍，这本身也很浪费时间。第二，我们需要更改本地js文件当中的接口，当完成本地调试如果需要上线的时候，还需要把本地的js文件改回去，这样在来回更改的过程中可能出现错误。第三，这样更改之后我们通过手机访问时没有问题，但是pc端访问时因为没有通过代理，pc端的页面就不能访问到服务器的接口了，这样也会造成麻烦，pc端和手机端无法一起调试，除非pc端也通过代理来访问服务器接口。</p>\n<p>以上就是我这次遇到问题时的解决办法，虽然可能这个解决办法不是最好的，但起码他可以解决这个问题，我也会继续在网上寻找更好的解决办法，希望可以更加简单和优雅的解决这个问题。</p>\n","excerpt":"","more":"<p>今天在调试本地页面的时候遇到了一个问题，在本地调试页面，如果访问服务器的接口就会遇到跨域的问题。当在pc端调试本地页面的时候，使用浏览器插件allow-control-allow-origin就可以解决跨域的问题。但是如果是用手机端来调试页面的话，手机端没有解决跨域的插件，那应该怎么解决这个问题呢？经过同事的指导，我基本解决了手机跨域的问题，总结出来以便未来使用。</p>\n<p>解决手机跨域的问题，是通过Charles这个软件，通过把手机的访问请求通过本地pc来代理，来解决跨域的问题。大概思路是这个样子，下面我来把过程简单总结一下。</p>\n<hr>\n<p>首先，我们应该设置一下手机的代理，一般都是在wifi链接的位置进行代理的设置，主机名填写本地pc端的ip地址，通过<code>ifconfig</code>指令来查看ip地址，可以看到我的ip地址为 172.100.108.94 ，端口号Charles默认为8888，设置好之后，打开Charles，弹出一个对话框选择allow，我们就可以通过Charles的代理来连接网络了。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp1.png\" alt=\"p1\"></p>\n<hr>\n<p>这样我们通过代理，就等于使用本地的pc端来访问页面了，但是我们在访问服务器接口的时候，因为没有解决跨域的浏览器插件，我们还是不可以访问服务器的接口。</p>\n<p>以我实际操作来举例子，我需要访问的是 <code>api.haojin.in/shop_list</code>这个接口，我使用手机通过代理后，我的ip变成了本地pc端的ip，但是还是跨域无法访问服务器的接口。</p>\n<p>我如果需要访问成功必须保证我的域名和服务器的一致，这样才可以访问。</p>\n<hr>\n<p>所以，我改了访问接口的js文件，原本js中接口为<code>api.haojin.in/shop_list</code> ， 我改为我本地的ip加上接口名 <code>http://172.100.108.94:63341/shop_list</code> 这里需要注意，如果你使用的不是默认端口的话，你需要把端口号也加上。</p>\n<p>这样我们通过代理，来访问接口时，就保证了我们是在同一个域当中，但是我们本地不存在这样一个接口，所以访问这个接口的时候时出错的。</p>\n<p>所以我们再通过Charles的map remote功能，map remote的功能就是把一个请求重定向到另一个地址上面，这样我们只要把 <code>http://172.100.108.94:63341/shop_list</code> 重定向到 <code>api.haojin.in/shop_list</code> 我们就可以成功的访问到服务器的接口了。</p>\n<p>所以我们在Charles中找到tools中的map remote选项，如下图所示。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp2.png\" alt=\"p2\"></p>\n<p>点击add（添加）我们就可以增加一条重定向。在弹出的界面中我们就可以设置我们需要的参数了。如下图。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp3.png\" alt=\"p2\"></p>\n<p>上面一栏就是我们原本的请求，填写协议，域名，端口号，路径等参数就可以了。下面一栏就是我们需要重定向到的地址，可以看到端口号没有填，他默认是80端口。</p>\n<p>点击ok保存后，我们就可以成功的访问到服务器的接口了。这样我们就解决了手机调试本地页面时的跨域问题。</p>\n<p>通过抓包查看，我们可以看到通过手机已经可以成功的访问到服务器的接口。</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picp4.png\" alt=\"p2\"></p>\n<hr>\n<p>但是这种方法也有很多不足的地方，比如：第一，我们这样设置只能访问指定的一个接口，当有多个接口时，我们必须把每个接口依次设置一遍，这本身也很浪费时间。第二，我们需要更改本地js文件当中的接口，当完成本地调试如果需要上线的时候，还需要把本地的js文件改回去，这样在来回更改的过程中可能出现错误。第三，这样更改之后我们通过手机访问时没有问题，但是pc端访问时因为没有通过代理，pc端的页面就不能访问到服务器的接口了，这样也会造成麻烦，pc端和手机端无法一起调试，除非pc端也通过代理来访问服务器接口。</p>\n<p>以上就是我这次遇到问题时的解决办法，虽然可能这个解决办法不是最好的，但起码他可以解决这个问题，我也会继续在网上寻找更好的解决办法，希望可以更加简单和优雅的解决这个问题。</p>\n"},{"layout":"post","title":"初学webpack遇到的坑","date":"2016-01-28T16:00:00.000Z","_content":"\nwebpack是继grunt和gulp之后的一个自动化集成的工具，虽说我grunt都还没有熟练操作，但是有了对grunt了解，我想尽快的掌握比较新的技术。\n\n我主要是按照知乎专栏中的[这篇文章](http://zhuanlan.zhihu.com/FrontendMagazine/20367175)一步一步的傻瓜操作的，基本说的很详细，照着步骤来做就可以搭建一个简单地webpack环境。\n\n我现在主要是按照文章的顺序，对我其中遇到的坑，来一个总结，下次如果还会再搭一个环境的时候，不至于没有头绪。\n\n下面我会按照文章中标题的顺序，来总结我遇到的坑，没有问题的部分我就不详细叙述，按照文章中的步骤来就可以。\n\n*****\n\n### 配置webpack\n\n在这个部分，我按照文章中的步骤做好，最后在项目根目录下运行`webpack`的时候，命令行报出了错误。\n\n```ruby\n\nmodule.js:340\nthrow err;\ncanot find module 'webpack/lib/node/NodeTemplatePlugin'\n\n```\n\n说不能找到这个模块，但是当我找到这个路径`/usr/local/lib/node_modules/webpack/lib/node`，`cd`进入后，`ls`查看我目录下是有这个文件的。所以问题应该不是缺少这个文件，\n\n然后我上网搜索，知道了应该是路径设置的不正确，并找到了解决的办法。[在这里](https://segmentfault.com/a/1190000002478924)\n\n是因为我们没有设置环境变量，按上面这篇文章我设置了环境变量之后\n\n`export NODE_PATH=\"/usr/local/node_modules:/usr/local/lib/node_modules\" `\n\n再次运行`webpack`后就能顺利的构建出一个项目了。\n\n第一个坑算是踏过去了，用了大概半天时间。。。。一种一种方法去试。。。。\n\n*******\n\n### 配置webpack-dev-server\n\n在这部分我又遇到一个坑,在按照步骤一步一步做好后，在运行最后的命令`npm start`的时候有报出了错误。\n\n```ruby\n\nERROR in multi main\nModule not found: Error: Cannot resolve module 'webpack/hot/dev-server' in /Users/yatessss/webpack\n @ multi main\n\n```\n\n大概的意思我查了一下，就是说模块无法解析，目前为止这个坑还没有填平。但是这不影响我们继续往下进行，这一部分是可以让服务器监听文件的变化的，在我们不刷新页面的时候，内容也会随着文件的变化做出相应的修改。\n\n我现在猜测这个错误的出现可能有两个原因。第一，就是在解决上一个环境变量的错误的时候，设置了路径，导致路径更改后找不到这个模块。第二，这个模块没有正确安装（但是我已经安装了很多遍）。\n\n我最后解决了这个问题。解决方法是受到了这个问题的启发[点击这里](http://stackoverflow.com/questions/29290301/cant-get-webpack-hot-module-replacement-to-work)，这里不得不说stackoverflow这个网站真的是很好的。\n\n这里我只改动了知乎这篇文章的设置的两个地方（其实把他们删掉应该也是可以的），在stackoverflow这个问题里有这样一句话：`--hot option is looking for some files locally`，这里是说`--hot`这个参数是设置在当前目录寻找一些文件的，而我们设置过环境变量，我在猜想是不是设置过变量后，所以我不能在当前找到这个模块了，所以我试着把`config`文件中`devServer`配置项中的`hot`改为了`false`，如下：\n\n```ruby\n\ndevServer: {\n        historyApiFallback: true,\n        hot: false,\n        inline: true,\n        progress: true\n    }\n\n```\n\n把`package.json`文件中的`scripts`配置项改为`\"start\": \"webpack-dev-server --inline\"`，如下：\n\n```ruby\n\n\"scripts\": {\n    \"start\": \"webpack-dev-server --inline\"\n  }\n\n```\n\n这样，我们就禁止了他只在项目目录中寻找文件，在当前目录中没有找到的话，他会寻找根目录，经过试验，我的想法得到了证实，这样改动之后，`npm start`命令可以正常运行了。\n\n这个问题也算是有了解决方法。\n\n\n*******\n\n### 添加CSS样式\n\n在添加css样式这部分，没有问题。但是在配置css预编译程序sass的时候，遇到了两个错误。第一个错误是说我没有安装`node-sass`，这时候我们安装node-sass就好了；第二个错误我没有记录下来，大概是说`我的node-sass的版本和目前node不匹配`，而且错误当中也给出了解决办法，只要运行`npm rebuild node-sass`等一会之后，这个错误就可以解决了。\n\n*******\n\n### 添加第三方库\n\n再添加第三方库的时候，按照步骤没有什么大的问题，只是有时候缺少一些依赖的库，比如遇到下面这种情况。\n\n```ruby\n\n├── UNMET PEER DEPENDENCY file-loader@*\n├── jquery@2.2.0\n├── moment@2.11.1\n└── UNMET PEER DEPENDENCY webpack@^1.12.6\n\n```\n\n这样的话就是缺少`file-loader` 这个依赖的库，所以只要安装这个库就好了。\n\n\n以上，就是我学习webpack第一部分碰到的一些问题，总结来加深印象。\n","source":"_posts/2016-01-29-初学webpack遇到的坑.md","raw":"---\nlayout: post\ntitle: 初学webpack遇到的坑\ndate: 2016-01-29\ntags: [webpack]\ncategories: webpack\n---\n\nwebpack是继grunt和gulp之后的一个自动化集成的工具，虽说我grunt都还没有熟练操作，但是有了对grunt了解，我想尽快的掌握比较新的技术。\n\n我主要是按照知乎专栏中的[这篇文章](http://zhuanlan.zhihu.com/FrontendMagazine/20367175)一步一步的傻瓜操作的，基本说的很详细，照着步骤来做就可以搭建一个简单地webpack环境。\n\n我现在主要是按照文章的顺序，对我其中遇到的坑，来一个总结，下次如果还会再搭一个环境的时候，不至于没有头绪。\n\n下面我会按照文章中标题的顺序，来总结我遇到的坑，没有问题的部分我就不详细叙述，按照文章中的步骤来就可以。\n\n*****\n\n### 配置webpack\n\n在这个部分，我按照文章中的步骤做好，最后在项目根目录下运行`webpack`的时候，命令行报出了错误。\n\n```ruby\n\nmodule.js:340\nthrow err;\ncanot find module 'webpack/lib/node/NodeTemplatePlugin'\n\n```\n\n说不能找到这个模块，但是当我找到这个路径`/usr/local/lib/node_modules/webpack/lib/node`，`cd`进入后，`ls`查看我目录下是有这个文件的。所以问题应该不是缺少这个文件，\n\n然后我上网搜索，知道了应该是路径设置的不正确，并找到了解决的办法。[在这里](https://segmentfault.com/a/1190000002478924)\n\n是因为我们没有设置环境变量，按上面这篇文章我设置了环境变量之后\n\n`export NODE_PATH=\"/usr/local/node_modules:/usr/local/lib/node_modules\" `\n\n再次运行`webpack`后就能顺利的构建出一个项目了。\n\n第一个坑算是踏过去了，用了大概半天时间。。。。一种一种方法去试。。。。\n\n*******\n\n### 配置webpack-dev-server\n\n在这部分我又遇到一个坑,在按照步骤一步一步做好后，在运行最后的命令`npm start`的时候有报出了错误。\n\n```ruby\n\nERROR in multi main\nModule not found: Error: Cannot resolve module 'webpack/hot/dev-server' in /Users/yatessss/webpack\n @ multi main\n\n```\n\n大概的意思我查了一下，就是说模块无法解析，目前为止这个坑还没有填平。但是这不影响我们继续往下进行，这一部分是可以让服务器监听文件的变化的，在我们不刷新页面的时候，内容也会随着文件的变化做出相应的修改。\n\n我现在猜测这个错误的出现可能有两个原因。第一，就是在解决上一个环境变量的错误的时候，设置了路径，导致路径更改后找不到这个模块。第二，这个模块没有正确安装（但是我已经安装了很多遍）。\n\n我最后解决了这个问题。解决方法是受到了这个问题的启发[点击这里](http://stackoverflow.com/questions/29290301/cant-get-webpack-hot-module-replacement-to-work)，这里不得不说stackoverflow这个网站真的是很好的。\n\n这里我只改动了知乎这篇文章的设置的两个地方（其实把他们删掉应该也是可以的），在stackoverflow这个问题里有这样一句话：`--hot option is looking for some files locally`，这里是说`--hot`这个参数是设置在当前目录寻找一些文件的，而我们设置过环境变量，我在猜想是不是设置过变量后，所以我不能在当前找到这个模块了，所以我试着把`config`文件中`devServer`配置项中的`hot`改为了`false`，如下：\n\n```ruby\n\ndevServer: {\n        historyApiFallback: true,\n        hot: false,\n        inline: true,\n        progress: true\n    }\n\n```\n\n把`package.json`文件中的`scripts`配置项改为`\"start\": \"webpack-dev-server --inline\"`，如下：\n\n```ruby\n\n\"scripts\": {\n    \"start\": \"webpack-dev-server --inline\"\n  }\n\n```\n\n这样，我们就禁止了他只在项目目录中寻找文件，在当前目录中没有找到的话，他会寻找根目录，经过试验，我的想法得到了证实，这样改动之后，`npm start`命令可以正常运行了。\n\n这个问题也算是有了解决方法。\n\n\n*******\n\n### 添加CSS样式\n\n在添加css样式这部分，没有问题。但是在配置css预编译程序sass的时候，遇到了两个错误。第一个错误是说我没有安装`node-sass`，这时候我们安装node-sass就好了；第二个错误我没有记录下来，大概是说`我的node-sass的版本和目前node不匹配`，而且错误当中也给出了解决办法，只要运行`npm rebuild node-sass`等一会之后，这个错误就可以解决了。\n\n*******\n\n### 添加第三方库\n\n再添加第三方库的时候，按照步骤没有什么大的问题，只是有时候缺少一些依赖的库，比如遇到下面这种情况。\n\n```ruby\n\n├── UNMET PEER DEPENDENCY file-loader@*\n├── jquery@2.2.0\n├── moment@2.11.1\n└── UNMET PEER DEPENDENCY webpack@^1.12.6\n\n```\n\n这样的话就是缺少`file-loader` 这个依赖的库，所以只要安装这个库就好了。\n\n\n以上，就是我学习webpack第一部分碰到的一些问题，总结来加深印象。\n","slug":"初学webpack遇到的坑","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wey000fdk5n50zqxw0k","content":"<p>webpack是继grunt和gulp之后的一个自动化集成的工具，虽说我grunt都还没有熟练操作，但是有了对grunt了解，我想尽快的掌握比较新的技术。</p>\n<p>我主要是按照知乎专栏中的<a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20367175\" target=\"_blank\" rel=\"external\">这篇文章</a>一步一步的傻瓜操作的，基本说的很详细，照着步骤来做就可以搭建一个简单地webpack环境。</p>\n<p>我现在主要是按照文章的顺序，对我其中遇到的坑，来一个总结，下次如果还会再搭一个环境的时候，不至于没有头绪。</p>\n<p>下面我会按照文章中标题的顺序，来总结我遇到的坑，没有问题的部分我就不详细叙述，按照文章中的步骤来就可以。</p>\n<hr>\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>在这个部分，我按照文章中的步骤做好，最后在项目根目录下运行<code>webpack</code>的时候，命令行报出了错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span>.<span class=\"title\">js</span>:340</span></span><br><span class=\"line\">throw err;</span><br><span class=\"line\">canot find <span class=\"class\"><span class=\"keyword\">module</span> '<span class=\"title\">webpack</span>/<span class=\"title\">lib</span>/<span class=\"title\">node</span>/<span class=\"title\">NodeTemplatePlugin</span>'</span></span><br></pre></td></tr></table></figure>\n<p>说不能找到这个模块，但是当我找到这个路径<code>/usr/local/lib/node_modules/webpack/lib/node</code>，<code>cd</code>进入后，<code>ls</code>查看我目录下是有这个文件的。所以问题应该不是缺少这个文件，</p>\n<p>然后我上网搜索，知道了应该是路径设置的不正确，并找到了解决的办法。<a href=\"https://segmentfault.com/a/1190000002478924\" target=\"_blank\" rel=\"external\">在这里</a></p>\n<p>是因为我们没有设置环境变量，按上面这篇文章我设置了环境变量之后</p>\n<p><code>export NODE_PATH=&quot;/usr/local/node_modules:/usr/local/lib/node_modules&quot;</code></p>\n<p>再次运行<code>webpack</code>后就能顺利的构建出一个项目了。</p>\n<p>第一个坑算是踏过去了，用了大概半天时间。。。。一种一种方法去试。。。。</p>\n<hr>\n<h3 id=\"配置webpack-dev-server\"><a href=\"#配置webpack-dev-server\" class=\"headerlink\" title=\"配置webpack-dev-server\"></a>配置webpack-dev-server</h3><p>在这部分我又遇到一个坑,在按照步骤一步一步做好后，在运行最后的命令<code>npm start</code>的时候有报出了错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ERROR <span class=\"keyword\">in</span> multi main</span><br><span class=\"line\">Module <span class=\"keyword\">not</span> <span class=\"symbol\">found:</span> <span class=\"symbol\">Error:</span> Cannot resolve <span class=\"class\"><span class=\"keyword\">module</span> '<span class=\"title\">webpack</span>/<span class=\"title\">hot</span>/<span class=\"title\">dev</span>-<span class=\"title\">server</span>' <span class=\"title\">in</span> /<span class=\"title\">Users</span>/<span class=\"title\">yatessss</span>/<span class=\"title\">webpack</span></span></span><br><span class=\"line\"> @ multi main</span><br></pre></td></tr></table></figure>\n<p>大概的意思我查了一下，就是说模块无法解析，目前为止这个坑还没有填平。但是这不影响我们继续往下进行，这一部分是可以让服务器监听文件的变化的，在我们不刷新页面的时候，内容也会随着文件的变化做出相应的修改。</p>\n<p>我现在猜测这个错误的出现可能有两个原因。第一，就是在解决上一个环境变量的错误的时候，设置了路径，导致路径更改后找不到这个模块。第二，这个模块没有正确安装（但是我已经安装了很多遍）。</p>\n<p>我最后解决了这个问题。解决方法是受到了这个问题的启发<a href=\"http://stackoverflow.com/questions/29290301/cant-get-webpack-hot-module-replacement-to-work\" target=\"_blank\" rel=\"external\">点击这里</a>，这里不得不说stackoverflow这个网站真的是很好的。</p>\n<p>这里我只改动了知乎这篇文章的设置的两个地方（其实把他们删掉应该也是可以的），在stackoverflow这个问题里有这样一句话：<code>--hot option is looking for some files locally</code>，这里是说<code>--hot</code>这个参数是设置在当前目录寻找一些文件的，而我们设置过环境变量，我在猜想是不是设置过变量后，所以我不能在当前找到这个模块了，所以我试着把<code>config</code>文件中<code>devServer</code>配置项中的<code>hot</code>改为了<code>false</code>，如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">devServer:</span> &#123;</span><br><span class=\"line\">        <span class=\"symbol\">historyApiFallback:</span> <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"symbol\">hot:</span> <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        <span class=\"symbol\">inline:</span> <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"symbol\">progress:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>把<code>package.json</code>文件中的<code>scripts</code>配置项改为<code>&quot;start&quot;: &quot;webpack-dev-server --inline&quot;</code>，如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span><span class=\"symbol\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span><span class=\"symbol\">:</span> <span class=\"string\">\"webpack-dev-server --inline\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就禁止了他只在项目目录中寻找文件，在当前目录中没有找到的话，他会寻找根目录，经过试验，我的想法得到了证实，这样改动之后，<code>npm start</code>命令可以正常运行了。</p>\n<p>这个问题也算是有了解决方法。</p>\n<hr>\n<h3 id=\"添加CSS样式\"><a href=\"#添加CSS样式\" class=\"headerlink\" title=\"添加CSS样式\"></a>添加CSS样式</h3><p>在添加css样式这部分，没有问题。但是在配置css预编译程序sass的时候，遇到了两个错误。第一个错误是说我没有安装<code>node-sass</code>，这时候我们安装node-sass就好了；第二个错误我没有记录下来，大概是说<code>我的node-sass的版本和目前node不匹配</code>，而且错误当中也给出了解决办法，只要运行<code>npm rebuild node-sass</code>等一会之后，这个错误就可以解决了。</p>\n<hr>\n<h3 id=\"添加第三方库\"><a href=\"#添加第三方库\" class=\"headerlink\" title=\"添加第三方库\"></a>添加第三方库</h3><p>再添加第三方库的时候，按照步骤没有什么大的问题，只是有时候缺少一些依赖的库，比如遇到下面这种情况。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">├── UNMET PEER DEPENDENCY file-loader@*</span><br><span class=\"line\">├── jquery@2.<span class=\"number\">2.0</span></span><br><span class=\"line\">├── moment@2.<span class=\"number\">11.1</span></span><br><span class=\"line\">└── UNMET PEER DEPENDENCY webpack@^<span class=\"number\">1.12</span>.<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>这样的话就是缺少<code>file-loader</code> 这个依赖的库，所以只要安装这个库就好了。</p>\n<p>以上，就是我学习webpack第一部分碰到的一些问题，总结来加深印象。</p>\n","excerpt":"","more":"<p>webpack是继grunt和gulp之后的一个自动化集成的工具，虽说我grunt都还没有熟练操作，但是有了对grunt了解，我想尽快的掌握比较新的技术。</p>\n<p>我主要是按照知乎专栏中的<a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20367175\">这篇文章</a>一步一步的傻瓜操作的，基本说的很详细，照着步骤来做就可以搭建一个简单地webpack环境。</p>\n<p>我现在主要是按照文章的顺序，对我其中遇到的坑，来一个总结，下次如果还会再搭一个环境的时候，不至于没有头绪。</p>\n<p>下面我会按照文章中标题的顺序，来总结我遇到的坑，没有问题的部分我就不详细叙述，按照文章中的步骤来就可以。</p>\n<hr>\n<h3 id=\"配置webpack\"><a href=\"#配置webpack\" class=\"headerlink\" title=\"配置webpack\"></a>配置webpack</h3><p>在这个部分，我按照文章中的步骤做好，最后在项目根目录下运行<code>webpack</code>的时候，命令行报出了错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">module</span>.<span class=\"title\">js</span>:340</span></span><br><span class=\"line\">throw err;</span><br><span class=\"line\">canot find <span class=\"class\"><span class=\"keyword\">module</span> '<span class=\"title\">webpack</span>/<span class=\"title\">lib</span>/<span class=\"title\">node</span>/<span class=\"title\">NodeTemplatePlugin</span>'</span></span><br></pre></td></tr></table></figure>\n<p>说不能找到这个模块，但是当我找到这个路径<code>/usr/local/lib/node_modules/webpack/lib/node</code>，<code>cd</code>进入后，<code>ls</code>查看我目录下是有这个文件的。所以问题应该不是缺少这个文件，</p>\n<p>然后我上网搜索，知道了应该是路径设置的不正确，并找到了解决的办法。<a href=\"https://segmentfault.com/a/1190000002478924\">在这里</a></p>\n<p>是因为我们没有设置环境变量，按上面这篇文章我设置了环境变量之后</p>\n<p><code>export NODE_PATH=&quot;/usr/local/node_modules:/usr/local/lib/node_modules&quot;</code></p>\n<p>再次运行<code>webpack</code>后就能顺利的构建出一个项目了。</p>\n<p>第一个坑算是踏过去了，用了大概半天时间。。。。一种一种方法去试。。。。</p>\n<hr>\n<h3 id=\"配置webpack-dev-server\"><a href=\"#配置webpack-dev-server\" class=\"headerlink\" title=\"配置webpack-dev-server\"></a>配置webpack-dev-server</h3><p>在这部分我又遇到一个坑,在按照步骤一步一步做好后，在运行最后的命令<code>npm start</code>的时候有报出了错误。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ERROR <span class=\"keyword\">in</span> multi main</span><br><span class=\"line\">Module <span class=\"keyword\">not</span> <span class=\"symbol\">found:</span> <span class=\"symbol\">Error:</span> Cannot resolve <span class=\"class\"><span class=\"keyword\">module</span> '<span class=\"title\">webpack</span>/<span class=\"title\">hot</span>/<span class=\"title\">dev</span>-<span class=\"title\">server</span>' <span class=\"title\">in</span> /<span class=\"title\">Users</span>/<span class=\"title\">yatessss</span>/<span class=\"title\">webpack</span></span></span><br><span class=\"line\"> @ multi main</span><br></pre></td></tr></table></figure>\n<p>大概的意思我查了一下，就是说模块无法解析，目前为止这个坑还没有填平。但是这不影响我们继续往下进行，这一部分是可以让服务器监听文件的变化的，在我们不刷新页面的时候，内容也会随着文件的变化做出相应的修改。</p>\n<p>我现在猜测这个错误的出现可能有两个原因。第一，就是在解决上一个环境变量的错误的时候，设置了路径，导致路径更改后找不到这个模块。第二，这个模块没有正确安装（但是我已经安装了很多遍）。</p>\n<p>我最后解决了这个问题。解决方法是受到了这个问题的启发<a href=\"http://stackoverflow.com/questions/29290301/cant-get-webpack-hot-module-replacement-to-work\">点击这里</a>，这里不得不说stackoverflow这个网站真的是很好的。</p>\n<p>这里我只改动了知乎这篇文章的设置的两个地方（其实把他们删掉应该也是可以的），在stackoverflow这个问题里有这样一句话：<code>--hot option is looking for some files locally</code>，这里是说<code>--hot</code>这个参数是设置在当前目录寻找一些文件的，而我们设置过环境变量，我在猜想是不是设置过变量后，所以我不能在当前找到这个模块了，所以我试着把<code>config</code>文件中<code>devServer</code>配置项中的<code>hot</code>改为了<code>false</code>，如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">devServer:</span> &#123;</span><br><span class=\"line\">        <span class=\"symbol\">historyApiFallback:</span> <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"symbol\">hot:</span> <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        <span class=\"symbol\">inline:</span> <span class=\"keyword\">true</span>,</span><br><span class=\"line\">        <span class=\"symbol\">progress:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>把<code>package.json</code>文件中的<code>scripts</code>配置项改为<code>&quot;start&quot;: &quot;webpack-dev-server --inline&quot;</code>，如下：</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"scripts\"</span><span class=\"symbol\">:</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span><span class=\"symbol\">:</span> <span class=\"string\">\"webpack-dev-server --inline\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就禁止了他只在项目目录中寻找文件，在当前目录中没有找到的话，他会寻找根目录，经过试验，我的想法得到了证实，这样改动之后，<code>npm start</code>命令可以正常运行了。</p>\n<p>这个问题也算是有了解决方法。</p>\n<hr>\n<h3 id=\"添加CSS样式\"><a href=\"#添加CSS样式\" class=\"headerlink\" title=\"添加CSS样式\"></a>添加CSS样式</h3><p>在添加css样式这部分，没有问题。但是在配置css预编译程序sass的时候，遇到了两个错误。第一个错误是说我没有安装<code>node-sass</code>，这时候我们安装node-sass就好了；第二个错误我没有记录下来，大概是说<code>我的node-sass的版本和目前node不匹配</code>，而且错误当中也给出了解决办法，只要运行<code>npm rebuild node-sass</code>等一会之后，这个错误就可以解决了。</p>\n<hr>\n<h3 id=\"添加第三方库\"><a href=\"#添加第三方库\" class=\"headerlink\" title=\"添加第三方库\"></a>添加第三方库</h3><p>再添加第三方库的时候，按照步骤没有什么大的问题，只是有时候缺少一些依赖的库，比如遇到下面这种情况。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">├── UNMET PEER DEPENDENCY file-loader@*</span><br><span class=\"line\">├── jquery@2.<span class=\"number\">2.0</span></span><br><span class=\"line\">├── moment@2.<span class=\"number\">11.1</span></span><br><span class=\"line\">└── UNMET PEER DEPENDENCY webpack@^<span class=\"number\">1.12</span>.<span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n<p>这样的话就是缺少<code>file-loader</code> 这个依赖的库，所以只要安装这个库就好了。</p>\n<p>以上，就是我学习webpack第一部分碰到的一些问题，总结来加深印象。</p>\n"},{"layout":"post","title":"ES6学习笔记(数组的扩展)","date":"2016-01-31T16:00:00.000Z","_content":"\n每次总结其实都是把阮大大的东西先看了一遍，然后又总结一遍，加深印象而已，其实看原文更详细[这里](http://es6.ruanyifeng.com/#docs/array)。\n\n### 1. Array.from()\n\n`Array.from()`方法可以用于将两类对象转为真正的数组：类似数组的对象和可比案例的对象。\n\n```js\n\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n\n```\n\n只要是部署了Iterator接口的数据结构，`Array.from()`都能把他转为数组。\n\n注：Iterator是一种接口，为各种不痛的数据结构提供统一的访问机制，即任何数据结构只要有Iterator的话都可以完成遍历操作。这个在后面会详细的学到。[这里](http://es6.ruanyifeng.com/#docs/iterator)\n\n```js\n\nArray.from('hello')\n// ['h', 'e', 'l', 'l', 'o']\n\nlet namesSet = new Set(['a', 'b'])\nArray.from(namesSet) // ['a', 'b']\n\n```\n\n如上，字符串和Set结构都具有Iterator接口，都可以转为真正的数组。\n\n一个数组也可以用`Array.from`方法，只不过返回的是一个一样的**新**数组。\n\n任何有`length`属性的对象，都可以通过`Array.from`方法转为数组。\n\n```js\n\nArray.from({ length: 3 });\n// [ undefined, undefined, undefinded ]\n\n```\n\n如上，就算这个对象只有一个属性，而没有键值对，还是会返回一个成员都为`undefined`的数组。\n\n对于还没有部署这个方法的浏览器，可以用`Array.prototype.slice`方法代替。\n\n```js\n\nconst toArray = (() =>\n  Array.from ? Array.from : obj => [].slice.call(obj)\n)();\n\n```\n\n`Array.from`还可以接受第二个参数，作用类似于数组的`map`方法，用来对每个元素进行处理，将处理后的值返回为一个数组。\n\n```js\n\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\n```\n\n下面的例子是取出一组DOM节点的文本内容。\n\n```js\n\n//h5自带的一种选择器\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n\n```\n\n下面的例子是将数组中布尔值为`false`的成员转为`0`。\n\n```js\n\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n\n```\n\n下面的例子是返回各种数据的类型。\n\n```js\n\nfunction typesOf () {\n  return Array.from(arguments, value => typeof value)\n}\ntypesOf(null, [], NaN)\n// ['object', 'object', 'number']\n\n```\n\n`Array.from()`的另一个应用是，可以将字符串转为数组。然后返回字符串的长度。因为他能正确处理各种Unicode字符。\n\n```js\n\nfunction countSymbols(string) {\n  return Array.from(string).length;\n}\n\n```\n\n*****\n\n### 2. Array.of()\n\n`Array.of()`方法用于将一组值，转换为数组。\n\n```js\n\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n\n```\n\n这个方法主要是为了弥补数组构造函数`Array()`的不足。因为参数个数的不同，`Array()`返回的数组有差异。\n\n```js\n\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n\n```\n\n如上可以看出，当参数是一个的时候，其实是指定数组的长度；当参数不少于2个的时候，`Array()`才会返回一个新的数组。\n\n而`Array.of()`不会存在参数不同的行为差异，所以可以替代`Array()`。\n\n```js\n\nArray.of() // []\nArray.of(undefined) // [undefined]\nArray.of(1) // [1]\nArray.of(1, 2) // [1, 2]\n\n```\n\n`Array.of`方法可以用下面的代码模拟实现。\n\n```js\n\nfunction ArrayOf(){\n  return [].slice.call(arguments);\n}\n\n```\n\n*****\n\n### 3. 数组实例的copyWithin()\n\n数组实例的`copyWithin()`方法，会在原数组上进行操作，所以使用这个方法，会修改当前数组。\n\n```js\n\nArray.prototype.copyWithin(target, start = 0, end = this.length)\n\n```\n\n他接受三个参数：\n\n1. target（必须）：从该位置开始替换数据。\n2. start（可选）：从该位置开始读取数据，默认为0。如果是负数，表示倒数。\n3. end（可选）：到该位置停止读取数据，默认等于数组长度。如果为负数，表示倒数。\n\n```js\n\n[1, 2, 3, 4, 5].copyWithin(0, 3)\n// [4, 5, 3, 4, 5]\n\n```\n\n如上代码，这个表示把3号位置到数组结束的成员（4和5），复制到从0号开始的位置，替换掉原来的1和2。\n\n更多例子：\n\n```js\n\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署TypedArray的copyWithin方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n\n```\n\n*****\n\n### 4. 数组实例的find()和findIndex()\n\n数组实例的`find()`方法，用于找出**第一个**符合条件的数组成员。他的参数是一个回调函数，所有数组的成员依次执行这个回调函数，直到找出一个返回值为`ture`的成员，然后返回该成员，如果没有符合条件的就返回`undefined`。\n\n```js\n\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n```\n\n如上是找到了第一个小于0的成员。\n\n```js\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n```\n\n如上代码，是找到了第一个大于9的成员。\n\n数组实例的`findIndex`方法的用法和`find`方法非常类似，他会犯的是第一个符合条件的成员在数组中的位置。只是如果成员都不符合条件，他返回的是`-1`。\n\n```js\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n\n```\n\n这两个方法也都可以发现`NaN`，弥补了`IndexOf`方法的不足。\n\n```js\n\n[NaN].indexOf(NaN)\n// -1\n\n[NaN].findIndex(y => Object.is(NaN, y))\n// 0\n\n```\n\n******\n\n### 5. 数组实例的fill()\n\n`fill`方法可以用给定的值填充一个数组。\n\n```js\n\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n\n```\n\n如上代码，`fill`方法可以用于空数组的初始化。如果数组中已有元素，会被全部替换掉。\n\n`fill`方法接受两个可选参数，用于指定起始位置和结束位置。\n\n```js\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n\n```\n\n******\n\n### 6. 数组实例的entries()，keys()和values()\n\nES6提供三个新的方法——`entries()`，`keys()`和`values()`，用于遍历数组。他们都会返回一个遍历器对象。可以用`for...of`进行循环遍历，唯一的区别是`keys()`是对键名遍历、`values()`是对键值进行遍历、`entries()`是对键值对进行遍历。\n\n```js\n\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n\n```\n\n*****\n\n### 7. 数组实例的includes()\n\n`Array.prototype.includes`方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的`includes`方法类似。此方法属于ES7，但是Babel转码器已经支持。\n\n```js\n\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, NaN].includes(NaN); // true\n\n```\n\n该方法的第二个参数搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果倒数的大于数组的长度，则会重置为0开始。\n\n```js\n\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n```\n\n在没有这个方法之前，我们通常使用数组的`indexOf`方法，检查是否包含某个值。\n\n```js\n\nif (arr.indexOf(el) !== -1) {\n  // ...\n}\n\n```\n\n但是`indexOf`方法有两个缺点，一是不够语义化，表达起来不够直观，二是，可能会对NaN产生误判。\n\n```js\n\n[NaN].indexOf(NaN)\n// -1\n\n```\n\n但是使用`includes`方法的是不一样的判断算法，不会产生误判。\n\n```js\n\n[NaN].includes(NaN)\n// true\n\n```\n\n*****\n\n### 8. 数组的空位\n\n数组的空位，是指数组的某一个位置没有任何值，比如`Array`构造函数返回的数组都是空位。\n\n```js\n\nArray(3) // [, , ,]\n\n```\n\n这里要注意，空位不是`undefined`，空位是没有任何值。请看下面代码。\n\n```js\n\n0 in [undefined, undefined, undefined] // true\n0 in [, , ,] // false\n\n```\n\n如上代码，数组一，尽管是`undefined`但是依然是有值的，而数组二的0号位置没有值。\n\nES5对空位的处理，是很不一致的，大多数情况会忽略空位。\n\n1. `forEach()`, `filter()`, `every()`和`some()`都会跳过空位。\n2. `map()`会跳过空位，但会保留这个值。\n3. `join()`和`toString()`会将空位视为undefined，而undefined和null会被处理成空字符串。\n\n```js\n\n// forEach方法\n[,'a'].forEach((x,i) => log(i)); // 1\n\n// filter方法\n['a',,'b'].filter(x => true) // ['a','b']\n\n// every方法\n[,'a'].every(x => x==='a') // true\n\n// some方法\n[,'a'].some(x => x !== 'a') // false\n\n// map方法\n[,'a'].map(x => 1) // [,1]\n\n// join方法\n[,'a',undefined,null].join('#') // \"#a##\"\n\n// toString方法\n[,'a',undefined,null].toString() // \",a,,\"\n\n```\n\n\u0010而ES6则明确将空位转为`undefined`。\n\n`Array.from`方法会将数组的空位，转为`undefined`，也就是说这个方法不会忽略空位。\n\n```js\n\nArray.from(['a',,'b'])\n// [ \"a\", undefined, \"b\" ]\n\n```\n\n扩展运算符(`...`)也会将空位转为`undefined`。\n\n```js\n\n[...['a',,'b']]\n// [ \"a\", undefined, \"b\" ]\n\n```\n\n`copyWithin()`会连空位一起拷贝。\n\n```js\n\n[,'a','b',,].copyWithin(2,0) // [,\"a\",,\"a\"]\n\n```\n\n`fill()`会将空位视为正常的数组位置。\n\n```js\n\nnew Array(3).fill('a') // [\"a\",\"a\",\"a\"]\n\n```\n\n`for...of`循环也会遍历空位。\n\n```js\n\nlet arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}\n// 1\n// 1\n\n```\n\n如上代码，数组`arr`有两个空位，`for...of`并没有忽略他们。如果改成`map`方法遍历，空位是会跳过的。\n\n******\n\n### 9. 数组推导\n\n数组推导提供了简洁写法，可以通过现有数组生成新数组。ES7会有折现功能，现在Bable转码器已经支持这个功能。\n\n```js\n\nvar a1 = [1, 2, 3, 4];\nvar a2 = [for (i of a1) i * 2];\n\na2 // [2, 4, 6, 8]\n\n```\n\n如上代码，通过`for...of`可能在`a1`的基础上生成`a2`。\n\n在数组推导中，`for...of`结构总是鞋在最前面，返回的表达式写在最后面。\n\n```js\n\nvar years = [ 1954, 1974, 1990, 2006, 2010, 2014 ];\n\n[for (year of years) if (year > 2000) year];\n// [ 2006, 2010, 2014 ]\n\n[for (year of years) if (year > 2000) if(year < 2010) year];\n// [ 2006]\n\n[for (year of years) if (year > 2000 && year < 2010) year];\n// [ 2006]\n\n```\n\n如上代码，`if`语句要卸载`for...of`与返回的表达式之间，而且可以多个`if`语句连用。\n\n再多举一个例子。\n\n```js\n\nvar customers = [\n  {\n    name: 'Jack',\n    age: 25,\n    city: 'New York'\n  },\n  {\n    name: 'Peter',\n    age: 30,\n    city: 'Seattle'\n  }\n];\n\nvar results = [\n  for (c of customers)\n    if (c.city == \"Seattle\")\n      { name: c.name, age: c.age }\n];\nresults // { name: \"Peter\", age: 30 }\n\n```\n\n数组推导可以替代`map`和`filter`方法。\n\n```js\n\n[for (i of [1, 2, 3]) i * i];\n// 等价于\n[1, 2, 3].map(function (i) { return i * i });\n\n[for (i of [1,4,2,3,-8]) if (i < 3) i];\n// 等价于\n[1,4,2,3,-8].filter(function(i) { return i < 3 });\n\n```\n\n如上代码，模拟`map`功能只要单纯的`for...of`循环就可以了，如果模拟`filter`除了循环，还要加上`if`语句。\n\n在一个数组推到中，还可以使用多个`for...of`构成多重循环。\n\n```js\n\nvar a1 = ['x1', 'y1'];\nvar a2 = ['x2', 'y2'];\nvar a3 = ['x3', 'y3'];\n\n[for (s of a1) for (w of a2) for (r of a3) console.log(s + w + r)];\n// x1x2x3\n// x1x2y3\n// x1y2x3\n// x1y2y3\n// y1x2x3\n// y1x2y3\n// y1y2x3\n// y1y2y3\n\n```\n\n字符串可以视为数组，所以字符串也可以直接用于数组推导。\n\n```js\n\n[for (c of 'abcde') if (/[aeiou]/.test(c)) c].join('') // 'ae'\n\n[for (c of 'abcde') c+'0'].join('') // 'a0b0c0d0e0'\n\n```\n\n*****\n\n","source":"_posts/2016-02-01-ES6study-3.md","raw":"---\nlayout: post\ntitle: ES6学习笔记(数组的扩展)\ndate: 2016-02-01\ntags: [ES6]\ncategories: ES6\n---\n\n每次总结其实都是把阮大大的东西先看了一遍，然后又总结一遍，加深印象而已，其实看原文更详细[这里](http://es6.ruanyifeng.com/#docs/array)。\n\n### 1. Array.from()\n\n`Array.from()`方法可以用于将两类对象转为真正的数组：类似数组的对象和可比案例的对象。\n\n```js\n\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\n\n// ES5的写法\nvar arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']\n\n// ES6的写法\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n\n```\n\n只要是部署了Iterator接口的数据结构，`Array.from()`都能把他转为数组。\n\n注：Iterator是一种接口，为各种不痛的数据结构提供统一的访问机制，即任何数据结构只要有Iterator的话都可以完成遍历操作。这个在后面会详细的学到。[这里](http://es6.ruanyifeng.com/#docs/iterator)\n\n```js\n\nArray.from('hello')\n// ['h', 'e', 'l', 'l', 'o']\n\nlet namesSet = new Set(['a', 'b'])\nArray.from(namesSet) // ['a', 'b']\n\n```\n\n如上，字符串和Set结构都具有Iterator接口，都可以转为真正的数组。\n\n一个数组也可以用`Array.from`方法，只不过返回的是一个一样的**新**数组。\n\n任何有`length`属性的对象，都可以通过`Array.from`方法转为数组。\n\n```js\n\nArray.from({ length: 3 });\n// [ undefined, undefined, undefinded ]\n\n```\n\n如上，就算这个对象只有一个属性，而没有键值对，还是会返回一个成员都为`undefined`的数组。\n\n对于还没有部署这个方法的浏览器，可以用`Array.prototype.slice`方法代替。\n\n```js\n\nconst toArray = (() =>\n  Array.from ? Array.from : obj => [].slice.call(obj)\n)();\n\n```\n\n`Array.from`还可以接受第二个参数，作用类似于数组的`map`方法，用来对每个元素进行处理，将处理后的值返回为一个数组。\n\n```js\n\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n\n```\n\n下面的例子是取出一组DOM节点的文本内容。\n\n```js\n\n//h5自带的一种选择器\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n\n```\n\n下面的例子是将数组中布尔值为`false`的成员转为`0`。\n\n```js\n\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n\n```\n\n下面的例子是返回各种数据的类型。\n\n```js\n\nfunction typesOf () {\n  return Array.from(arguments, value => typeof value)\n}\ntypesOf(null, [], NaN)\n// ['object', 'object', 'number']\n\n```\n\n`Array.from()`的另一个应用是，可以将字符串转为数组。然后返回字符串的长度。因为他能正确处理各种Unicode字符。\n\n```js\n\nfunction countSymbols(string) {\n  return Array.from(string).length;\n}\n\n```\n\n*****\n\n### 2. Array.of()\n\n`Array.of()`方法用于将一组值，转换为数组。\n\n```js\n\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n\n```\n\n这个方法主要是为了弥补数组构造函数`Array()`的不足。因为参数个数的不同，`Array()`返回的数组有差异。\n\n```js\n\nArray() // []\nArray(3) // [, , ,]\nArray(3, 11, 8) // [3, 11, 8]\n\n```\n\n如上可以看出，当参数是一个的时候，其实是指定数组的长度；当参数不少于2个的时候，`Array()`才会返回一个新的数组。\n\n而`Array.of()`不会存在参数不同的行为差异，所以可以替代`Array()`。\n\n```js\n\nArray.of() // []\nArray.of(undefined) // [undefined]\nArray.of(1) // [1]\nArray.of(1, 2) // [1, 2]\n\n```\n\n`Array.of`方法可以用下面的代码模拟实现。\n\n```js\n\nfunction ArrayOf(){\n  return [].slice.call(arguments);\n}\n\n```\n\n*****\n\n### 3. 数组实例的copyWithin()\n\n数组实例的`copyWithin()`方法，会在原数组上进行操作，所以使用这个方法，会修改当前数组。\n\n```js\n\nArray.prototype.copyWithin(target, start = 0, end = this.length)\n\n```\n\n他接受三个参数：\n\n1. target（必须）：从该位置开始替换数据。\n2. start（可选）：从该位置开始读取数据，默认为0。如果是负数，表示倒数。\n3. end（可选）：到该位置停止读取数据，默认等于数组长度。如果为负数，表示倒数。\n\n```js\n\n[1, 2, 3, 4, 5].copyWithin(0, 3)\n// [4, 5, 3, 4, 5]\n\n```\n\n如上代码，这个表示把3号位置到数组结束的成员（4和5），复制到从0号开始的位置，替换掉原来的1和2。\n\n更多例子：\n\n```js\n\n// 将3号位复制到0号位\n[1, 2, 3, 4, 5].copyWithin(0, 3, 4)\n// [4, 2, 3, 4, 5]\n\n// -2相当于3号位，-1相当于4号位\n[1, 2, 3, 4, 5].copyWithin(0, -2, -1)\n// [4, 2, 3, 4, 5]\n\n// 将3号位复制到0号位\n[].copyWithin.call({length: 5, 3: 1}, 0, 3)\n// {0: 1, 3: 1, length: 5}\n\n// 将2号位到数组结束，复制到0号位\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// 对于没有部署TypedArray的copyWithin方法的平台\n// 需要采用下面的写法\n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n\n```\n\n*****\n\n### 4. 数组实例的find()和findIndex()\n\n数组实例的`find()`方法，用于找出**第一个**符合条件的数组成员。他的参数是一个回调函数，所有数组的成员依次执行这个回调函数，直到找出一个返回值为`ture`的成员，然后返回该成员，如果没有符合条件的就返回`undefined`。\n\n```js\n\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n```\n\n如上是找到了第一个小于0的成员。\n\n```js\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n```\n\n如上代码，是找到了第一个大于9的成员。\n\n数组实例的`findIndex`方法的用法和`find`方法非常类似，他会犯的是第一个符合条件的成员在数组中的位置。只是如果成员都不符合条件，他返回的是`-1`。\n\n```js\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n\n```\n\n这两个方法也都可以发现`NaN`，弥补了`IndexOf`方法的不足。\n\n```js\n\n[NaN].indexOf(NaN)\n// -1\n\n[NaN].findIndex(y => Object.is(NaN, y))\n// 0\n\n```\n\n******\n\n### 5. 数组实例的fill()\n\n`fill`方法可以用给定的值填充一个数组。\n\n```js\n\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\nnew Array(3).fill(7)\n// [7, 7, 7]\n\n```\n\n如上代码，`fill`方法可以用于空数组的初始化。如果数组中已有元素，会被全部替换掉。\n\n`fill`方法接受两个可选参数，用于指定起始位置和结束位置。\n\n```js\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n\n```\n\n******\n\n### 6. 数组实例的entries()，keys()和values()\n\nES6提供三个新的方法——`entries()`，`keys()`和`values()`，用于遍历数组。他们都会返回一个遍历器对象。可以用`for...of`进行循环遍历，唯一的区别是`keys()`是对键名遍历、`values()`是对键值进行遍历、`entries()`是对键值对进行遍历。\n\n```js\n\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n\n```\n\n*****\n\n### 7. 数组实例的includes()\n\n`Array.prototype.includes`方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的`includes`方法类似。此方法属于ES7，但是Babel转码器已经支持。\n\n```js\n\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, NaN].includes(NaN); // true\n\n```\n\n该方法的第二个参数搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果倒数的大于数组的长度，则会重置为0开始。\n\n```js\n\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n\n```\n\n在没有这个方法之前，我们通常使用数组的`indexOf`方法，检查是否包含某个值。\n\n```js\n\nif (arr.indexOf(el) !== -1) {\n  // ...\n}\n\n```\n\n但是`indexOf`方法有两个缺点，一是不够语义化，表达起来不够直观，二是，可能会对NaN产生误判。\n\n```js\n\n[NaN].indexOf(NaN)\n// -1\n\n```\n\n但是使用`includes`方法的是不一样的判断算法，不会产生误判。\n\n```js\n\n[NaN].includes(NaN)\n// true\n\n```\n\n*****\n\n### 8. 数组的空位\n\n数组的空位，是指数组的某一个位置没有任何值，比如`Array`构造函数返回的数组都是空位。\n\n```js\n\nArray(3) // [, , ,]\n\n```\n\n这里要注意，空位不是`undefined`，空位是没有任何值。请看下面代码。\n\n```js\n\n0 in [undefined, undefined, undefined] // true\n0 in [, , ,] // false\n\n```\n\n如上代码，数组一，尽管是`undefined`但是依然是有值的，而数组二的0号位置没有值。\n\nES5对空位的处理，是很不一致的，大多数情况会忽略空位。\n\n1. `forEach()`, `filter()`, `every()`和`some()`都会跳过空位。\n2. `map()`会跳过空位，但会保留这个值。\n3. `join()`和`toString()`会将空位视为undefined，而undefined和null会被处理成空字符串。\n\n```js\n\n// forEach方法\n[,'a'].forEach((x,i) => log(i)); // 1\n\n// filter方法\n['a',,'b'].filter(x => true) // ['a','b']\n\n// every方法\n[,'a'].every(x => x==='a') // true\n\n// some方法\n[,'a'].some(x => x !== 'a') // false\n\n// map方法\n[,'a'].map(x => 1) // [,1]\n\n// join方法\n[,'a',undefined,null].join('#') // \"#a##\"\n\n// toString方法\n[,'a',undefined,null].toString() // \",a,,\"\n\n```\n\n\u0010而ES6则明确将空位转为`undefined`。\n\n`Array.from`方法会将数组的空位，转为`undefined`，也就是说这个方法不会忽略空位。\n\n```js\n\nArray.from(['a',,'b'])\n// [ \"a\", undefined, \"b\" ]\n\n```\n\n扩展运算符(`...`)也会将空位转为`undefined`。\n\n```js\n\n[...['a',,'b']]\n// [ \"a\", undefined, \"b\" ]\n\n```\n\n`copyWithin()`会连空位一起拷贝。\n\n```js\n\n[,'a','b',,].copyWithin(2,0) // [,\"a\",,\"a\"]\n\n```\n\n`fill()`会将空位视为正常的数组位置。\n\n```js\n\nnew Array(3).fill('a') // [\"a\",\"a\",\"a\"]\n\n```\n\n`for...of`循环也会遍历空位。\n\n```js\n\nlet arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}\n// 1\n// 1\n\n```\n\n如上代码，数组`arr`有两个空位，`for...of`并没有忽略他们。如果改成`map`方法遍历，空位是会跳过的。\n\n******\n\n### 9. 数组推导\n\n数组推导提供了简洁写法，可以通过现有数组生成新数组。ES7会有折现功能，现在Bable转码器已经支持这个功能。\n\n```js\n\nvar a1 = [1, 2, 3, 4];\nvar a2 = [for (i of a1) i * 2];\n\na2 // [2, 4, 6, 8]\n\n```\n\n如上代码，通过`for...of`可能在`a1`的基础上生成`a2`。\n\n在数组推导中，`for...of`结构总是鞋在最前面，返回的表达式写在最后面。\n\n```js\n\nvar years = [ 1954, 1974, 1990, 2006, 2010, 2014 ];\n\n[for (year of years) if (year > 2000) year];\n// [ 2006, 2010, 2014 ]\n\n[for (year of years) if (year > 2000) if(year < 2010) year];\n// [ 2006]\n\n[for (year of years) if (year > 2000 && year < 2010) year];\n// [ 2006]\n\n```\n\n如上代码，`if`语句要卸载`for...of`与返回的表达式之间，而且可以多个`if`语句连用。\n\n再多举一个例子。\n\n```js\n\nvar customers = [\n  {\n    name: 'Jack',\n    age: 25,\n    city: 'New York'\n  },\n  {\n    name: 'Peter',\n    age: 30,\n    city: 'Seattle'\n  }\n];\n\nvar results = [\n  for (c of customers)\n    if (c.city == \"Seattle\")\n      { name: c.name, age: c.age }\n];\nresults // { name: \"Peter\", age: 30 }\n\n```\n\n数组推导可以替代`map`和`filter`方法。\n\n```js\n\n[for (i of [1, 2, 3]) i * i];\n// 等价于\n[1, 2, 3].map(function (i) { return i * i });\n\n[for (i of [1,4,2,3,-8]) if (i < 3) i];\n// 等价于\n[1,4,2,3,-8].filter(function(i) { return i < 3 });\n\n```\n\n如上代码，模拟`map`功能只要单纯的`for...of`循环就可以了，如果模拟`filter`除了循环，还要加上`if`语句。\n\n在一个数组推到中，还可以使用多个`for...of`构成多重循环。\n\n```js\n\nvar a1 = ['x1', 'y1'];\nvar a2 = ['x2', 'y2'];\nvar a3 = ['x3', 'y3'];\n\n[for (s of a1) for (w of a2) for (r of a3) console.log(s + w + r)];\n// x1x2x3\n// x1x2y3\n// x1y2x3\n// x1y2y3\n// y1x2x3\n// y1x2y3\n// y1y2x3\n// y1y2y3\n\n```\n\n字符串可以视为数组，所以字符串也可以直接用于数组推导。\n\n```js\n\n[for (c of 'abcde') if (/[aeiou]/.test(c)) c].join('') // 'ae'\n\n[for (c of 'abcde') c+'0'].join('') // 'a0b0c0d0e0'\n\n```\n\n*****\n\n","slug":"ES6study-3","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wf4000kdk5nwd0ro50g","content":"<p>每次总结其实都是把阮大大的东西先看了一遍，然后又总结一遍，加深印象而已，其实看原文更详细<a href=\"http://es6.ruanyifeng.com/#docs/array\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<h3 id=\"1-Array-from\"><a href=\"#1-Array-from\" class=\"headerlink\" title=\"1. Array.from()\"></a>1. Array.from()</h3><p><code>Array.from()</code>方法可以用于将两类对象转为真正的数组：类似数组的对象和可比案例的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>\n<p>只要是部署了Iterator接口的数据结构，<code>Array.from()</code>都能把他转为数组。</p>\n<p>注：Iterator是一种接口，为各种不痛的数据结构提供统一的访问机制，即任何数据结构只要有Iterator的话都可以完成遍历操作。这个在后面会详细的学到。<a href=\"http://es6.ruanyifeng.com/#docs/iterator\" target=\"_blank\" rel=\"external\">这里</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> namesSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>])</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(namesSet) <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<p>如上，字符串和Set结构都具有Iterator接口，都可以转为真正的数组。</p>\n<p>一个数组也可以用<code>Array.from</code>方法，只不过返回的是一个一样的<strong>新</strong>数组。</p>\n<p>任何有<code>length</code>属性的对象，都可以通过<code>Array.from</code>方法转为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123; length: <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// [ undefined, undefined, undefinded ]</span></span><br></pre></td></tr></table></figure>\n<p>如上，就算这个对象只有一个属性，而没有键值对，还是会返回一个成员都为<code>undefined</code>的数组。</p>\n<p>对于还没有部署这个方法的浏览器，可以用<code>Array.prototype.slice</code>方法代替。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toArray = (() =&gt;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from ? <span class=\"built_in\">Array</span>.from : obj =&gt; [].slice.call(obj)</span><br><span class=\"line\">)();</span><br></pre></td></tr></table></figure>\n<p><code>Array.from</code>还可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值返回为一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(x =&gt; x * x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子是取出一组DOM节点的文本内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//h5自带的一种选择器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</span><br></pre></td></tr></table></figure>\n<p>下面的例子是将数组中布尔值为<code>false</code>的成员转为<code>0</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子是返回各种数据的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typesOf</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>, value =&gt; <span class=\"keyword\">typeof</span> value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">typesOf(<span class=\"literal\">null</span>, [], <span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['object', 'object', 'number']</span></span><br></pre></td></tr></table></figure>\n<p><code>Array.from()</code>的另一个应用是，可以将字符串转为数组。然后返回字符串的长度。因为他能正确处理各种Unicode字符。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSymbols</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(string).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-Array-of\"><a href=\"#2-Array-of\" class=\"headerlink\" title=\"2. Array.of()\"></a>2. Array.of()</h3><p><code>Array.of()</code>方法用于将一组值，转换为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>这个方法主要是为了弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，<code>Array()</code>返回的数组有差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>\n<p>如上可以看出，当参数是一个的时候，其实是指定数组的长度；当参数不少于2个的时候，<code>Array()</code>才会返回一个新的数组。</p>\n<p>而<code>Array.of()</code>不会存在参数不同的行为差异，所以可以替代<code>Array()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"literal\">undefined</span>) <span class=\"comment\">// [undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>) <span class=\"comment\">// [1]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p><code>Array.of</code>方法可以用下面的代码模拟实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-数组实例的copyWithin\"><a href=\"#3-数组实例的copyWithin\" class=\"headerlink\" title=\"3. 数组实例的copyWithin()\"></a>3. 数组实例的copyWithin()</h3><p>数组实例的<code>copyWithin()</code>方法，会在原数组上进行操作，所以使用这个方法，会修改当前数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin(target, start = <span class=\"number\">0</span>, end = <span class=\"keyword\">this</span>.length)</span><br></pre></td></tr></table></figure>\n<p>他接受三个参数：</p>\n<ol>\n<li>target（必须）：从该位置开始替换数据。</li>\n<li>start（可选）：从该位置开始读取数据，默认为0。如果是负数，表示倒数。</li>\n<li>end（可选）：到该位置停止读取数据，默认等于数组长度。如果为负数，表示倒数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，这个表示把3号位置到数组结束的成员（4和5），复制到从0号开始的位置，替换掉原来的1和2。</p>\n<p>更多例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将3号位复制到0号位</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -2相当于3号位，-1相当于4号位</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将3号位复制到0号位</span></span><br><span class=\"line\">[].copyWithin.call(&#123;length: <span class=\"number\">5</span>, <span class=\"number\">3</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将2号位到数组结束，复制到0号位</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i32a = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">i32a.copyWithin(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于没有部署TypedArray的copyWithin方法的平台</span></span><br><span class=\"line\"><span class=\"comment\">// 需要采用下面的写法</span></span><br><span class=\"line\">[].copyWithin.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]), <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-数组实例的find-和findIndex\"><a href=\"#4-数组实例的find-和findIndex\" class=\"headerlink\" title=\"4. 数组实例的find()和findIndex()\"></a>4. 数组实例的find()和findIndex()</h3><p>数组实例的<code>find()</code>方法，用于找出<strong>第一个</strong>符合条件的数组成员。他的参数是一个回调函数，所有数组的成员依次执行这个回调函数，直到找出一个返回值为<code>ture</code>的成员，然后返回该成员，如果没有符合条件的就返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find((n) =&gt; n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// -5</span></span><br></pre></td></tr></table></figure>\n<p>如上是找到了第一个小于0的成员。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，是找到了第一个大于9的成员。</p>\n<p>数组实例的<code>findIndex</code>方法的用法和<code>find</code>方法非常类似，他会犯的是第一个符合条件的成员在数组中的位置。只是如果成员都不符合条件，他返回的是<code>-1</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>这两个方法也都可以发现<code>NaN</code>，弥补了<code>IndexOf</code>方法的不足。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].findIndex(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-数组实例的fill\"><a href=\"#5-数组实例的fill\" class=\"headerlink\" title=\"5. 数组实例的fill()\"></a>5. 数组实例的fill()</h3><p><code>fill</code>方法可以用给定的值填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，<code>fill</code>方法可以用于空数组的初始化。如果数组中已有元素，会被全部替换掉。</p>\n<p><code>fill</code>方法接受两个可选参数，用于指定起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"6-数组实例的entries-，keys-和values\"><a href=\"#6-数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"6. 数组实例的entries()，keys()和values()\"></a>6. 数组实例的entries()，keys()和values()</h3><p>ES6提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>，用于遍历数组。他们都会返回一个遍历器对象。可以用<code>for...of</code>进行循环遍历，唯一的区别是<code>keys()</code>是对键名遍历、<code>values()</code>是对键值进行遍历、<code>entries()</code>是对键值对进行遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"7-数组实例的includes\"><a href=\"#7-数组实例的includes\" class=\"headerlink\" title=\"7. 数组实例的includes()\"></a>7. 数组实例的includes()</h3><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似。此方法属于ES7，但是Babel转码器已经支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>该方法的第二个参数搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果倒数的大于数组的长度，则会重置为0开始。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在没有这个方法之前，我们通常使用数组的<code>indexOf</code>方法，检查是否包含某个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.indexOf(el) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是<code>indexOf</code>方法有两个缺点，一是不够语义化，表达起来不够直观，二是，可能会对NaN产生误判。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<p>但是使用<code>includes</code>方法的是不一样的判断算法，不会产生误判。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"8-数组的空位\"><a href=\"#8-数组的空位\" class=\"headerlink\" title=\"8. 数组的空位\"></a>8. 数组的空位</h3><p>数组的空位，是指数组的某一个位置没有任何值，比如<code>Array</code>构造函数返回的数组都是空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br></pre></td></tr></table></figure>\n<p>这里要注意，空位不是<code>undefined</code>，空位是没有任何值。请看下面代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [, , ,] <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，数组一，尽管是<code>undefined</code>但是依然是有值的，而数组二的0号位置没有值。</p>\n<p>ES5对空位的处理，是很不一致的，大多数情况会忽略空位。</p>\n<ol>\n<li><code>forEach()</code>, <code>filter()</code>, <code>every()</code>和<code>some()</code>都会跳过空位。</li>\n<li><code>map()</code>会跳过空位，但会保留这个值。</li>\n<li><code>join()</code>和<code>toString()</code>会将空位视为undefined，而undefined和null会被处理成空字符串。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// forEach方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].forEach((x,i) =&gt; log(i)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filter方法</span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>].filter(x =&gt; <span class=\"literal\">true</span>) <span class=\"comment\">// ['a','b']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// every方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].every(x =&gt; x===<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].some(x =&gt; x !== <span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].map(x =&gt; <span class=\"number\">1</span>) <span class=\"comment\">// [,1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// join方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].join(<span class=\"string\">'#'</span>) <span class=\"comment\">// \"#a##\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toString方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].toString() <span class=\"comment\">// \",a,,\"</span></span><br></pre></td></tr></table></figure>\n<p>\u0010而ES6则明确将空位转为<code>undefined</code>。</p>\n<p><code>Array.from</code>方法会将数组的空位，转为<code>undefined</code>，也就是说这个方法不会忽略空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>])</span><br><span class=\"line\"><span class=\"comment\">// [ \"a\", undefined, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p>扩展运算符(<code>...</code>)也会将空位转为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[...[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>]]</span><br><span class=\"line\"><span class=\"comment\">// [ \"a\", undefined, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p><code>copyWithin()</code>会连空位一起拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,,].copyWithin(<span class=\"number\">2</span>,<span class=\"number\">0</span>) <span class=\"comment\">// [,\"a\",,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<p><code>fill()</code>会将空位视为正常的数组位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"string\">'a'</span>) <span class=\"comment\">// [\"a\",\"a\",\"a\"]</span></span><br></pre></td></tr></table></figure>\n<p><code>for...of</code>循环也会遍历空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [, ,];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，数组<code>arr</code>有两个空位，<code>for...of</code>并没有忽略他们。如果改成<code>map</code>方法遍历，空位是会跳过的。</p>\n<hr>\n<h3 id=\"9-数组推导\"><a href=\"#9-数组推导\" class=\"headerlink\" title=\"9. 数组推导\"></a>9. 数组推导</h3><p>数组推导提供了简洁写法，可以通过现有数组生成新数组。ES7会有折现功能，现在Bable转码器已经支持这个功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> a1) i * <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a2 <span class=\"comment\">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，通过<code>for...of</code>可能在<code>a1</code>的基础上生成<code>a2</code>。</p>\n<p>在数组推导中，<code>for...of</code>结构总是鞋在最前面，返回的表达式写在最后面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> years = [ <span class=\"number\">1954</span>, <span class=\"number\">1974</span>, <span class=\"number\">1990</span>, <span class=\"number\">2006</span>, <span class=\"number\">2010</span>, <span class=\"number\">2014</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006, 2010, 2014 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span>) <span class=\"keyword\">if</span>(year &lt; <span class=\"number\">2010</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span> &amp;&amp; year &lt; <span class=\"number\">2010</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，<code>if</code>语句要卸载<code>for...of</code>与返回的表达式之间，而且可以多个<code>if</code>语句连用。</p>\n<p>再多举一个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> customers = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">25</span>,</span><br><span class=\"line\">    city: <span class=\"string\">'New York'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Peter'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">30</span>,</span><br><span class=\"line\">    city: <span class=\"string\">'Seattle'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> results = [</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> customers)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.city == <span class=\"string\">\"Seattle\"</span>)</span><br><span class=\"line\">      &#123; name: c.name, age: c.age &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">results <span class=\"comment\">// &#123; name: \"Peter\", age: 30 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>数组推导可以替代<code>map</code>和<code>filter</code>方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) i * i];</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i * i &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-8</span>]) <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">3</span>) i];</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-8</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i &lt; <span class=\"number\">3</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，模拟<code>map</code>功能只要单纯的<code>for...of</code>循环就可以了，如果模拟<code>filter</code>除了循环，还要加上<code>if</code>语句。</p>\n<p>在一个数组推到中，还可以使用多个<code>for...of</code>构成多重循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"string\">'x1'</span>, <span class=\"string\">'y1'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"string\">'x2'</span>, <span class=\"string\">'y2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a3 = [<span class=\"string\">'x3'</span>, <span class=\"string\">'y3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (s <span class=\"keyword\">of</span> a1) <span class=\"keyword\">for</span> (w <span class=\"keyword\">of</span> a2) <span class=\"keyword\">for</span> (r <span class=\"keyword\">of</span> a3) <span class=\"built_in\">console</span>.log(s + w + r)];</span><br><span class=\"line\"><span class=\"comment\">// x1x2x3</span></span><br><span class=\"line\"><span class=\"comment\">// x1x2y3</span></span><br><span class=\"line\"><span class=\"comment\">// x1y2x3</span></span><br><span class=\"line\"><span class=\"comment\">// x1y2y3</span></span><br><span class=\"line\"><span class=\"comment\">// y1x2x3</span></span><br><span class=\"line\"><span class=\"comment\">// y1x2y3</span></span><br><span class=\"line\"><span class=\"comment\">// y1y2x3</span></span><br><span class=\"line\"><span class=\"comment\">// y1y2y3</span></span><br></pre></td></tr></table></figure>\n<p>字符串可以视为数组，所以字符串也可以直接用于数组推导。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> <span class=\"string\">'abcde'</span>) <span class=\"keyword\">if</span> (<span class=\"regexp\">/[aeiou]/</span>.test(c)) c].join(<span class=\"string\">''</span>) <span class=\"comment\">// 'ae'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> <span class=\"string\">'abcde'</span>) c+<span class=\"string\">'0'</span>].join(<span class=\"string\">''</span>) <span class=\"comment\">// 'a0b0c0d0e0'</span></span><br></pre></td></tr></table></figure>\n<hr>\n","excerpt":"","more":"<p>每次总结其实都是把阮大大的东西先看了一遍，然后又总结一遍，加深印象而已，其实看原文更详细<a href=\"http://es6.ruanyifeng.com/#docs/array\">这里</a>。</p>\n<h3 id=\"1-Array-from\"><a href=\"#1-Array-from\" class=\"headerlink\" title=\"1. Array.from()\"></a>1. Array.from()</h3><p><code>Array.from()</code>方法可以用于将两类对象转为真正的数组：类似数组的对象和可比案例的对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">    <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">    <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">    length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [].slice.call(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = <span class=\"built_in\">Array</span>.from(arrayLike); <span class=\"comment\">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>\n<p>只要是部署了Iterator接口的数据结构，<code>Array.from()</code>都能把他转为数组。</p>\n<p>注：Iterator是一种接口，为各种不痛的数据结构提供统一的访问机制，即任何数据结构只要有Iterator的话都可以完成遍历操作。这个在后面会详细的学到。<a href=\"http://es6.ruanyifeng.com/#docs/iterator\">这里</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['h', 'e', 'l', 'l', 'o']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> namesSet = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>])</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(namesSet) <span class=\"comment\">// ['a', 'b']</span></span><br></pre></td></tr></table></figure>\n<p>如上，字符串和Set结构都具有Iterator接口，都可以转为真正的数组。</p>\n<p>一个数组也可以用<code>Array.from</code>方法，只不过返回的是一个一样的<strong>新</strong>数组。</p>\n<p>任何有<code>length</code>属性的对象，都可以通过<code>Array.from</code>方法转为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(&#123; length: <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// [ undefined, undefined, undefinded ]</span></span><br></pre></td></tr></table></figure>\n<p>如上，就算这个对象只有一个属性，而没有键值对，还是会返回一个成员都为<code>undefined</code>的数组。</p>\n<p>对于还没有部署这个方法的浏览器，可以用<code>Array.prototype.slice</code>方法代替。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toArray = (() =&gt;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.from ? <span class=\"built_in\">Array</span>.from : obj =&gt; [].slice.call(obj)</span><br><span class=\"line\">)();</span><br></pre></td></tr></table></figure>\n<p><code>Array.from</code>还可以接受第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值返回为一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(x =&gt; x * x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</span><br><span class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子是取出一组DOM节点的文本内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//h5自带的一种选择器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</span><br></pre></td></tr></table></figure>\n<p>下面的例子是将数组中布尔值为<code>false</code>的成员转为<code>0</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></span><br></pre></td></tr></table></figure>\n<p>下面的例子是返回各种数据的类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typesOf</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>, value =&gt; <span class=\"keyword\">typeof</span> value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">typesOf(<span class=\"literal\">null</span>, [], <span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['object', 'object', 'number']</span></span><br></pre></td></tr></table></figure>\n<p><code>Array.from()</code>的另一个应用是，可以将字符串转为数组。然后返回字符串的长度。因为他能正确处理各种Unicode字符。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSymbols</span>(<span class=\"params\">string</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(string).length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"2-Array-of\"><a href=\"#2-Array-of\" class=\"headerlink\" title=\"2. Array.of()\"></a>2. Array.of()</h3><p><code>Array.of()</code>方法用于将一组值，转换为数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>这个方法主要是为了弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，<code>Array()</code>返回的数组有差异。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>\n<p>如上可以看出，当参数是一个的时候，其实是指定数组的长度；当参数不少于2个的时候，<code>Array()</code>才会返回一个新的数组。</p>\n<p>而<code>Array.of()</code>不会存在参数不同的行为差异，所以可以替代<code>Array()</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of() <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"literal\">undefined</span>) <span class=\"comment\">// [undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>) <span class=\"comment\">// [1]</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// [1, 2]</span></span><br></pre></td></tr></table></figure>\n<p><code>Array.of</code>方法可以用下面的代码模拟实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ArrayOf</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [].slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"3-数组实例的copyWithin\"><a href=\"#3-数组实例的copyWithin\" class=\"headerlink\" title=\"3. 数组实例的copyWithin()\"></a>3. 数组实例的copyWithin()</h3><p>数组实例的<code>copyWithin()</code>方法，会在原数组上进行操作，所以使用这个方法，会修改当前数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.copyWithin(target, start = <span class=\"number\">0</span>, end = <span class=\"keyword\">this</span>.length)</span><br></pre></td></tr></table></figure>\n<p>他接受三个参数：</p>\n<ol>\n<li>target（必须）：从该位置开始替换数据。</li>\n<li>start（可选）：从该位置开始读取数据，默认为0。如果是负数，表示倒数。</li>\n<li>end（可选）：到该位置停止读取数据，默认等于数组长度。如果为负数，表示倒数。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 5, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，这个表示把3号位置到数组结束的成员（4和5），复制到从0号开始的位置，替换掉原来的1和2。</p>\n<p>更多例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将3号位复制到0号位</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -2相当于3号位，-1相当于4号位</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>].copyWithin(<span class=\"number\">0</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// [4, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将3号位复制到0号位</span></span><br><span class=\"line\">[].copyWithin.call(&#123;length: <span class=\"number\">5</span>, <span class=\"number\">3</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将2号位到数组结束，复制到0号位</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i32a = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\">i32a.copyWithin(<span class=\"number\">0</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于没有部署TypedArray的copyWithin方法的平台</span></span><br><span class=\"line\"><span class=\"comment\">// 需要采用下面的写法</span></span><br><span class=\"line\">[].copyWithin.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]), <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"4-数组实例的find-和findIndex\"><a href=\"#4-数组实例的find-和findIndex\" class=\"headerlink\" title=\"4. 数组实例的find()和findIndex()\"></a>4. 数组实例的find()和findIndex()</h3><p>数组实例的<code>find()</code>方法，用于找出<strong>第一个</strong>符合条件的数组成员。他的参数是一个回调函数，所有数组的成员依次执行这个回调函数，直到找出一个返回值为<code>ture</code>的成员，然后返回该成员，如果没有符合条件的就返回<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find((n) =&gt; n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">// -5</span></span><br></pre></td></tr></table></figure>\n<p>如上是找到了第一个小于0的成员。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，是找到了第一个大于9的成员。</p>\n<p>数组实例的<code>findIndex</code>方法的用法和<code>find</code>方法非常类似，他会犯的是第一个符合条件的成员在数组中的位置。只是如果成员都不符合条件，他返回的是<code>-1</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</span><br><span class=\"line\">&#125;) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>这两个方法也都可以发现<code>NaN</code>，弥补了<code>IndexOf</code>方法的不足。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].findIndex(y =&gt; <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, y))</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"5-数组实例的fill\"><a href=\"#5-数组实例的fill\" class=\"headerlink\" title=\"5. 数组实例的fill()\"></a>5. 数组实例的fill()</h3><p><code>fill</code>方法可以用给定的值填充一个数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，<code>fill</code>方法可以用于空数组的初始化。如果数组中已有元素，会被全部替换掉。</p>\n<p><code>fill</code>方法接受两个可选参数，用于指定起始位置和结束位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"6-数组实例的entries-，keys-和values\"><a href=\"#6-数组实例的entries-，keys-和values\" class=\"headerlink\" title=\"6. 数组实例的entries()，keys()和values()\"></a>6. 数组实例的entries()，keys()和values()</h3><p>ES6提供三个新的方法——<code>entries()</code>，<code>keys()</code>和<code>values()</code>，用于遍历数组。他们都会返回一个遍历器对象。可以用<code>for...of</code>进行循环遍历，唯一的区别是<code>keys()</code>是对键名遍历、<code>values()</code>是对键值进行遍历、<code>entries()</code>是对键值对进行遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 'a'</span></span><br><span class=\"line\"><span class=\"comment\">// 'b'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 \"a\"</span></span><br><span class=\"line\"><span class=\"comment\">// 1 \"b\"</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"7-数组实例的includes\"><a href=\"#7-数组实例的includes\" class=\"headerlink\" title=\"7. 数组实例的includes()\"></a>7. 数组实例的includes()</h3><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的<code>includes</code>方法类似。此方法属于ES7，但是Babel转码器已经支持。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">2</span>);     <span class=\"comment\">// true</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">4</span>);     <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>该方法的第二个参数搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果倒数的大于数组的长度，则会重置为0开始。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// false</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].includes(<span class=\"number\">3</span>, <span class=\"number\">-1</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>在没有这个方法之前，我们通常使用数组的<code>indexOf</code>方法，检查是否包含某个值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (arr.indexOf(el) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是<code>indexOf</code>方法有两个缺点，一是不够语义化，表达起来不够直观，二是，可能会对NaN产生误判。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].indexOf(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n<p>但是使用<code>includes</code>方法的是不一样的判断算法，不会产生误判。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"8-数组的空位\"><a href=\"#8-数组的空位\" class=\"headerlink\" title=\"8. 数组的空位\"></a>8. 数组的空位</h3><p>数组的空位，是指数组的某一个位置没有任何值，比如<code>Array</code>构造函数返回的数组都是空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>(<span class=\"number\">3</span>) <span class=\"comment\">// [, , ,]</span></span><br></pre></td></tr></table></figure>\n<p>这里要注意，空位不是<code>undefined</code>，空位是没有任何值。请看下面代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"keyword\">in</span> [, , ,] <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，数组一，尽管是<code>undefined</code>但是依然是有值的，而数组二的0号位置没有值。</p>\n<p>ES5对空位的处理，是很不一致的，大多数情况会忽略空位。</p>\n<ol>\n<li><code>forEach()</code>, <code>filter()</code>, <code>every()</code>和<code>some()</code>都会跳过空位。</li>\n<li><code>map()</code>会跳过空位，但会保留这个值。</li>\n<li><code>join()</code>和<code>toString()</code>会将空位视为undefined，而undefined和null会被处理成空字符串。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// forEach方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].forEach((x,i) =&gt; log(i)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// filter方法</span></span><br><span class=\"line\">[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>].filter(x =&gt; <span class=\"literal\">true</span>) <span class=\"comment\">// ['a','b']</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// every方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].every(x =&gt; x===<span class=\"string\">'a'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// some方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].some(x =&gt; x !== <span class=\"string\">'a'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// map方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>].map(x =&gt; <span class=\"number\">1</span>) <span class=\"comment\">// [,1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// join方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].join(<span class=\"string\">'#'</span>) <span class=\"comment\">// \"#a##\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toString方法</span></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"literal\">undefined</span>,<span class=\"literal\">null</span>].toString() <span class=\"comment\">// \",a,,\"</span></span><br></pre></td></tr></table></figure>\n<p>\u0010而ES6则明确将空位转为<code>undefined</code>。</p>\n<p><code>Array.from</code>方法会将数组的空位，转为<code>undefined</code>，也就是说这个方法不会忽略空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>])</span><br><span class=\"line\"><span class=\"comment\">// [ \"a\", undefined, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p>扩展运算符(<code>...</code>)也会将空位转为<code>undefined</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[...[<span class=\"string\">'a'</span>,,<span class=\"string\">'b'</span>]]</span><br><span class=\"line\"><span class=\"comment\">// [ \"a\", undefined, \"b\" ]</span></span><br></pre></td></tr></table></figure>\n<p><code>copyWithin()</code>会连空位一起拷贝。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[,<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,,].copyWithin(<span class=\"number\">2</span>,<span class=\"number\">0</span>) <span class=\"comment\">// [,\"a\",,\"a\"]</span></span><br></pre></td></tr></table></figure>\n<p><code>fill()</code>会将空位视为正常的数组位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">3</span>).fill(<span class=\"string\">'a'</span>) <span class=\"comment\">// [\"a\",\"a\",\"a\"]</span></span><br></pre></td></tr></table></figure>\n<p><code>for...of</code>循环也会遍历空位。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [, ,];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，数组<code>arr</code>有两个空位，<code>for...of</code>并没有忽略他们。如果改成<code>map</code>方法遍历，空位是会跳过的。</p>\n<hr>\n<h3 id=\"9-数组推导\"><a href=\"#9-数组推导\" class=\"headerlink\" title=\"9. 数组推导\"></a>9. 数组推导</h3><p>数组推导提供了简洁写法，可以通过现有数组生成新数组。ES7会有折现功能，现在Bable转码器已经支持这个功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> a1) i * <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">a2 <span class=\"comment\">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，通过<code>for...of</code>可能在<code>a1</code>的基础上生成<code>a2</code>。</p>\n<p>在数组推导中，<code>for...of</code>结构总是鞋在最前面，返回的表达式写在最后面。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> years = [ <span class=\"number\">1954</span>, <span class=\"number\">1974</span>, <span class=\"number\">1990</span>, <span class=\"number\">2006</span>, <span class=\"number\">2010</span>, <span class=\"number\">2014</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006, 2010, 2014 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span>) <span class=\"keyword\">if</span>(year &lt; <span class=\"number\">2010</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006]</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (year <span class=\"keyword\">of</span> years) <span class=\"keyword\">if</span> (year &gt; <span class=\"number\">2000</span> &amp;&amp; year &lt; <span class=\"number\">2010</span>) year];</span><br><span class=\"line\"><span class=\"comment\">// [ 2006]</span></span><br></pre></td></tr></table></figure>\n<p>如上代码，<code>if</code>语句要卸载<code>for...of</code>与返回的表达式之间，而且可以多个<code>if</code>语句连用。</p>\n<p>再多举一个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> customers = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jack'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">25</span>,</span><br><span class=\"line\">    city: <span class=\"string\">'New York'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Peter'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">30</span>,</span><br><span class=\"line\">    city: <span class=\"string\">'Seattle'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> results = [</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> customers)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c.city == <span class=\"string\">\"Seattle\"</span>)</span><br><span class=\"line\">      &#123; name: c.name, age: c.age &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">results <span class=\"comment\">// &#123; name: \"Peter\", age: 30 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>数组推导可以替代<code>map</code>和<code>filter</code>方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) i * i];</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i * i &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (i <span class=\"keyword\">of</span> [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-8</span>]) <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">3</span>) i];</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">-8</span>].filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123; <span class=\"keyword\">return</span> i &lt; <span class=\"number\">3</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，模拟<code>map</code>功能只要单纯的<code>for...of</code>循环就可以了，如果模拟<code>filter</code>除了循环，还要加上<code>if</code>语句。</p>\n<p>在一个数组推到中，还可以使用多个<code>for...of</code>构成多重循环。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a1 = [<span class=\"string\">'x1'</span>, <span class=\"string\">'y1'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"string\">'x2'</span>, <span class=\"string\">'y2'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> a3 = [<span class=\"string\">'x3'</span>, <span class=\"string\">'y3'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (s <span class=\"keyword\">of</span> a1) <span class=\"keyword\">for</span> (w <span class=\"keyword\">of</span> a2) <span class=\"keyword\">for</span> (r <span class=\"keyword\">of</span> a3) <span class=\"built_in\">console</span>.log(s + w + r)];</span><br><span class=\"line\"><span class=\"comment\">// x1x2x3</span></span><br><span class=\"line\"><span class=\"comment\">// x1x2y3</span></span><br><span class=\"line\"><span class=\"comment\">// x1y2x3</span></span><br><span class=\"line\"><span class=\"comment\">// x1y2y3</span></span><br><span class=\"line\"><span class=\"comment\">// y1x2x3</span></span><br><span class=\"line\"><span class=\"comment\">// y1x2y3</span></span><br><span class=\"line\"><span class=\"comment\">// y1y2x3</span></span><br><span class=\"line\"><span class=\"comment\">// y1y2y3</span></span><br></pre></td></tr></table></figure>\n<p>字符串可以视为数组，所以字符串也可以直接用于数组推导。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> <span class=\"string\">'abcde'</span>) <span class=\"keyword\">if</span> (<span class=\"regexp\">/[aeiou]/</span>.test(c)) c].join(<span class=\"string\">''</span>) <span class=\"comment\">// 'ae'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"keyword\">for</span> (c <span class=\"keyword\">of</span> <span class=\"string\">'abcde'</span>) c+<span class=\"string\">'0'</span>].join(<span class=\"string\">''</span>) <span class=\"comment\">// 'a0b0c0d0e0'</span></span><br></pre></td></tr></table></figure>\n<hr>\n"},{"layout":"post","title":"初学React遇到的坑","date":"2016-02-16T16:00:00.000Z","_content":"\n新建一个React.createClass时，变量名的首字母必须大写！！ 不然渲染出来的变量名变成了html的标签名。\n\n在render里面写的标签必须有闭合符号（单标签也要有闭合符号），如`<p>xxxxxx</p>`或`<input />` \n\nchrome里面有一个`React Developer Tool`的扩展程序，安装这个插件之后，打开开发者面板后，上面一栏会显示一个`react`的选项，\n","source":"_posts/2016-02-18-初学React遇到的坑.md","raw":"---\nlayout: post\ntitle: 初学React遇到的坑\ndate: 2016-02-17\ntags: [React]\ncategories: React\n---\n\n新建一个React.createClass时，变量名的首字母必须大写！！ 不然渲染出来的变量名变成了html的标签名。\n\n在render里面写的标签必须有闭合符号（单标签也要有闭合符号），如`<p>xxxxxx</p>`或`<input />` \n\nchrome里面有一个`React Developer Tool`的扩展程序，安装这个插件之后，打开开发者面板后，上面一栏会显示一个`react`的选项，\n","slug":"初学React遇到的坑","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfd000ldk5nxyksofuh","content":"<p>新建一个React.createClass时，变量名的首字母必须大写！！ 不然渲染出来的变量名变成了html的标签名。</p>\n<p>在render里面写的标签必须有闭合符号（单标签也要有闭合符号），如<code>&lt;p&gt;xxxxxx&lt;/p&gt;</code>或<code>&lt;input /&gt;</code> </p>\n<p>chrome里面有一个<code>React Developer Tool</code>的扩展程序，安装这个插件之后，打开开发者面板后，上面一栏会显示一个<code>react</code>的选项，</p>\n","excerpt":"","more":"<p>新建一个React.createClass时，变量名的首字母必须大写！！ 不然渲染出来的变量名变成了html的标签名。</p>\n<p>在render里面写的标签必须有闭合符号（单标签也要有闭合符号），如<code>&lt;p&gt;xxxxxx&lt;/p&gt;</code>或<code>&lt;input /&gt;</code> </p>\n<p>chrome里面有一个<code>React Developer Tool</code>的扩展程序，安装这个插件之后，打开开发者面板后，上面一栏会显示一个<code>react</code>的选项，</p>\n"},{"layout":"post","title":"温柔的对待每一个人","date":"2016-01-31T16:00:00.000Z","_content":"\n今天在路上看知乎，看到了这么一个问题（[这里](https://www.zhihu.com/question/19866127)），每一个温暖的故事都让我感触良多，想想我们多久没有温柔的去对待一个陌生人，而又去不耐烦的对待我们最亲的人。\n\n在这个总是以金钱去衡量一个人的年代，相比来看我们都变得浮躁，变得现实，变得冷漠，其实我相信我们都有一个帮助别人的心，但是可能我们出于防备，出于畏惧，想要避免麻烦，避免把自己放在一个尴尬的位置上，我们避开这一些我们本想要去帮助别人的行为。\n\n看着他们一个个温暖的故事，心里酸酸的，我也想去分享两个个我看到的故事。\n\n第一件我是看到的事情，在我上下班的路上会路过一座桥，每天下班已经很晚了，走过那里的时候总会有一个流浪的人呆在那里，冬天会很冷，他会点上火来取暖，每次经过那里的时候我都会有疑问，这么冷的冬天他每天晚上都是在这里度过的吗？我也总会想我要不要上去问一问他需不需要帮助，但是多数人都和我一样，心里会想可付诸到行动上的却是没有。但是有一天路过那里的时候，我看到一个暖着粉绿色棉衣的女生，在那里弯下腰和他说话，我故意走慢了一些，原来是那个女生，买了一些包子和粥给那个流浪者。我很佩服那个女生，她可以用于面对自己的内心，而我们却是懦弱的。\n\n第二件是我遇到的一件事情，是在深圳的时候，我去游览中山大学的时候，那天正好雨天，大概下午四五点左右开始下起了大雨，我因为和朋友约定了一个见面的地方，也打着伞匆匆的赶过去，在路边看到了一个男生在树下躲雨，因为雨下得很大他的衣服也有些湿了，我过去和他一起撑伞到一个地方先躲雨，我问他要去哪里离得远不远，简单地交流后，因为他离得住的地方不是很近，他不是很着急回去而且我约了同学比较赶，深圳的阵雨总是下的很急很大，但是时间不是会很长，所以我就先走了，这也是我为数不多的帮助人的事情吧。\n\n因为平时总是很宅，而且不是很爱和陌生人交流，所以遇到的事情可能不多，亦或是我生活的不够细腻，没有把感人的瞬间记在心中。但是我希望我们都能够不做思想上的巨人，行动上的矮子，不要怕尴尬，从自己出发去温柔的对待每一个人，影响身边的每一个人。\n\n\n\n","source":"_posts/2016-02-01-温柔的对待每一个人.md","raw":"---\nlayout: post\ntitle: 温柔的对待每一个人\ndate: 2016-02-01\ntags: [杂事二三]\ncategories: 杂事二三\n---\n\n今天在路上看知乎，看到了这么一个问题（[这里](https://www.zhihu.com/question/19866127)），每一个温暖的故事都让我感触良多，想想我们多久没有温柔的去对待一个陌生人，而又去不耐烦的对待我们最亲的人。\n\n在这个总是以金钱去衡量一个人的年代，相比来看我们都变得浮躁，变得现实，变得冷漠，其实我相信我们都有一个帮助别人的心，但是可能我们出于防备，出于畏惧，想要避免麻烦，避免把自己放在一个尴尬的位置上，我们避开这一些我们本想要去帮助别人的行为。\n\n看着他们一个个温暖的故事，心里酸酸的，我也想去分享两个个我看到的故事。\n\n第一件我是看到的事情，在我上下班的路上会路过一座桥，每天下班已经很晚了，走过那里的时候总会有一个流浪的人呆在那里，冬天会很冷，他会点上火来取暖，每次经过那里的时候我都会有疑问，这么冷的冬天他每天晚上都是在这里度过的吗？我也总会想我要不要上去问一问他需不需要帮助，但是多数人都和我一样，心里会想可付诸到行动上的却是没有。但是有一天路过那里的时候，我看到一个暖着粉绿色棉衣的女生，在那里弯下腰和他说话，我故意走慢了一些，原来是那个女生，买了一些包子和粥给那个流浪者。我很佩服那个女生，她可以用于面对自己的内心，而我们却是懦弱的。\n\n第二件是我遇到的一件事情，是在深圳的时候，我去游览中山大学的时候，那天正好雨天，大概下午四五点左右开始下起了大雨，我因为和朋友约定了一个见面的地方，也打着伞匆匆的赶过去，在路边看到了一个男生在树下躲雨，因为雨下得很大他的衣服也有些湿了，我过去和他一起撑伞到一个地方先躲雨，我问他要去哪里离得远不远，简单地交流后，因为他离得住的地方不是很近，他不是很着急回去而且我约了同学比较赶，深圳的阵雨总是下的很急很大，但是时间不是会很长，所以我就先走了，这也是我为数不多的帮助人的事情吧。\n\n因为平时总是很宅，而且不是很爱和陌生人交流，所以遇到的事情可能不多，亦或是我生活的不够细腻，没有把感人的瞬间记在心中。但是我希望我们都能够不做思想上的巨人，行动上的矮子，不要怕尴尬，从自己出发去温柔的对待每一个人，影响身边的每一个人。\n\n\n\n","slug":"温柔的对待每一个人","published":1,"updated":"2016-03-24T09:21:12.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfh000qdk5ncla73s2f","content":"<p>今天在路上看知乎，看到了这么一个问题（<a href=\"https://www.zhihu.com/question/19866127\" target=\"_blank\" rel=\"external\">这里</a>），每一个温暖的故事都让我感触良多，想想我们多久没有温柔的去对待一个陌生人，而又去不耐烦的对待我们最亲的人。</p>\n<p>在这个总是以金钱去衡量一个人的年代，相比来看我们都变得浮躁，变得现实，变得冷漠，其实我相信我们都有一个帮助别人的心，但是可能我们出于防备，出于畏惧，想要避免麻烦，避免把自己放在一个尴尬的位置上，我们避开这一些我们本想要去帮助别人的行为。</p>\n<p>看着他们一个个温暖的故事，心里酸酸的，我也想去分享两个个我看到的故事。</p>\n<p>第一件我是看到的事情，在我上下班的路上会路过一座桥，每天下班已经很晚了，走过那里的时候总会有一个流浪的人呆在那里，冬天会很冷，他会点上火来取暖，每次经过那里的时候我都会有疑问，这么冷的冬天他每天晚上都是在这里度过的吗？我也总会想我要不要上去问一问他需不需要帮助，但是多数人都和我一样，心里会想可付诸到行动上的却是没有。但是有一天路过那里的时候，我看到一个暖着粉绿色棉衣的女生，在那里弯下腰和他说话，我故意走慢了一些，原来是那个女生，买了一些包子和粥给那个流浪者。我很佩服那个女生，她可以用于面对自己的内心，而我们却是懦弱的。</p>\n<p>第二件是我遇到的一件事情，是在深圳的时候，我去游览中山大学的时候，那天正好雨天，大概下午四五点左右开始下起了大雨，我因为和朋友约定了一个见面的地方，也打着伞匆匆的赶过去，在路边看到了一个男生在树下躲雨，因为雨下得很大他的衣服也有些湿了，我过去和他一起撑伞到一个地方先躲雨，我问他要去哪里离得远不远，简单地交流后，因为他离得住的地方不是很近，他不是很着急回去而且我约了同学比较赶，深圳的阵雨总是下的很急很大，但是时间不是会很长，所以我就先走了，这也是我为数不多的帮助人的事情吧。</p>\n<p>因为平时总是很宅，而且不是很爱和陌生人交流，所以遇到的事情可能不多，亦或是我生活的不够细腻，没有把感人的瞬间记在心中。但是我希望我们都能够不做思想上的巨人，行动上的矮子，不要怕尴尬，从自己出发去温柔的对待每一个人，影响身边的每一个人。</p>\n","excerpt":"","more":"<p>今天在路上看知乎，看到了这么一个问题（<a href=\"https://www.zhihu.com/question/19866127\">这里</a>），每一个温暖的故事都让我感触良多，想想我们多久没有温柔的去对待一个陌生人，而又去不耐烦的对待我们最亲的人。</p>\n<p>在这个总是以金钱去衡量一个人的年代，相比来看我们都变得浮躁，变得现实，变得冷漠，其实我相信我们都有一个帮助别人的心，但是可能我们出于防备，出于畏惧，想要避免麻烦，避免把自己放在一个尴尬的位置上，我们避开这一些我们本想要去帮助别人的行为。</p>\n<p>看着他们一个个温暖的故事，心里酸酸的，我也想去分享两个个我看到的故事。</p>\n<p>第一件我是看到的事情，在我上下班的路上会路过一座桥，每天下班已经很晚了，走过那里的时候总会有一个流浪的人呆在那里，冬天会很冷，他会点上火来取暖，每次经过那里的时候我都会有疑问，这么冷的冬天他每天晚上都是在这里度过的吗？我也总会想我要不要上去问一问他需不需要帮助，但是多数人都和我一样，心里会想可付诸到行动上的却是没有。但是有一天路过那里的时候，我看到一个暖着粉绿色棉衣的女生，在那里弯下腰和他说话，我故意走慢了一些，原来是那个女生，买了一些包子和粥给那个流浪者。我很佩服那个女生，她可以用于面对自己的内心，而我们却是懦弱的。</p>\n<p>第二件是我遇到的一件事情，是在深圳的时候，我去游览中山大学的时候，那天正好雨天，大概下午四五点左右开始下起了大雨，我因为和朋友约定了一个见面的地方，也打着伞匆匆的赶过去，在路边看到了一个男生在树下躲雨，因为雨下得很大他的衣服也有些湿了，我过去和他一起撑伞到一个地方先躲雨，我问他要去哪里离得远不远，简单地交流后，因为他离得住的地方不是很近，他不是很着急回去而且我约了同学比较赶，深圳的阵雨总是下的很急很大，但是时间不是会很长，所以我就先走了，这也是我为数不多的帮助人的事情吧。</p>\n<p>因为平时总是很宅，而且不是很爱和陌生人交流，所以遇到的事情可能不多，亦或是我生活的不够细腻，没有把感人的瞬间记在心中。但是我希望我们都能够不做思想上的巨人，行动上的矮子，不要怕尴尬，从自己出发去温柔的对待每一个人，影响身边的每一个人。</p>\n"},{"layout":"post","title":"2015年小总结","date":"2016-02-14T16:00:00.000Z","_content":"\n15年就在鞭炮声中过去了，想到这一年以来，结束了学生时代，开始了职业生涯。过去的不乏有遗憾，有怀念，有不舍，有悔恨。都在我毕业时的总结了写了一写。\n\n工作以后，真的第一次感觉到了生活的不易，也开始思考自己的未来到底要如何。\n\n在之前，真是对自己未来想要的没有一点概念，觉得有一个对口岗位，通过自己的学习和努力，就可以在未来过活。但是真的到了一个岗位上你才开始思考，开始盘算，开始权衡利弊。在兴趣和工资上选择，在环境和发展上选择。\n\n当我毕业后，进入了工作的岗位，我开始觉得这个可能不是我想要的，家长会劝我在这个岗位上发展也不错，塌下心来好好干，学到本事，以后自己出来干也不错。但是我在想一辈子就那么短，我为什么要在自己本不喜欢上的事情上面虚度光阴。\n\n那你喜欢什么？我也在问自己，我到底想干什么，到底喜欢什么。其实我不知道，在哪个岗位都是从螺丝钉开始做起，哪个行业的开始都是枯燥的，重复的。只有把基本的做好才会给你发挥的空间，这个道理可能所有人都懂，我也懂，我知道所有的工作都逃不出这个道理。可是虽然我不知道我喜欢什么，但是我会知道我不喜欢什么，说起弱电，我的答案是不喜欢，我不喜欢和供应商去联系，不喜欢和甲方去沟通，不喜欢那种锁在条条框框里的感觉，更不喜欢看到未来五年后的自己是我前辈那个样子。所以我选择换一个行业试试。\n\n这里，我就要提到我的好兄弟周哥，是我最要好的玩伴了，从高中一起打dota，大学一起打dota，到了工作住到一起了继续哈哈哈，感觉我的青春就这么虚度了，因为怪自己管不住自己，曾经有个人想管我但是也没能管住，回忆不曾忘记。\n\n周哥，他自己自学了web开发，毕业后找到了在我看来还不错的工作，也在继续努力着，每天下班回来都能听到他说，卧槽我今天又学到了一个超屌的技术，以后肯定这个就是风向标\n。耳濡目染，我也在想我要不要学学这个试试？互联网是一个站在风口的行业，他相比第二产业的发展前景要更为广阔，而且这几年房地产行业低迷，附带的行业也不是很景气，不如也试试这个，正好也有人指导。就这样我就在上班空闲，下班以后和周六周日的时间开始自学。刚开始，我按照教程写了一个hello world页面，再往后我会了写一个内容更多的页面，又会了写页面的样式，又会了写简单的逻辑，又会了做一些网页的基本功能，比如弹出框啊，轮播图啊等等，进步是显而易见的，周哥也在毫无保留的教我，我很感谢他，以至于我最后换工作后工资比他都高，这是后话。\n\n当我学的感觉差不多了，在自学进步速度已经没有以前快了的时候，我打算换一个行业吧，在工作中才能更专心的学习，进步更快。所以我打算辞职换工作了，制作了一个个人页面，发了简历一个多星期了，面试电话一个没有，也许是因为年底招聘的公司变少，也许是因为我投简历是有筛选过得而不是海投，也许是因为我不是科班出身的缘故，在也许是因为我的能力确实没有达到要求。那一个多星期，我的情绪很低落和沮丧，也没有继续学习的动力了。\n\n转机出现在有一天，一个hr告诉我不好意思我的简历没有符合他们公司的要求，我很受打击，就问了一下贵公司需要的基本能力有哪些，我觉得就算这次不行，了解了解职位的具体要求也不错。我也很感谢hr盼盼姐，她详细的告诉了我一下，通过了解后我觉得我其实是合适的，我就再三要求了盼盼姐再看看我的简历，还有我的作品。可能是因为hr的工作确实很忙，她之前确实没有仔细的看我的作品，她看完我的作品后，和领导沟通后，同意我到公司聊一聊。之后也就很顺利的入职到了新公司。\n\n经过这件事情后，我很感谢当时盼盼姐可以耐心的和我沟通。也很感谢当初的自己有这个勇气去再为自己争取一下，其实我不是一个很自信的人，在被人拒绝后是会先在自己的身上找缺点而忽略了自己的优势，感谢我当初有这个勇气。我也学到了其实有些事情不应该太急，多给自己一个机会和选择，因为当我答应入职到新公司后，之后又有了自己面试通知，但是我因为很感谢第一家接纳我的公司，而放弃了本来属于我的一些机会。\n\n而我也很感谢我原来公司的师傅，他是我毕业后入职到原来公司接触最多的人，但是我在打算换工作后都没有告诉他，因为我挺不好意思的，师傅一直在耐心的指导我，而我却这样，我很愧疚觉得欠了他很多，所以刻意的避开了他直到我写辞职申请的时候。我从办辞职到办好，只用了一个下午，而知道这件事情的师傅他并没有不高兴，而是怕我有什么心里包袱而去开导我，说工作的人员流动是正常的，互联网行业比这个行业有发展挺好的，既然你有兴趣学这个应该去继续学习啊，之类的话，其实在我这里我真的是非常愧疚和尴尬心里不是滋味，因为将心比心我做的事情太小人了，东北话讲不太敞亮。经过这件事，师傅这位前辈对我也做了榜样，让我在以后资历深了如果碰到类似的情况，我也会以同样的方式去疏导他。\n\n新年后，我已经入职了新公司两个月了，从刚开始的兴趣满满，到现在的兴趣一般，凡事变成了谋生的工具，就披上一层势利的外衣。但是我也是在利益和兴趣的双驱动下继续努力的，我觉得我还是挺喜欢web前端的开发的，我也在希望以后有我一个自己作品给亿万人用，能改善人们哪怕一丝丝的生活，这样我就可以骄傲的说，看这个东西是老子做的。在工作上有多大的进步谈不上，但我也知道了很多自己的不足，在工作中我要努力的地方还有很多，这些就不一一展开了，我希望我可以在写2016年总结的时候，骄傲的说出，我没有选错，这就是我想要的工作。\n\n其实想说的还有很多，就在今天，我给一个人发红包，随机拜年红包，5.20系统自己写上了爱你~我一想挺熟的(可能我自作多情)也没啥，就直接发过去了，她回复你暴露了你的内心咯。因为熟我肯定就是顺着往下说开开玩笑呗，我说你可以考虑考虑啊~我爸都在催我了(可能是有点过分)，她就说你好会撩妹哦，非常符合双子座哦。\n\n我非常讨厌把我和星座或其他之类的东西联系起来，这样定性是武断而没有根据的，反正我从来不会评论一个人，任何时候我对一个人都不会发表自己的看法，因为我不了解。其实我是想解释一下我当时说话时的心里活动的，但是自己一想，确实是自己可能说话也没太注意(我也在想，万一开玩笑成了呢哈哈哈哈哈😂😂😭😭)，解释了反而感觉在掩饰什么，算了吧随他呢就这样吧，越解释可能越黑还不如就这么算了。\n\n其实我写了下半年的总结间接是因为这件事，我睡不着觉哈哈哈，我心眼小啊，看中别人对我的看法(不自信的表现)。所以索性来写这么一个总结，以度时间。回头想想，有时候我和一些熟悉的朋友说话确实也不是很注意，和异性朋友有时候会试探性的开玩笑，可能是因为我没有对象，这样试探也是在寻找着什么，但是也只是限于几个自认为还是比较熟而且觉得很不错的朋友上面。而这样可能也对有的人造成了困扰，这么一想，我确实有些自私，我这是以一种我并不需要承担一些什么的行为，来去试探别人。这样确实不是特别好，也许是因为我怕了，怕再付出而没有得到结果。以后自己也会注意言行，希望对别人不在造成困扰，也希望自己能勇敢。\n\n从来，感觉自己都是一个包子，面对自己喜欢的人，没有行动。怕被拒绝，怕丢面子，而错过了好多好多，也造成了现在这种局面，2016的愿望除了工作和学习上的，也会多加一条，另一半。耶稣基督曾说过，凡求得就必得到，找的就必找到，敲的就必给他开。我的另一半也许不远，就在路上，就在2016哈哈哈哈。\n","source":"_posts/2016-02-15-2015小总结.md","raw":"---\nlayout: post\ntitle: 2015年小总结\ndate: 2016-02-15\ntags: [杂事二三]\ncategories: 杂事二三\n---\n\n15年就在鞭炮声中过去了，想到这一年以来，结束了学生时代，开始了职业生涯。过去的不乏有遗憾，有怀念，有不舍，有悔恨。都在我毕业时的总结了写了一写。\n\n工作以后，真的第一次感觉到了生活的不易，也开始思考自己的未来到底要如何。\n\n在之前，真是对自己未来想要的没有一点概念，觉得有一个对口岗位，通过自己的学习和努力，就可以在未来过活。但是真的到了一个岗位上你才开始思考，开始盘算，开始权衡利弊。在兴趣和工资上选择，在环境和发展上选择。\n\n当我毕业后，进入了工作的岗位，我开始觉得这个可能不是我想要的，家长会劝我在这个岗位上发展也不错，塌下心来好好干，学到本事，以后自己出来干也不错。但是我在想一辈子就那么短，我为什么要在自己本不喜欢上的事情上面虚度光阴。\n\n那你喜欢什么？我也在问自己，我到底想干什么，到底喜欢什么。其实我不知道，在哪个岗位都是从螺丝钉开始做起，哪个行业的开始都是枯燥的，重复的。只有把基本的做好才会给你发挥的空间，这个道理可能所有人都懂，我也懂，我知道所有的工作都逃不出这个道理。可是虽然我不知道我喜欢什么，但是我会知道我不喜欢什么，说起弱电，我的答案是不喜欢，我不喜欢和供应商去联系，不喜欢和甲方去沟通，不喜欢那种锁在条条框框里的感觉，更不喜欢看到未来五年后的自己是我前辈那个样子。所以我选择换一个行业试试。\n\n这里，我就要提到我的好兄弟周哥，是我最要好的玩伴了，从高中一起打dota，大学一起打dota，到了工作住到一起了继续哈哈哈，感觉我的青春就这么虚度了，因为怪自己管不住自己，曾经有个人想管我但是也没能管住，回忆不曾忘记。\n\n周哥，他自己自学了web开发，毕业后找到了在我看来还不错的工作，也在继续努力着，每天下班回来都能听到他说，卧槽我今天又学到了一个超屌的技术，以后肯定这个就是风向标\n。耳濡目染，我也在想我要不要学学这个试试？互联网是一个站在风口的行业，他相比第二产业的发展前景要更为广阔，而且这几年房地产行业低迷，附带的行业也不是很景气，不如也试试这个，正好也有人指导。就这样我就在上班空闲，下班以后和周六周日的时间开始自学。刚开始，我按照教程写了一个hello world页面，再往后我会了写一个内容更多的页面，又会了写页面的样式，又会了写简单的逻辑，又会了做一些网页的基本功能，比如弹出框啊，轮播图啊等等，进步是显而易见的，周哥也在毫无保留的教我，我很感谢他，以至于我最后换工作后工资比他都高，这是后话。\n\n当我学的感觉差不多了，在自学进步速度已经没有以前快了的时候，我打算换一个行业吧，在工作中才能更专心的学习，进步更快。所以我打算辞职换工作了，制作了一个个人页面，发了简历一个多星期了，面试电话一个没有，也许是因为年底招聘的公司变少，也许是因为我投简历是有筛选过得而不是海投，也许是因为我不是科班出身的缘故，在也许是因为我的能力确实没有达到要求。那一个多星期，我的情绪很低落和沮丧，也没有继续学习的动力了。\n\n转机出现在有一天，一个hr告诉我不好意思我的简历没有符合他们公司的要求，我很受打击，就问了一下贵公司需要的基本能力有哪些，我觉得就算这次不行，了解了解职位的具体要求也不错。我也很感谢hr盼盼姐，她详细的告诉了我一下，通过了解后我觉得我其实是合适的，我就再三要求了盼盼姐再看看我的简历，还有我的作品。可能是因为hr的工作确实很忙，她之前确实没有仔细的看我的作品，她看完我的作品后，和领导沟通后，同意我到公司聊一聊。之后也就很顺利的入职到了新公司。\n\n经过这件事情后，我很感谢当时盼盼姐可以耐心的和我沟通。也很感谢当初的自己有这个勇气去再为自己争取一下，其实我不是一个很自信的人，在被人拒绝后是会先在自己的身上找缺点而忽略了自己的优势，感谢我当初有这个勇气。我也学到了其实有些事情不应该太急，多给自己一个机会和选择，因为当我答应入职到新公司后，之后又有了自己面试通知，但是我因为很感谢第一家接纳我的公司，而放弃了本来属于我的一些机会。\n\n而我也很感谢我原来公司的师傅，他是我毕业后入职到原来公司接触最多的人，但是我在打算换工作后都没有告诉他，因为我挺不好意思的，师傅一直在耐心的指导我，而我却这样，我很愧疚觉得欠了他很多，所以刻意的避开了他直到我写辞职申请的时候。我从办辞职到办好，只用了一个下午，而知道这件事情的师傅他并没有不高兴，而是怕我有什么心里包袱而去开导我，说工作的人员流动是正常的，互联网行业比这个行业有发展挺好的，既然你有兴趣学这个应该去继续学习啊，之类的话，其实在我这里我真的是非常愧疚和尴尬心里不是滋味，因为将心比心我做的事情太小人了，东北话讲不太敞亮。经过这件事，师傅这位前辈对我也做了榜样，让我在以后资历深了如果碰到类似的情况，我也会以同样的方式去疏导他。\n\n新年后，我已经入职了新公司两个月了，从刚开始的兴趣满满，到现在的兴趣一般，凡事变成了谋生的工具，就披上一层势利的外衣。但是我也是在利益和兴趣的双驱动下继续努力的，我觉得我还是挺喜欢web前端的开发的，我也在希望以后有我一个自己作品给亿万人用，能改善人们哪怕一丝丝的生活，这样我就可以骄傲的说，看这个东西是老子做的。在工作上有多大的进步谈不上，但我也知道了很多自己的不足，在工作中我要努力的地方还有很多，这些就不一一展开了，我希望我可以在写2016年总结的时候，骄傲的说出，我没有选错，这就是我想要的工作。\n\n其实想说的还有很多，就在今天，我给一个人发红包，随机拜年红包，5.20系统自己写上了爱你~我一想挺熟的(可能我自作多情)也没啥，就直接发过去了，她回复你暴露了你的内心咯。因为熟我肯定就是顺着往下说开开玩笑呗，我说你可以考虑考虑啊~我爸都在催我了(可能是有点过分)，她就说你好会撩妹哦，非常符合双子座哦。\n\n我非常讨厌把我和星座或其他之类的东西联系起来，这样定性是武断而没有根据的，反正我从来不会评论一个人，任何时候我对一个人都不会发表自己的看法，因为我不了解。其实我是想解释一下我当时说话时的心里活动的，但是自己一想，确实是自己可能说话也没太注意(我也在想，万一开玩笑成了呢哈哈哈哈哈😂😂😭😭)，解释了反而感觉在掩饰什么，算了吧随他呢就这样吧，越解释可能越黑还不如就这么算了。\n\n其实我写了下半年的总结间接是因为这件事，我睡不着觉哈哈哈，我心眼小啊，看中别人对我的看法(不自信的表现)。所以索性来写这么一个总结，以度时间。回头想想，有时候我和一些熟悉的朋友说话确实也不是很注意，和异性朋友有时候会试探性的开玩笑，可能是因为我没有对象，这样试探也是在寻找着什么，但是也只是限于几个自认为还是比较熟而且觉得很不错的朋友上面。而这样可能也对有的人造成了困扰，这么一想，我确实有些自私，我这是以一种我并不需要承担一些什么的行为，来去试探别人。这样确实不是特别好，也许是因为我怕了，怕再付出而没有得到结果。以后自己也会注意言行，希望对别人不在造成困扰，也希望自己能勇敢。\n\n从来，感觉自己都是一个包子，面对自己喜欢的人，没有行动。怕被拒绝，怕丢面子，而错过了好多好多，也造成了现在这种局面，2016的愿望除了工作和学习上的，也会多加一条，另一半。耶稣基督曾说过，凡求得就必得到，找的就必找到，敲的就必给他开。我的另一半也许不远，就在路上，就在2016哈哈哈哈。\n","slug":"2015小总结","published":1,"updated":"2016-03-24T09:21:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfl000tdk5nk0qkxwns","content":"<p>15年就在鞭炮声中过去了，想到这一年以来，结束了学生时代，开始了职业生涯。过去的不乏有遗憾，有怀念，有不舍，有悔恨。都在我毕业时的总结了写了一写。</p>\n<p>工作以后，真的第一次感觉到了生活的不易，也开始思考自己的未来到底要如何。</p>\n<p>在之前，真是对自己未来想要的没有一点概念，觉得有一个对口岗位，通过自己的学习和努力，就可以在未来过活。但是真的到了一个岗位上你才开始思考，开始盘算，开始权衡利弊。在兴趣和工资上选择，在环境和发展上选择。</p>\n<p>当我毕业后，进入了工作的岗位，我开始觉得这个可能不是我想要的，家长会劝我在这个岗位上发展也不错，塌下心来好好干，学到本事，以后自己出来干也不错。但是我在想一辈子就那么短，我为什么要在自己本不喜欢上的事情上面虚度光阴。</p>\n<p>那你喜欢什么？我也在问自己，我到底想干什么，到底喜欢什么。其实我不知道，在哪个岗位都是从螺丝钉开始做起，哪个行业的开始都是枯燥的，重复的。只有把基本的做好才会给你发挥的空间，这个道理可能所有人都懂，我也懂，我知道所有的工作都逃不出这个道理。可是虽然我不知道我喜欢什么，但是我会知道我不喜欢什么，说起弱电，我的答案是不喜欢，我不喜欢和供应商去联系，不喜欢和甲方去沟通，不喜欢那种锁在条条框框里的感觉，更不喜欢看到未来五年后的自己是我前辈那个样子。所以我选择换一个行业试试。</p>\n<p>这里，我就要提到我的好兄弟周哥，是我最要好的玩伴了，从高中一起打dota，大学一起打dota，到了工作住到一起了继续哈哈哈，感觉我的青春就这么虚度了，因为怪自己管不住自己，曾经有个人想管我但是也没能管住，回忆不曾忘记。</p>\n<p>周哥，他自己自学了web开发，毕业后找到了在我看来还不错的工作，也在继续努力着，每天下班回来都能听到他说，卧槽我今天又学到了一个超屌的技术，以后肯定这个就是风向标<br>。耳濡目染，我也在想我要不要学学这个试试？互联网是一个站在风口的行业，他相比第二产业的发展前景要更为广阔，而且这几年房地产行业低迷，附带的行业也不是很景气，不如也试试这个，正好也有人指导。就这样我就在上班空闲，下班以后和周六周日的时间开始自学。刚开始，我按照教程写了一个hello world页面，再往后我会了写一个内容更多的页面，又会了写页面的样式，又会了写简单的逻辑，又会了做一些网页的基本功能，比如弹出框啊，轮播图啊等等，进步是显而易见的，周哥也在毫无保留的教我，我很感谢他，以至于我最后换工作后工资比他都高，这是后话。</p>\n<p>当我学的感觉差不多了，在自学进步速度已经没有以前快了的时候，我打算换一个行业吧，在工作中才能更专心的学习，进步更快。所以我打算辞职换工作了，制作了一个个人页面，发了简历一个多星期了，面试电话一个没有，也许是因为年底招聘的公司变少，也许是因为我投简历是有筛选过得而不是海投，也许是因为我不是科班出身的缘故，在也许是因为我的能力确实没有达到要求。那一个多星期，我的情绪很低落和沮丧，也没有继续学习的动力了。</p>\n<p>转机出现在有一天，一个hr告诉我不好意思我的简历没有符合他们公司的要求，我很受打击，就问了一下贵公司需要的基本能力有哪些，我觉得就算这次不行，了解了解职位的具体要求也不错。我也很感谢hr盼盼姐，她详细的告诉了我一下，通过了解后我觉得我其实是合适的，我就再三要求了盼盼姐再看看我的简历，还有我的作品。可能是因为hr的工作确实很忙，她之前确实没有仔细的看我的作品，她看完我的作品后，和领导沟通后，同意我到公司聊一聊。之后也就很顺利的入职到了新公司。</p>\n<p>经过这件事情后，我很感谢当时盼盼姐可以耐心的和我沟通。也很感谢当初的自己有这个勇气去再为自己争取一下，其实我不是一个很自信的人，在被人拒绝后是会先在自己的身上找缺点而忽略了自己的优势，感谢我当初有这个勇气。我也学到了其实有些事情不应该太急，多给自己一个机会和选择，因为当我答应入职到新公司后，之后又有了自己面试通知，但是我因为很感谢第一家接纳我的公司，而放弃了本来属于我的一些机会。</p>\n<p>而我也很感谢我原来公司的师傅，他是我毕业后入职到原来公司接触最多的人，但是我在打算换工作后都没有告诉他，因为我挺不好意思的，师傅一直在耐心的指导我，而我却这样，我很愧疚觉得欠了他很多，所以刻意的避开了他直到我写辞职申请的时候。我从办辞职到办好，只用了一个下午，而知道这件事情的师傅他并没有不高兴，而是怕我有什么心里包袱而去开导我，说工作的人员流动是正常的，互联网行业比这个行业有发展挺好的，既然你有兴趣学这个应该去继续学习啊，之类的话，其实在我这里我真的是非常愧疚和尴尬心里不是滋味，因为将心比心我做的事情太小人了，东北话讲不太敞亮。经过这件事，师傅这位前辈对我也做了榜样，让我在以后资历深了如果碰到类似的情况，我也会以同样的方式去疏导他。</p>\n<p>新年后，我已经入职了新公司两个月了，从刚开始的兴趣满满，到现在的兴趣一般，凡事变成了谋生的工具，就披上一层势利的外衣。但是我也是在利益和兴趣的双驱动下继续努力的，我觉得我还是挺喜欢web前端的开发的，我也在希望以后有我一个自己作品给亿万人用，能改善人们哪怕一丝丝的生活，这样我就可以骄傲的说，看这个东西是老子做的。在工作上有多大的进步谈不上，但我也知道了很多自己的不足，在工作中我要努力的地方还有很多，这些就不一一展开了，我希望我可以在写2016年总结的时候，骄傲的说出，我没有选错，这就是我想要的工作。</p>\n<p>其实想说的还有很多，就在今天，我给一个人发红包，随机拜年红包，5.20系统自己写上了爱你~我一想挺熟的(可能我自作多情)也没啥，就直接发过去了，她回复你暴露了你的内心咯。因为熟我肯定就是顺着往下说开开玩笑呗，我说你可以考虑考虑啊~我爸都在催我了(可能是有点过分)，她就说你好会撩妹哦，非常符合双子座哦。</p>\n<p>我非常讨厌把我和星座或其他之类的东西联系起来，这样定性是武断而没有根据的，反正我从来不会评论一个人，任何时候我对一个人都不会发表自己的看法，因为我不了解。其实我是想解释一下我当时说话时的心里活动的，但是自己一想，确实是自己可能说话也没太注意(我也在想，万一开玩笑成了呢哈哈哈哈哈😂😂😭😭)，解释了反而感觉在掩饰什么，算了吧随他呢就这样吧，越解释可能越黑还不如就这么算了。</p>\n<p>其实我写了下半年的总结间接是因为这件事，我睡不着觉哈哈哈，我心眼小啊，看中别人对我的看法(不自信的表现)。所以索性来写这么一个总结，以度时间。回头想想，有时候我和一些熟悉的朋友说话确实也不是很注意，和异性朋友有时候会试探性的开玩笑，可能是因为我没有对象，这样试探也是在寻找着什么，但是也只是限于几个自认为还是比较熟而且觉得很不错的朋友上面。而这样可能也对有的人造成了困扰，这么一想，我确实有些自私，我这是以一种我并不需要承担一些什么的行为，来去试探别人。这样确实不是特别好，也许是因为我怕了，怕再付出而没有得到结果。以后自己也会注意言行，希望对别人不在造成困扰，也希望自己能勇敢。</p>\n<p>从来，感觉自己都是一个包子，面对自己喜欢的人，没有行动。怕被拒绝，怕丢面子，而错过了好多好多，也造成了现在这种局面，2016的愿望除了工作和学习上的，也会多加一条，另一半。耶稣基督曾说过，凡求得就必得到，找的就必找到，敲的就必给他开。我的另一半也许不远，就在路上，就在2016哈哈哈哈。</p>\n","excerpt":"","more":"<p>15年就在鞭炮声中过去了，想到这一年以来，结束了学生时代，开始了职业生涯。过去的不乏有遗憾，有怀念，有不舍，有悔恨。都在我毕业时的总结了写了一写。</p>\n<p>工作以后，真的第一次感觉到了生活的不易，也开始思考自己的未来到底要如何。</p>\n<p>在之前，真是对自己未来想要的没有一点概念，觉得有一个对口岗位，通过自己的学习和努力，就可以在未来过活。但是真的到了一个岗位上你才开始思考，开始盘算，开始权衡利弊。在兴趣和工资上选择，在环境和发展上选择。</p>\n<p>当我毕业后，进入了工作的岗位，我开始觉得这个可能不是我想要的，家长会劝我在这个岗位上发展也不错，塌下心来好好干，学到本事，以后自己出来干也不错。但是我在想一辈子就那么短，我为什么要在自己本不喜欢上的事情上面虚度光阴。</p>\n<p>那你喜欢什么？我也在问自己，我到底想干什么，到底喜欢什么。其实我不知道，在哪个岗位都是从螺丝钉开始做起，哪个行业的开始都是枯燥的，重复的。只有把基本的做好才会给你发挥的空间，这个道理可能所有人都懂，我也懂，我知道所有的工作都逃不出这个道理。可是虽然我不知道我喜欢什么，但是我会知道我不喜欢什么，说起弱电，我的答案是不喜欢，我不喜欢和供应商去联系，不喜欢和甲方去沟通，不喜欢那种锁在条条框框里的感觉，更不喜欢看到未来五年后的自己是我前辈那个样子。所以我选择换一个行业试试。</p>\n<p>这里，我就要提到我的好兄弟周哥，是我最要好的玩伴了，从高中一起打dota，大学一起打dota，到了工作住到一起了继续哈哈哈，感觉我的青春就这么虚度了，因为怪自己管不住自己，曾经有个人想管我但是也没能管住，回忆不曾忘记。</p>\n<p>周哥，他自己自学了web开发，毕业后找到了在我看来还不错的工作，也在继续努力着，每天下班回来都能听到他说，卧槽我今天又学到了一个超屌的技术，以后肯定这个就是风向标<br>。耳濡目染，我也在想我要不要学学这个试试？互联网是一个站在风口的行业，他相比第二产业的发展前景要更为广阔，而且这几年房地产行业低迷，附带的行业也不是很景气，不如也试试这个，正好也有人指导。就这样我就在上班空闲，下班以后和周六周日的时间开始自学。刚开始，我按照教程写了一个hello world页面，再往后我会了写一个内容更多的页面，又会了写页面的样式，又会了写简单的逻辑，又会了做一些网页的基本功能，比如弹出框啊，轮播图啊等等，进步是显而易见的，周哥也在毫无保留的教我，我很感谢他，以至于我最后换工作后工资比他都高，这是后话。</p>\n<p>当我学的感觉差不多了，在自学进步速度已经没有以前快了的时候，我打算换一个行业吧，在工作中才能更专心的学习，进步更快。所以我打算辞职换工作了，制作了一个个人页面，发了简历一个多星期了，面试电话一个没有，也许是因为年底招聘的公司变少，也许是因为我投简历是有筛选过得而不是海投，也许是因为我不是科班出身的缘故，在也许是因为我的能力确实没有达到要求。那一个多星期，我的情绪很低落和沮丧，也没有继续学习的动力了。</p>\n<p>转机出现在有一天，一个hr告诉我不好意思我的简历没有符合他们公司的要求，我很受打击，就问了一下贵公司需要的基本能力有哪些，我觉得就算这次不行，了解了解职位的具体要求也不错。我也很感谢hr盼盼姐，她详细的告诉了我一下，通过了解后我觉得我其实是合适的，我就再三要求了盼盼姐再看看我的简历，还有我的作品。可能是因为hr的工作确实很忙，她之前确实没有仔细的看我的作品，她看完我的作品后，和领导沟通后，同意我到公司聊一聊。之后也就很顺利的入职到了新公司。</p>\n<p>经过这件事情后，我很感谢当时盼盼姐可以耐心的和我沟通。也很感谢当初的自己有这个勇气去再为自己争取一下，其实我不是一个很自信的人，在被人拒绝后是会先在自己的身上找缺点而忽略了自己的优势，感谢我当初有这个勇气。我也学到了其实有些事情不应该太急，多给自己一个机会和选择，因为当我答应入职到新公司后，之后又有了自己面试通知，但是我因为很感谢第一家接纳我的公司，而放弃了本来属于我的一些机会。</p>\n<p>而我也很感谢我原来公司的师傅，他是我毕业后入职到原来公司接触最多的人，但是我在打算换工作后都没有告诉他，因为我挺不好意思的，师傅一直在耐心的指导我，而我却这样，我很愧疚觉得欠了他很多，所以刻意的避开了他直到我写辞职申请的时候。我从办辞职到办好，只用了一个下午，而知道这件事情的师傅他并没有不高兴，而是怕我有什么心里包袱而去开导我，说工作的人员流动是正常的，互联网行业比这个行业有发展挺好的，既然你有兴趣学这个应该去继续学习啊，之类的话，其实在我这里我真的是非常愧疚和尴尬心里不是滋味，因为将心比心我做的事情太小人了，东北话讲不太敞亮。经过这件事，师傅这位前辈对我也做了榜样，让我在以后资历深了如果碰到类似的情况，我也会以同样的方式去疏导他。</p>\n<p>新年后，我已经入职了新公司两个月了，从刚开始的兴趣满满，到现在的兴趣一般，凡事变成了谋生的工具，就披上一层势利的外衣。但是我也是在利益和兴趣的双驱动下继续努力的，我觉得我还是挺喜欢web前端的开发的，我也在希望以后有我一个自己作品给亿万人用，能改善人们哪怕一丝丝的生活，这样我就可以骄傲的说，看这个东西是老子做的。在工作上有多大的进步谈不上，但我也知道了很多自己的不足，在工作中我要努力的地方还有很多，这些就不一一展开了，我希望我可以在写2016年总结的时候，骄傲的说出，我没有选错，这就是我想要的工作。</p>\n<p>其实想说的还有很多，就在今天，我给一个人发红包，随机拜年红包，5.20系统自己写上了爱你~我一想挺熟的(可能我自作多情)也没啥，就直接发过去了，她回复你暴露了你的内心咯。因为熟我肯定就是顺着往下说开开玩笑呗，我说你可以考虑考虑啊~我爸都在催我了(可能是有点过分)，她就说你好会撩妹哦，非常符合双子座哦。</p>\n<p>我非常讨厌把我和星座或其他之类的东西联系起来，这样定性是武断而没有根据的，反正我从来不会评论一个人，任何时候我对一个人都不会发表自己的看法，因为我不了解。其实我是想解释一下我当时说话时的心里活动的，但是自己一想，确实是自己可能说话也没太注意(我也在想，万一开玩笑成了呢哈哈哈哈哈😂😂😭😭)，解释了反而感觉在掩饰什么，算了吧随他呢就这样吧，越解释可能越黑还不如就这么算了。</p>\n<p>其实我写了下半年的总结间接是因为这件事，我睡不着觉哈哈哈，我心眼小啊，看中别人对我的看法(不自信的表现)。所以索性来写这么一个总结，以度时间。回头想想，有时候我和一些熟悉的朋友说话确实也不是很注意，和异性朋友有时候会试探性的开玩笑，可能是因为我没有对象，这样试探也是在寻找着什么，但是也只是限于几个自认为还是比较熟而且觉得很不错的朋友上面。而这样可能也对有的人造成了困扰，这么一想，我确实有些自私，我这是以一种我并不需要承担一些什么的行为，来去试探别人。这样确实不是特别好，也许是因为我怕了，怕再付出而没有得到结果。以后自己也会注意言行，希望对别人不在造成困扰，也希望自己能勇敢。</p>\n<p>从来，感觉自己都是一个包子，面对自己喜欢的人，没有行动。怕被拒绝，怕丢面子，而错过了好多好多，也造成了现在这种局面，2016的愿望除了工作和学习上的，也会多加一条，另一半。耶稣基督曾说过，凡求得就必得到，找的就必找到，敲的就必给他开。我的另一半也许不远，就在路上，就在2016哈哈哈哈。</p>\n"},{"layout":"post","title":"日常工作总结-2016-03-10","date":"2016-03-09T16:00:00.000Z","_content":"\n\n这个星期，接到了一个红包页面的任务，逻辑方面并不是特别复杂，但是在仔细想过之后也可以实现。最让我头疼的问题是调微信的两个接口：一个是登录接口，另一个是注册JSSDK的接口，因为我从来没有接触过这个问题，所以遇到了很多的坑，这也直接导致和我配合的后台同学受到了我的拖累，调接口用了很长很长时间。\n\n首先我们先来看一下这个页面的逻辑，然后分析一下这两个接口的JS，最后说一说我碰到的一些坑和学到的东西吧。\n\n### 1.页面的逻辑\n\n首先来看一下页面的逻辑，我做了一张图，大致的逻辑就是这样，其中可以还包含着一些交互和动画方面的细节，我这里就详细阐述了。逻辑如下图：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_1.png)\n\n****\n\n\n### 2.分析接口\n\n首先，这两个接口分别是，微信授权登录的接口和注册JSSDK的接口。\n\n#### 1.微信授权登录的接口\n\n```js\n\nvar redirect_uri = 'https://marketing.qfpay.com/v1/mkw/page_obtain?share_code=' + code;\n\nvar redirect_uri = encodeURIComponent(redirect_uri);\n\nlocation.href = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxeb6e671f5571abce&redirect_uri=https://o2.qfpay.com/trade/wechat/v1/get_weixin_code&response_type=code&scope=snsapi_userinfo&state='+redirect_uri;\n\n```\n\n具体后台是怎么处理的我不是特别清楚，大概是这样，open.weixin这个登录接口，是会接收两个参数的`appid`应该是公众号的一个唯一标识，标识是授权给这个公众号登陆的，还有一个参数是`redirect_url`这个是经过微信授权后你要跳转回的链接，这个链接是跳回到后台，后台要对url进行处理后再返回给前端的页面。\n\n**这里要注意一个问题就是本来我们要对`redirect_url`这个参数进行URI编码处理，原因是因为如果不进行编码处理，url传到后台的时候可能会出现问题。**\n\n*****\n\n#### 2.JSSDK\n\n这个简单来其实就是用微信给的一些方法，来调出微信一些功能，比如分享朋友圈，发送给朋友等等。也可以根据微信给出的一些方法，来禁用掉微信的一些按钮。\n\n这也是我遇到困难最多的地方，可能是第一次接触吧，所以对其中的一些原理不是太了解，所以做了很多蠢事，再次对后台配合的同学感到抱歉啊，现在就来分析分析这个JSSDK吧。\n\n首先我们可以看一下微信的官方文档，点击[这里](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)。\n\n第一步我们暂时忽略，引入JS文件，这里要注意`http`和`https`协议要引入的JS是不一样的这里大家要注意一下。\n\n第三步，`wx.config`这个接口，我们需要先注入一些配置信息，我在这里也遇到问题，这个是我粗心没有仔细阅读文档，在`jsApiList`这个配置项当中，之后所有要调用的方法都要先通过这里注册，如果没有的话，下面的调用都是无效的。\n\n第四步，`ready`接口中可以监听各个接口的事件，比如点击哪个按钮后出发什么事件等等。（可能我说的不够准确，按我自己的理解来说）。\n\n下面来读一下代码，来总结和再次理解一下，代码是原来同事已经写好的一个一些代码，就是做JSSDK注册的。我们只要读懂，并能按实际应用来修改就好了。\n\n\n```js\n\n//这里是来发一个ajax来获取一些，这里是用了一个原生的ajax请求\n\nvar configWx = function(cb) {\n\t\t//新new了一个xhr对象\n        var xhrHttp = new XMLHttpRequest();\n        //取用get请求去访问这个接口，这个接口的作用可能是会返回一些需要wx.config的配置项\n        xhrHttp.open(\"GET\",'/v1/manage/wxjs_conf?url='+ encodeURIComponent(location.href));\n        xhrHttp.send(null);\n        xhrHttp.onreadystatechange = function() {\n        //如果服务器返回了正确而的状态码\n            if ((xhrHttp.readyState == 4) && (xhrHttp.status == 200)) {\n            //把返回的text变成一个json对象\n                var data  = JSON.parse(xhrHttp.responseText);\n                var respCode = data.respcd;\n                if (respCode === '0000') {\n                    data = data.data;\n                    data.debug = false;\n                    //这里是要调用到的所有微信的接口 必须在这里先初始化\n                    data.jsApiList = [\n                        'checkJsApi',\n                        'hideAllNonBaseMenuItem',\n                        'showMenuItems',\n                        'onMenuShareTimeline',\n                        'onMenuShareAppMessage',\n                        'onMenuShareQQ',\n                        'onMenuShareWeibo'\n                    ];\n                    //这里的shareUrl是 其他JS中\n                    data.url = shareUrl;\n                    wx.config(data);\n                    if (cb) {\n                        cb();\n                    }\n                }\n            }\n        }\n    };\n    var share = function(data) {\n        //data.appId = data.appId || 'wxeb6e671f5571abce';\n        data.desc = util.removeHtmlTab(util.escape2Html(data.desc)).substring(0, 100);\n        if (!data.isConfiged) {\n            configWx();\n        }\n        wx.ready(function() {\n            // 2. 分享接口\n            // 2.1 监听“分享给朋友”，按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareAppMessage(data);\n            // 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareTimeline(data);\n            // 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareQQ(data);\n            // 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareWeibo(data);\n            wx.hideAllNonBaseMenuItem({\n                success: function(){\n                //注意 这里因为在hideAllNonBaseMenuItem的回调里有showMenuItems接口，所以showMenuItems也必须在jsApiList中初始化。\n                    wx.showMenuItems({\n                        menuList: ['menuItem:share:appMessage']\n                    });\n                }\n            });\n        });\n    };\n    //可以自己定义分享内容接口\n    // title: '', // 分享标题\n    //desc: '', // 分享描述\n    //link: '', // 分享链接\n    //imgUrl: '', // 分享图标\n    \n    share({\n        link: shareUrl,\n        title: shareTitle,\n        desc: shareDesc,\n        imgUrl: shareIconurl\n    });\n\n```\n\n这个就是大概我在这个JSSDK中所用到的代码了，但是因为是第一次用，在修改代码的时候，出现了很多错误，这也导致了，分享的JSSDK注册的失败，在调用分享接口获取分享内容时，调用失败，等等的错误。下面我来举几个例子。\n\n首先，是我在调用接口之前，没有在`jsApiList`当中注册，这就导致调用的这个接口是不起作用的。还有当我们调`share`这个函数的时候，我们把所有所有要自定义的内容其实都写到了`data`这个对象的里面了。当时我一开始自己手贱删了`wx.onMenuShareAppMessage(data)`这个，导致再按了分享按钮之后，不能正常定义分享的内容了。之后把这个加上了但还是不起作用。这是因为我蠢，我的代码是这么写的。\n\n\n```js\n\n    wx.onMenuShareAppMessage(data);\n    // 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareTimeline(data);\n    // 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareQQ(data);\n    // 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareWeibo(data);\n\n    wx.hideAllNonBaseMenuItem({\n        success: function(){\n            wx.showMenuItems({\n                menuList: ['menuItem:share:appMessage']\n            });\n        }\n    });\n    wx.onMenuShareAppMessage({\n        success: function () {\n            $('#cover').css({display : 'none'});\n        },\n        trigger : function(){\n            $('#cover').css({display : 'none'});\n        },\n    });\n    \n```\n\n\n不知道大家看没看出来问题。我原意是想，在定义了分享内容的同时，来监听一下这个按钮，如果确认分享以后，我执行回调函数，把引导分享的遮罩层隐藏掉。但是这里问题出现了，我很想当然的觉得这么写没有问题，但如果两次来调用这个接口，其实第一次调用时的赋值就被覆盖了。所以我不能正常的自定义分享内容了。\n\n那应该怎么写呢？应该这样，把这个也写到data对象当中。\n\n```js\n\nshare({\n        link: shareUrl,\n        title: shareTitle,\n        desc: shareDesc,\n        imgUrl: shareIconurl,\n        success : function(){\n        \t\t//回调\n        },\n        trigger : function(){\n        \t\t//回调\n        }\n    });\n\n```\n\n如上代码，就可以完成这个功能了。\n\n其实我觉得呢，调用这些接口都是一个熟练功，第一次可能会出现很多问题，但是越用就会越熟悉，我觉得在我下次再调用这个接口的时候，我该不会出现这些低级的问题了。（话说我觉得我计算机基础真的很差）。\n\n******\n\n### 3. 这次项目遇到的一些坑\n\n这次的坑我觉得有两个：\n\n#### 1. translate3d 位移后会占据空间\n\n这个问题和需求是有关系的，红包要求上下打开，我使用的就是`translate3d`配合`animation`来实现的，一般在css中动画不要用`position`的位移，因为如果手机性能不好的话，动画会很卡。所以都会用`translate`、`transform`、`animation`配合来用。但是我发现了，`translate`之后的部分，是会占据空间的。这个导致我的红包上下打开之后，下面会把页面撑的很长，即使在我页面下面没有内容的时候，依旧会留下很大的空白。\n\n我解决的本法是，用了一种变通的方法。\n\n```js\n\n@keyframes downward {\n  0% {-webkit-transform:translate3d(0,0,0); transform:translate3d(0,0,0); display: none; opacity: 1;}\n  99% {-webkit-transform:translate3d(0,15.3333rem,0); transform:translate3d(0,15.3333rem,0); display: none; opacity: 0.5;}\n  100%{-webkit-transform:translate3d(0,-20.3333rem,0); transform: translate3d(0,-20.3333rem,0); display: none; opacity: 0;}\n\n```\n\n如上代码所示，因为我发现，在页面的上边超出的部分是不会使页面变化的，所以我在动画结束之前，把向下移动的部分，变成透明并快速移到页面的上方。这样视觉上并不会有变化，也能解决这个问题，但是我觉得这始终是个投机取巧的办法。但是因为我上网没有搜索到答案，和问题的根源，所以最后用了这种折中的方法。\n\n*******\n\n#### 2. iOS微信不能识别二维码的问题\n\n这个问题在安卓手机上是不存在的，之后再iOS中会存在。网上搜索了一下解决办法，但是说的那些问题可能微信官方其实已经解决了，所以我试了那些办法都没有成功。我不知道产生的原因是什么，但是加上这个meta标签确实是可以识别二维码了。`<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0,user-scalable=no\"/>`。\n\n还学到了一些经验吧，在不同环境测试的时候，需要配置的域名都是不一样的，所以在切换环境的时候，如果你配置的域名是写死的，那等到切换环境的时候是非常辛苦而且容易出错的。就拿昨天的上线来说，我真是对和自己配合的后台小伙伴感到抱歉，因为我经验的不足，从线上测到线下。。。。来回切环境，结果就是域名得来回改。\n\n下次我知道了，应该把需要配置的参数，写到一个对象里面，改的时候直接改这个对象就可以了，而不用在所有代码中来回改。。。。只能说我太年轻了。。。哎悲剧死了。。。。。\n\n问题差不多就这么多总结完了，回家睡觉。\n\n\n\n\n","source":"_posts/2016-03-10-工作总结.md","raw":"---\nlayout: post\ntitle: 日常工作总结-2016-03-10\ndate: 2016-03-10\ntags: [JSSDK,iOS微信二维码]\ncategories: 工作总结\n---\n\n\n这个星期，接到了一个红包页面的任务，逻辑方面并不是特别复杂，但是在仔细想过之后也可以实现。最让我头疼的问题是调微信的两个接口：一个是登录接口，另一个是注册JSSDK的接口，因为我从来没有接触过这个问题，所以遇到了很多的坑，这也直接导致和我配合的后台同学受到了我的拖累，调接口用了很长很长时间。\n\n首先我们先来看一下这个页面的逻辑，然后分析一下这两个接口的JS，最后说一说我碰到的一些坑和学到的东西吧。\n\n### 1.页面的逻辑\n\n首先来看一下页面的逻辑，我做了一张图，大致的逻辑就是这样，其中可以还包含着一些交互和动画方面的细节，我这里就详细阐述了。逻辑如下图：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_1.png)\n\n****\n\n\n### 2.分析接口\n\n首先，这两个接口分别是，微信授权登录的接口和注册JSSDK的接口。\n\n#### 1.微信授权登录的接口\n\n```js\n\nvar redirect_uri = 'https://marketing.qfpay.com/v1/mkw/page_obtain?share_code=' + code;\n\nvar redirect_uri = encodeURIComponent(redirect_uri);\n\nlocation.href = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxeb6e671f5571abce&redirect_uri=https://o2.qfpay.com/trade/wechat/v1/get_weixin_code&response_type=code&scope=snsapi_userinfo&state='+redirect_uri;\n\n```\n\n具体后台是怎么处理的我不是特别清楚，大概是这样，open.weixin这个登录接口，是会接收两个参数的`appid`应该是公众号的一个唯一标识，标识是授权给这个公众号登陆的，还有一个参数是`redirect_url`这个是经过微信授权后你要跳转回的链接，这个链接是跳回到后台，后台要对url进行处理后再返回给前端的页面。\n\n**这里要注意一个问题就是本来我们要对`redirect_url`这个参数进行URI编码处理，原因是因为如果不进行编码处理，url传到后台的时候可能会出现问题。**\n\n*****\n\n#### 2.JSSDK\n\n这个简单来其实就是用微信给的一些方法，来调出微信一些功能，比如分享朋友圈，发送给朋友等等。也可以根据微信给出的一些方法，来禁用掉微信的一些按钮。\n\n这也是我遇到困难最多的地方，可能是第一次接触吧，所以对其中的一些原理不是太了解，所以做了很多蠢事，再次对后台配合的同学感到抱歉啊，现在就来分析分析这个JSSDK吧。\n\n首先我们可以看一下微信的官方文档，点击[这里](http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html)。\n\n第一步我们暂时忽略，引入JS文件，这里要注意`http`和`https`协议要引入的JS是不一样的这里大家要注意一下。\n\n第三步，`wx.config`这个接口，我们需要先注入一些配置信息，我在这里也遇到问题，这个是我粗心没有仔细阅读文档，在`jsApiList`这个配置项当中，之后所有要调用的方法都要先通过这里注册，如果没有的话，下面的调用都是无效的。\n\n第四步，`ready`接口中可以监听各个接口的事件，比如点击哪个按钮后出发什么事件等等。（可能我说的不够准确，按我自己的理解来说）。\n\n下面来读一下代码，来总结和再次理解一下，代码是原来同事已经写好的一个一些代码，就是做JSSDK注册的。我们只要读懂，并能按实际应用来修改就好了。\n\n\n```js\n\n//这里是来发一个ajax来获取一些，这里是用了一个原生的ajax请求\n\nvar configWx = function(cb) {\n\t\t//新new了一个xhr对象\n        var xhrHttp = new XMLHttpRequest();\n        //取用get请求去访问这个接口，这个接口的作用可能是会返回一些需要wx.config的配置项\n        xhrHttp.open(\"GET\",'/v1/manage/wxjs_conf?url='+ encodeURIComponent(location.href));\n        xhrHttp.send(null);\n        xhrHttp.onreadystatechange = function() {\n        //如果服务器返回了正确而的状态码\n            if ((xhrHttp.readyState == 4) && (xhrHttp.status == 200)) {\n            //把返回的text变成一个json对象\n                var data  = JSON.parse(xhrHttp.responseText);\n                var respCode = data.respcd;\n                if (respCode === '0000') {\n                    data = data.data;\n                    data.debug = false;\n                    //这里是要调用到的所有微信的接口 必须在这里先初始化\n                    data.jsApiList = [\n                        'checkJsApi',\n                        'hideAllNonBaseMenuItem',\n                        'showMenuItems',\n                        'onMenuShareTimeline',\n                        'onMenuShareAppMessage',\n                        'onMenuShareQQ',\n                        'onMenuShareWeibo'\n                    ];\n                    //这里的shareUrl是 其他JS中\n                    data.url = shareUrl;\n                    wx.config(data);\n                    if (cb) {\n                        cb();\n                    }\n                }\n            }\n        }\n    };\n    var share = function(data) {\n        //data.appId = data.appId || 'wxeb6e671f5571abce';\n        data.desc = util.removeHtmlTab(util.escape2Html(data.desc)).substring(0, 100);\n        if (!data.isConfiged) {\n            configWx();\n        }\n        wx.ready(function() {\n            // 2. 分享接口\n            // 2.1 监听“分享给朋友”，按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareAppMessage(data);\n            // 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareTimeline(data);\n            // 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareQQ(data);\n            // 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口\n            wx.onMenuShareWeibo(data);\n            wx.hideAllNonBaseMenuItem({\n                success: function(){\n                //注意 这里因为在hideAllNonBaseMenuItem的回调里有showMenuItems接口，所以showMenuItems也必须在jsApiList中初始化。\n                    wx.showMenuItems({\n                        menuList: ['menuItem:share:appMessage']\n                    });\n                }\n            });\n        });\n    };\n    //可以自己定义分享内容接口\n    // title: '', // 分享标题\n    //desc: '', // 分享描述\n    //link: '', // 分享链接\n    //imgUrl: '', // 分享图标\n    \n    share({\n        link: shareUrl,\n        title: shareTitle,\n        desc: shareDesc,\n        imgUrl: shareIconurl\n    });\n\n```\n\n这个就是大概我在这个JSSDK中所用到的代码了，但是因为是第一次用，在修改代码的时候，出现了很多错误，这也导致了，分享的JSSDK注册的失败，在调用分享接口获取分享内容时，调用失败，等等的错误。下面我来举几个例子。\n\n首先，是我在调用接口之前，没有在`jsApiList`当中注册，这就导致调用的这个接口是不起作用的。还有当我们调`share`这个函数的时候，我们把所有所有要自定义的内容其实都写到了`data`这个对象的里面了。当时我一开始自己手贱删了`wx.onMenuShareAppMessage(data)`这个，导致再按了分享按钮之后，不能正常定义分享的内容了。之后把这个加上了但还是不起作用。这是因为我蠢，我的代码是这么写的。\n\n\n```js\n\n    wx.onMenuShareAppMessage(data);\n    // 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareTimeline(data);\n    // 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareQQ(data);\n    // 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口\n    wx.onMenuShareWeibo(data);\n\n    wx.hideAllNonBaseMenuItem({\n        success: function(){\n            wx.showMenuItems({\n                menuList: ['menuItem:share:appMessage']\n            });\n        }\n    });\n    wx.onMenuShareAppMessage({\n        success: function () {\n            $('#cover').css({display : 'none'});\n        },\n        trigger : function(){\n            $('#cover').css({display : 'none'});\n        },\n    });\n    \n```\n\n\n不知道大家看没看出来问题。我原意是想，在定义了分享内容的同时，来监听一下这个按钮，如果确认分享以后，我执行回调函数，把引导分享的遮罩层隐藏掉。但是这里问题出现了，我很想当然的觉得这么写没有问题，但如果两次来调用这个接口，其实第一次调用时的赋值就被覆盖了。所以我不能正常的自定义分享内容了。\n\n那应该怎么写呢？应该这样，把这个也写到data对象当中。\n\n```js\n\nshare({\n        link: shareUrl,\n        title: shareTitle,\n        desc: shareDesc,\n        imgUrl: shareIconurl,\n        success : function(){\n        \t\t//回调\n        },\n        trigger : function(){\n        \t\t//回调\n        }\n    });\n\n```\n\n如上代码，就可以完成这个功能了。\n\n其实我觉得呢，调用这些接口都是一个熟练功，第一次可能会出现很多问题，但是越用就会越熟悉，我觉得在我下次再调用这个接口的时候，我该不会出现这些低级的问题了。（话说我觉得我计算机基础真的很差）。\n\n******\n\n### 3. 这次项目遇到的一些坑\n\n这次的坑我觉得有两个：\n\n#### 1. translate3d 位移后会占据空间\n\n这个问题和需求是有关系的，红包要求上下打开，我使用的就是`translate3d`配合`animation`来实现的，一般在css中动画不要用`position`的位移，因为如果手机性能不好的话，动画会很卡。所以都会用`translate`、`transform`、`animation`配合来用。但是我发现了，`translate`之后的部分，是会占据空间的。这个导致我的红包上下打开之后，下面会把页面撑的很长，即使在我页面下面没有内容的时候，依旧会留下很大的空白。\n\n我解决的本法是，用了一种变通的方法。\n\n```js\n\n@keyframes downward {\n  0% {-webkit-transform:translate3d(0,0,0); transform:translate3d(0,0,0); display: none; opacity: 1;}\n  99% {-webkit-transform:translate3d(0,15.3333rem,0); transform:translate3d(0,15.3333rem,0); display: none; opacity: 0.5;}\n  100%{-webkit-transform:translate3d(0,-20.3333rem,0); transform: translate3d(0,-20.3333rem,0); display: none; opacity: 0;}\n\n```\n\n如上代码所示，因为我发现，在页面的上边超出的部分是不会使页面变化的，所以我在动画结束之前，把向下移动的部分，变成透明并快速移到页面的上方。这样视觉上并不会有变化，也能解决这个问题，但是我觉得这始终是个投机取巧的办法。但是因为我上网没有搜索到答案，和问题的根源，所以最后用了这种折中的方法。\n\n*******\n\n#### 2. iOS微信不能识别二维码的问题\n\n这个问题在安卓手机上是不存在的，之后再iOS中会存在。网上搜索了一下解决办法，但是说的那些问题可能微信官方其实已经解决了，所以我试了那些办法都没有成功。我不知道产生的原因是什么，但是加上这个meta标签确实是可以识别二维码了。`<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0,user-scalable=no\"/>`。\n\n还学到了一些经验吧，在不同环境测试的时候，需要配置的域名都是不一样的，所以在切换环境的时候，如果你配置的域名是写死的，那等到切换环境的时候是非常辛苦而且容易出错的。就拿昨天的上线来说，我真是对和自己配合的后台小伙伴感到抱歉，因为我经验的不足，从线上测到线下。。。。来回切环境，结果就是域名得来回改。\n\n下次我知道了，应该把需要配置的参数，写到一个对象里面，改的时候直接改这个对象就可以了，而不用在所有代码中来回改。。。。只能说我太年轻了。。。哎悲剧死了。。。。。\n\n问题差不多就这么多总结完了，回家睡觉。\n\n\n\n\n","slug":"工作总结","published":1,"updated":"2016-03-24T09:23:14.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfo000ydk5n4fe1jwye","content":"<p>这个星期，接到了一个红包页面的任务，逻辑方面并不是特别复杂，但是在仔细想过之后也可以实现。最让我头疼的问题是调微信的两个接口：一个是登录接口，另一个是注册JSSDK的接口，因为我从来没有接触过这个问题，所以遇到了很多的坑，这也直接导致和我配合的后台同学受到了我的拖累，调接口用了很长很长时间。</p>\n<p>首先我们先来看一下这个页面的逻辑，然后分析一下这两个接口的JS，最后说一说我碰到的一些坑和学到的东西吧。</p>\n<h3 id=\"1-页面的逻辑\"><a href=\"#1-页面的逻辑\" class=\"headerlink\" title=\"1.页面的逻辑\"></a>1.页面的逻辑</h3><p>首先来看一下页面的逻辑，我做了一张图，大致的逻辑就是这样，其中可以还包含着一些交互和动画方面的细节，我这里就详细阐述了。逻辑如下图：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_1.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"2-分析接口\"><a href=\"#2-分析接口\" class=\"headerlink\" title=\"2.分析接口\"></a>2.分析接口</h3><p>首先，这两个接口分别是，微信授权登录的接口和注册JSSDK的接口。</p>\n<h4 id=\"1-微信授权登录的接口\"><a href=\"#1-微信授权登录的接口\" class=\"headerlink\" title=\"1.微信授权登录的接口\"></a>1.微信授权登录的接口</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> redirect_uri = <span class=\"string\">'https://marketing.qfpay.com/v1/mkw/page_obtain?share_code='</span> + code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> redirect_uri = <span class=\"built_in\">encodeURIComponent</span>(redirect_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">location.href = <span class=\"string\">'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxeb6e671f5571abce&amp;redirect_uri=https://o2.qfpay.com/trade/wechat/v1/get_weixin_code&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state='</span>+redirect_uri;</span><br></pre></td></tr></table></figure>\n<p>具体后台是怎么处理的我不是特别清楚，大概是这样，open.weixin这个登录接口，是会接收两个参数的<code>appid</code>应该是公众号的一个唯一标识，标识是授权给这个公众号登陆的，还有一个参数是<code>redirect_url</code>这个是经过微信授权后你要跳转回的链接，这个链接是跳回到后台，后台要对url进行处理后再返回给前端的页面。</p>\n<p><strong>这里要注意一个问题就是本来我们要对<code>redirect_url</code>这个参数进行URI编码处理，原因是因为如果不进行编码处理，url传到后台的时候可能会出现问题。</strong></p>\n<hr>\n<h4 id=\"2-JSSDK\"><a href=\"#2-JSSDK\" class=\"headerlink\" title=\"2.JSSDK\"></a>2.JSSDK</h4><p>这个简单来其实就是用微信给的一些方法，来调出微信一些功能，比如分享朋友圈，发送给朋友等等。也可以根据微信给出的一些方法，来禁用掉微信的一些按钮。</p>\n<p>这也是我遇到困难最多的地方，可能是第一次接触吧，所以对其中的一些原理不是太了解，所以做了很多蠢事，再次对后台配合的同学感到抱歉啊，现在就来分析分析这个JSSDK吧。</p>\n<p>首先我们可以看一下微信的官方文档，点击<a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<p>第一步我们暂时忽略，引入JS文件，这里要注意<code>http</code>和<code>https</code>协议要引入的JS是不一样的这里大家要注意一下。</p>\n<p>第三步，<code>wx.config</code>这个接口，我们需要先注入一些配置信息，我在这里也遇到问题，这个是我粗心没有仔细阅读文档，在<code>jsApiList</code>这个配置项当中，之后所有要调用的方法都要先通过这里注册，如果没有的话，下面的调用都是无效的。</p>\n<p>第四步，<code>ready</code>接口中可以监听各个接口的事件，比如点击哪个按钮后出发什么事件等等。（可能我说的不够准确，按我自己的理解来说）。</p>\n<p>下面来读一下代码，来总结和再次理解一下，代码是原来同事已经写好的一个一些代码，就是做JSSDK注册的。我们只要读懂，并能按实际应用来修改就好了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是来发一个ajax来获取一些，这里是用了一个原生的ajax请求</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> configWx = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//新new了一个xhr对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhrHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//取用get请求去访问这个接口，这个接口的作用可能是会返回一些需要wx.config的配置项</span></span><br><span class=\"line\">        xhrHttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">'/v1/manage/wxjs_conf?url='</span>+ <span class=\"built_in\">encodeURIComponent</span>(location.href));</span><br><span class=\"line\">        xhrHttp.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        xhrHttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果服务器返回了正确而的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xhrHttp.readyState == <span class=\"number\">4</span>) &amp;&amp; (xhrHttp.status == <span class=\"number\">200</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把返回的text变成一个json对象</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> data  = <span class=\"built_in\">JSON</span>.parse(xhrHttp.responseText);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> respCode = data.respcd;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (respCode === <span class=\"string\">'0000'</span>) &#123;</span><br><span class=\"line\">                    data = data.data;</span><br><span class=\"line\">                    data.debug = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//这里是要调用到的所有微信的接口 必须在这里先初始化</span></span><br><span class=\"line\">                    data.jsApiList = [</span><br><span class=\"line\">                        <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'hideAllNonBaseMenuItem'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'showMenuItems'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareTimeline'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareQQ'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareWeibo'</span></span><br><span class=\"line\">                    ];</span><br><span class=\"line\">                    <span class=\"comment\">//这里的shareUrl是 其他JS中</span></span><br><span class=\"line\">                    data.url = shareUrl;</span><br><span class=\"line\">                    wx.config(data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">                        cb();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> share = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//data.appId = data.appId || 'wxeb6e671f5571abce';</span></span><br><span class=\"line\">        data.desc = util.removeHtmlTab(util.escape2Html(data.desc)).substring(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data.isConfiged) &#123;</span><br><span class=\"line\">            configWx();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 分享接口</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.1 监听“分享给朋友”，按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareAppMessage(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareTimeline(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareQQ(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareWeibo(data);</span><br><span class=\"line\">            wx.hideAllNonBaseMenuItem(&#123;</span><br><span class=\"line\">                success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意 这里因为在hideAllNonBaseMenuItem的回调里有showMenuItems接口，所以showMenuItems也必须在jsApiList中初始化。</span></span><br><span class=\"line\">                    wx.showMenuItems(&#123;</span><br><span class=\"line\">                        menuList: [<span class=\"string\">'menuItem:share:appMessage'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//可以自己定义分享内容接口</span></span><br><span class=\"line\">    <span class=\"comment\">// title: '', // 分享标题</span></span><br><span class=\"line\">    <span class=\"comment\">//desc: '', // 分享描述</span></span><br><span class=\"line\">    <span class=\"comment\">//link: '', // 分享链接</span></span><br><span class=\"line\">    <span class=\"comment\">//imgUrl: '', // 分享图标</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    share(&#123;</span><br><span class=\"line\">        link: shareUrl,</span><br><span class=\"line\">        title: shareTitle,</span><br><span class=\"line\">        desc: shareDesc,</span><br><span class=\"line\">        imgUrl: shareIconurl</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这个就是大概我在这个JSSDK中所用到的代码了，但是因为是第一次用，在修改代码的时候，出现了很多错误，这也导致了，分享的JSSDK注册的失败，在调用分享接口获取分享内容时，调用失败，等等的错误。下面我来举几个例子。</p>\n<p>首先，是我在调用接口之前，没有在<code>jsApiList</code>当中注册，这就导致调用的这个接口是不起作用的。还有当我们调<code>share</code>这个函数的时候，我们把所有所有要自定义的内容其实都写到了<code>data</code>这个对象的里面了。当时我一开始自己手贱删了<code>wx.onMenuShareAppMessage(data)</code>这个，导致再按了分享按钮之后，不能正常定义分享的内容了。之后把这个加上了但还是不起作用。这是因为我蠢，我的代码是这么写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wx.onMenuShareAppMessage(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareTimeline(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareQQ(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareWeibo(data);</span><br><span class=\"line\"></span><br><span class=\"line\">wx.hideAllNonBaseMenuItem(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        wx.showMenuItems(&#123;</span><br><span class=\"line\">            menuList: [<span class=\"string\">'menuItem:share:appMessage'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#cover'</span>).css(&#123;display : <span class=\"string\">'none'</span>&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trigger : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#cover'</span>).css(&#123;display : <span class=\"string\">'none'</span>&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不知道大家看没看出来问题。我原意是想，在定义了分享内容的同时，来监听一下这个按钮，如果确认分享以后，我执行回调函数，把引导分享的遮罩层隐藏掉。但是这里问题出现了，我很想当然的觉得这么写没有问题，但如果两次来调用这个接口，其实第一次调用时的赋值就被覆盖了。所以我不能正常的自定义分享内容了。</p>\n<p>那应该怎么写呢？应该这样，把这个也写到data对象当中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">share(&#123;</span><br><span class=\"line\">        link: shareUrl,</span><br><span class=\"line\">        title: shareTitle,</span><br><span class=\"line\">        desc: shareDesc,</span><br><span class=\"line\">        imgUrl: shareIconurl,</span><br><span class=\"line\">        success : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t\t<span class=\"comment\">//回调</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        trigger : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t\t<span class=\"comment\">//回调</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，就可以完成这个功能了。</p>\n<p>其实我觉得呢，调用这些接口都是一个熟练功，第一次可能会出现很多问题，但是越用就会越熟悉，我觉得在我下次再调用这个接口的时候，我该不会出现这些低级的问题了。（话说我觉得我计算机基础真的很差）。</p>\n<hr>\n<h3 id=\"3-这次项目遇到的一些坑\"><a href=\"#3-这次项目遇到的一些坑\" class=\"headerlink\" title=\"3. 这次项目遇到的一些坑\"></a>3. 这次项目遇到的一些坑</h3><p>这次的坑我觉得有两个：</p>\n<h4 id=\"1-translate3d-位移后会占据空间\"><a href=\"#1-translate3d-位移后会占据空间\" class=\"headerlink\" title=\"1. translate3d 位移后会占据空间\"></a>1. translate3d 位移后会占据空间</h4><p>这个问题和需求是有关系的，红包要求上下打开，我使用的就是<code>translate3d</code>配合<code>animation</code>来实现的，一般在css中动画不要用<code>position</code>的位移，因为如果手机性能不好的话，动画会很卡。所以都会用<code>translate</code>、<code>transform</code>、<code>animation</code>配合来用。但是我发现了，<code>translate</code>之后的部分，是会占据空间的。这个导致我的红包上下打开之后，下面会把页面撑的很长，即使在我页面下面没有内容的时候，依旧会留下很大的空白。</p>\n<p>我解决的本法是，用了一种变通的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@keyframes downward &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>% &#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"number\">99</span>% &#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">15.3333</span>rem,<span class=\"number\">0</span>); transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">15.3333</span>rem,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">0.5</span>;&#125;</span><br><span class=\"line\">  <span class=\"number\">100</span>%&#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">-20.3333</span>rem,<span class=\"number\">0</span>); transform: translate3d(<span class=\"number\">0</span>,<span class=\"number\">-20.3333</span>rem,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，因为我发现，在页面的上边超出的部分是不会使页面变化的，所以我在动画结束之前，把向下移动的部分，变成透明并快速移到页面的上方。这样视觉上并不会有变化，也能解决这个问题，但是我觉得这始终是个投机取巧的办法。但是因为我上网没有搜索到答案，和问题的根源，所以最后用了这种折中的方法。</p>\n<hr>\n<h4 id=\"2-iOS微信不能识别二维码的问题\"><a href=\"#2-iOS微信不能识别二维码的问题\" class=\"headerlink\" title=\"2. iOS微信不能识别二维码的问题\"></a>2. iOS微信不能识别二维码的问题</h4><p>这个问题在安卓手机上是不存在的，之后再iOS中会存在。网上搜索了一下解决办法，但是说的那些问题可能微信官方其实已经解决了，所以我试了那些办法都没有成功。我不知道产生的原因是什么，但是加上这个meta标签确实是可以识别二维码了。<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0,user-scalable=no&quot;/&gt;</code>。</p>\n<p>还学到了一些经验吧，在不同环境测试的时候，需要配置的域名都是不一样的，所以在切换环境的时候，如果你配置的域名是写死的，那等到切换环境的时候是非常辛苦而且容易出错的。就拿昨天的上线来说，我真是对和自己配合的后台小伙伴感到抱歉，因为我经验的不足，从线上测到线下。。。。来回切环境，结果就是域名得来回改。</p>\n<p>下次我知道了，应该把需要配置的参数，写到一个对象里面，改的时候直接改这个对象就可以了，而不用在所有代码中来回改。。。。只能说我太年轻了。。。哎悲剧死了。。。。。</p>\n<p>问题差不多就这么多总结完了，回家睡觉。</p>\n","excerpt":"","more":"<p>这个星期，接到了一个红包页面的任务，逻辑方面并不是特别复杂，但是在仔细想过之后也可以实现。最让我头疼的问题是调微信的两个接口：一个是登录接口，另一个是注册JSSDK的接口，因为我从来没有接触过这个问题，所以遇到了很多的坑，这也直接导致和我配合的后台同学受到了我的拖累，调接口用了很长很长时间。</p>\n<p>首先我们先来看一下这个页面的逻辑，然后分析一下这两个接口的JS，最后说一说我碰到的一些坑和学到的东西吧。</p>\n<h3 id=\"1-页面的逻辑\"><a href=\"#1-页面的逻辑\" class=\"headerlink\" title=\"1.页面的逻辑\"></a>1.页面的逻辑</h3><p>首先来看一下页面的逻辑，我做了一张图，大致的逻辑就是这样，其中可以还包含着一些交互和动画方面的细节，我这里就详细阐述了。逻辑如下图：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_1.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"2-分析接口\"><a href=\"#2-分析接口\" class=\"headerlink\" title=\"2.分析接口\"></a>2.分析接口</h3><p>首先，这两个接口分别是，微信授权登录的接口和注册JSSDK的接口。</p>\n<h4 id=\"1-微信授权登录的接口\"><a href=\"#1-微信授权登录的接口\" class=\"headerlink\" title=\"1.微信授权登录的接口\"></a>1.微信授权登录的接口</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> redirect_uri = <span class=\"string\">'https://marketing.qfpay.com/v1/mkw/page_obtain?share_code='</span> + code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> redirect_uri = <span class=\"built_in\">encodeURIComponent</span>(redirect_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">location.href = <span class=\"string\">'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxeb6e671f5571abce&amp;redirect_uri=https://o2.qfpay.com/trade/wechat/v1/get_weixin_code&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state='</span>+redirect_uri;</span><br></pre></td></tr></table></figure>\n<p>具体后台是怎么处理的我不是特别清楚，大概是这样，open.weixin这个登录接口，是会接收两个参数的<code>appid</code>应该是公众号的一个唯一标识，标识是授权给这个公众号登陆的，还有一个参数是<code>redirect_url</code>这个是经过微信授权后你要跳转回的链接，这个链接是跳回到后台，后台要对url进行处理后再返回给前端的页面。</p>\n<p><strong>这里要注意一个问题就是本来我们要对<code>redirect_url</code>这个参数进行URI编码处理，原因是因为如果不进行编码处理，url传到后台的时候可能会出现问题。</strong></p>\n<hr>\n<h4 id=\"2-JSSDK\"><a href=\"#2-JSSDK\" class=\"headerlink\" title=\"2.JSSDK\"></a>2.JSSDK</h4><p>这个简单来其实就是用微信给的一些方法，来调出微信一些功能，比如分享朋友圈，发送给朋友等等。也可以根据微信给出的一些方法，来禁用掉微信的一些按钮。</p>\n<p>这也是我遇到困难最多的地方，可能是第一次接触吧，所以对其中的一些原理不是太了解，所以做了很多蠢事，再次对后台配合的同学感到抱歉啊，现在就来分析分析这个JSSDK吧。</p>\n<p>首先我们可以看一下微信的官方文档，点击<a href=\"http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html\">这里</a>。</p>\n<p>第一步我们暂时忽略，引入JS文件，这里要注意<code>http</code>和<code>https</code>协议要引入的JS是不一样的这里大家要注意一下。</p>\n<p>第三步，<code>wx.config</code>这个接口，我们需要先注入一些配置信息，我在这里也遇到问题，这个是我粗心没有仔细阅读文档，在<code>jsApiList</code>这个配置项当中，之后所有要调用的方法都要先通过这里注册，如果没有的话，下面的调用都是无效的。</p>\n<p>第四步，<code>ready</code>接口中可以监听各个接口的事件，比如点击哪个按钮后出发什么事件等等。（可能我说的不够准确，按我自己的理解来说）。</p>\n<p>下面来读一下代码，来总结和再次理解一下，代码是原来同事已经写好的一个一些代码，就是做JSSDK注册的。我们只要读懂，并能按实际应用来修改就好了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是来发一个ajax来获取一些，这里是用了一个原生的ajax请求</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> configWx = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//新new了一个xhr对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhrHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        <span class=\"comment\">//取用get请求去访问这个接口，这个接口的作用可能是会返回一些需要wx.config的配置项</span></span><br><span class=\"line\">        xhrHttp.open(<span class=\"string\">\"GET\"</span>,<span class=\"string\">'/v1/manage/wxjs_conf?url='</span>+ <span class=\"built_in\">encodeURIComponent</span>(location.href));</span><br><span class=\"line\">        xhrHttp.send(<span class=\"literal\">null</span>);</span><br><span class=\"line\">        xhrHttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果服务器返回了正确而的状态码</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((xhrHttp.readyState == <span class=\"number\">4</span>) &amp;&amp; (xhrHttp.status == <span class=\"number\">200</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//把返回的text变成一个json对象</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> data  = <span class=\"built_in\">JSON</span>.parse(xhrHttp.responseText);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> respCode = data.respcd;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (respCode === <span class=\"string\">'0000'</span>) &#123;</span><br><span class=\"line\">                    data = data.data;</span><br><span class=\"line\">                    data.debug = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//这里是要调用到的所有微信的接口 必须在这里先初始化</span></span><br><span class=\"line\">                    data.jsApiList = [</span><br><span class=\"line\">                        <span class=\"string\">'checkJsApi'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'hideAllNonBaseMenuItem'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'showMenuItems'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareTimeline'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareAppMessage'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareQQ'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'onMenuShareWeibo'</span></span><br><span class=\"line\">                    ];</span><br><span class=\"line\">                    <span class=\"comment\">//这里的shareUrl是 其他JS中</span></span><br><span class=\"line\">                    data.url = shareUrl;</span><br><span class=\"line\">                    wx.config(data);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">                        cb();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> share = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//data.appId = data.appId || 'wxeb6e671f5571abce';</span></span><br><span class=\"line\">        data.desc = util.removeHtmlTab(util.escape2Html(data.desc)).substring(<span class=\"number\">0</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!data.isConfiged) &#123;</span><br><span class=\"line\">            configWx();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 分享接口</span></span><br><span class=\"line\">            <span class=\"comment\">// 2.1 监听“分享给朋友”，按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareAppMessage(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareTimeline(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareQQ(data);</span><br><span class=\"line\">            <span class=\"comment\">// 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">            wx.onMenuShareWeibo(data);</span><br><span class=\"line\">            wx.hideAllNonBaseMenuItem(&#123;</span><br><span class=\"line\">                success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意 这里因为在hideAllNonBaseMenuItem的回调里有showMenuItems接口，所以showMenuItems也必须在jsApiList中初始化。</span></span><br><span class=\"line\">                    wx.showMenuItems(&#123;</span><br><span class=\"line\">                        menuList: [<span class=\"string\">'menuItem:share:appMessage'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">//可以自己定义分享内容接口</span></span><br><span class=\"line\">    <span class=\"comment\">// title: '', // 分享标题</span></span><br><span class=\"line\">    <span class=\"comment\">//desc: '', // 分享描述</span></span><br><span class=\"line\">    <span class=\"comment\">//link: '', // 分享链接</span></span><br><span class=\"line\">    <span class=\"comment\">//imgUrl: '', // 分享图标</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    share(&#123;</span><br><span class=\"line\">        link: shareUrl,</span><br><span class=\"line\">        title: shareTitle,</span><br><span class=\"line\">        desc: shareDesc,</span><br><span class=\"line\">        imgUrl: shareIconurl</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>这个就是大概我在这个JSSDK中所用到的代码了，但是因为是第一次用，在修改代码的时候，出现了很多错误，这也导致了，分享的JSSDK注册的失败，在调用分享接口获取分享内容时，调用失败，等等的错误。下面我来举几个例子。</p>\n<p>首先，是我在调用接口之前，没有在<code>jsApiList</code>当中注册，这就导致调用的这个接口是不起作用的。还有当我们调<code>share</code>这个函数的时候，我们把所有所有要自定义的内容其实都写到了<code>data</code>这个对象的里面了。当时我一开始自己手贱删了<code>wx.onMenuShareAppMessage(data)</code>这个，导致再按了分享按钮之后，不能正常定义分享的内容了。之后把这个加上了但还是不起作用。这是因为我蠢，我的代码是这么写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wx.onMenuShareAppMessage(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.2 监听“分享到朋友圈”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareTimeline(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.3 监听“分享到QQ”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareQQ(data);</span><br><span class=\"line\"><span class=\"comment\">// 2.4 监听“分享到微博”按钮点击、自定义分享内容及分享结果接口</span></span><br><span class=\"line\">wx.onMenuShareWeibo(data);</span><br><span class=\"line\"></span><br><span class=\"line\">wx.hideAllNonBaseMenuItem(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        wx.showMenuItems(&#123;</span><br><span class=\"line\">            menuList: [<span class=\"string\">'menuItem:share:appMessage'</span>]</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">wx.onMenuShareAppMessage(&#123;</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#cover'</span>).css(&#123;display : <span class=\"string\">'none'</span>&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    trigger : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">'#cover'</span>).css(&#123;display : <span class=\"string\">'none'</span>&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>不知道大家看没看出来问题。我原意是想，在定义了分享内容的同时，来监听一下这个按钮，如果确认分享以后，我执行回调函数，把引导分享的遮罩层隐藏掉。但是这里问题出现了，我很想当然的觉得这么写没有问题，但如果两次来调用这个接口，其实第一次调用时的赋值就被覆盖了。所以我不能正常的自定义分享内容了。</p>\n<p>那应该怎么写呢？应该这样，把这个也写到data对象当中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">share(&#123;</span><br><span class=\"line\">        link: shareUrl,</span><br><span class=\"line\">        title: shareTitle,</span><br><span class=\"line\">        desc: shareDesc,</span><br><span class=\"line\">        imgUrl: shareIconurl,</span><br><span class=\"line\">        success : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t\t<span class=\"comment\">//回调</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        trigger : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t\t<span class=\"comment\">//回调</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，就可以完成这个功能了。</p>\n<p>其实我觉得呢，调用这些接口都是一个熟练功，第一次可能会出现很多问题，但是越用就会越熟悉，我觉得在我下次再调用这个接口的时候，我该不会出现这些低级的问题了。（话说我觉得我计算机基础真的很差）。</p>\n<hr>\n<h3 id=\"3-这次项目遇到的一些坑\"><a href=\"#3-这次项目遇到的一些坑\" class=\"headerlink\" title=\"3. 这次项目遇到的一些坑\"></a>3. 这次项目遇到的一些坑</h3><p>这次的坑我觉得有两个：</p>\n<h4 id=\"1-translate3d-位移后会占据空间\"><a href=\"#1-translate3d-位移后会占据空间\" class=\"headerlink\" title=\"1. translate3d 位移后会占据空间\"></a>1. translate3d 位移后会占据空间</h4><p>这个问题和需求是有关系的，红包要求上下打开，我使用的就是<code>translate3d</code>配合<code>animation</code>来实现的，一般在css中动画不要用<code>position</code>的位移，因为如果手机性能不好的话，动画会很卡。所以都会用<code>translate</code>、<code>transform</code>、<code>animation</code>配合来用。但是我发现了，<code>translate</code>之后的部分，是会占据空间的。这个导致我的红包上下打开之后，下面会把页面撑的很长，即使在我页面下面没有内容的时候，依旧会留下很大的空白。</p>\n<p>我解决的本法是，用了一种变通的方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@keyframes downward &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>% &#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">  <span class=\"number\">99</span>% &#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">15.3333</span>rem,<span class=\"number\">0</span>); transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">15.3333</span>rem,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">0.5</span>;&#125;</span><br><span class=\"line\">  <span class=\"number\">100</span>%&#123;-webkit-transform:translate3d(<span class=\"number\">0</span>,<span class=\"number\">-20.3333</span>rem,<span class=\"number\">0</span>); transform: translate3d(<span class=\"number\">0</span>,<span class=\"number\">-20.3333</span>rem,<span class=\"number\">0</span>); display: none; opacity: <span class=\"number\">0</span>;&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码所示，因为我发现，在页面的上边超出的部分是不会使页面变化的，所以我在动画结束之前，把向下移动的部分，变成透明并快速移到页面的上方。这样视觉上并不会有变化，也能解决这个问题，但是我觉得这始终是个投机取巧的办法。但是因为我上网没有搜索到答案，和问题的根源，所以最后用了这种折中的方法。</p>\n<hr>\n<h4 id=\"2-iOS微信不能识别二维码的问题\"><a href=\"#2-iOS微信不能识别二维码的问题\" class=\"headerlink\" title=\"2. iOS微信不能识别二维码的问题\"></a>2. iOS微信不能识别二维码的问题</h4><p>这个问题在安卓手机上是不存在的，之后再iOS中会存在。网上搜索了一下解决办法，但是说的那些问题可能微信官方其实已经解决了，所以我试了那些办法都没有成功。我不知道产生的原因是什么，但是加上这个meta标签确实是可以识别二维码了。<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, maximum-scale=1.0,user-scalable=no&quot;/&gt;</code>。</p>\n<p>还学到了一些经验吧，在不同环境测试的时候，需要配置的域名都是不一样的，所以在切换环境的时候，如果你配置的域名是写死的，那等到切换环境的时候是非常辛苦而且容易出错的。就拿昨天的上线来说，我真是对和自己配合的后台小伙伴感到抱歉，因为我经验的不足，从线上测到线下。。。。来回切环境，结果就是域名得来回改。</p>\n<p>下次我知道了，应该把需要配置的参数，写到一个对象里面，改的时候直接改这个对象就可以了，而不用在所有代码中来回改。。。。只能说我太年轻了。。。哎悲剧死了。。。。。</p>\n<p>问题差不多就这么多总结完了，回家睡觉。</p>\n"},{"layout":"post","title":"日常工作总结-2016-02-19","date":"2016-02-18T16:00:00.000Z","_content":"\n最近几天，在做一个类似列表的一个界面，在做的时候碰到了很多问题和总结了一些经验，在这里有必要记录一下。设计图如下：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang.jpg)\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang_detail.jpg)\n\n*****\n\n### 遇到的问题\n\n页面看起来并不复杂，可以后台返回的数据并不是很完整，所以遇到了一些问题，有的问题在我看来不是很难我这里就不再描述了（以我的水平如果觉得不难那一定是非常简单了。。。 - -），具体有以下四个问题：\n\n1. 后台返回的交易类型有三种，根据每种交易类型展示不同的图片，可以参考上面到账详情那张图片。\n2. 请看最近到账那张图片，列表的到账状态有四种，根据不同的状态展示的文字颜色需要不一样。\n3. 后台返回的金额都是以分为单位的，而页面上展示的是以元为单位的。\n4. 详情页面的有些信息后台并没有返回给你，必须从列表页面来获取这些信息运用到这个界面上。\n\n这就是遇到的几个比较让我头疼的问题，下面我来简单说一下每个问题的解决办法。\n\n******\n\n#### 1. 问题一和问题二\n\n问题一和二，其实就是模板语言上面的问题，现在加载页面有一些页面上要展示出来的数据其实是后台返回给你的。所以你要预先读取这些数据并通过浏览器渲染到你的页面上。基本做前端的同学应该都会用到模板语言，而我用的是`handlebars`这个模板语言（其实解决这个问题的办法是换一个模板语言，最后我会简单的说一下），我主要是描述一下用`handlebars`这个模板语言是怎么解决的。\n\n在`handlebars`当中的`#if`只能来做这个变量存不存在的简单判断，而不能在`if`当中加一些参数的判断，所以这里我们需要引用`handlebars helper`，在我理解这个其实就是用来补充`handlebars`中的不足的，在`handlebars helper`中可以进行一些复杂的判断，以我用的这个`helper`为例来分析一下，我这个`helper`的功能是这样的，他可以判断后台返回的一个字段的类型，如果类型是微信支付就显示微信支付的图标，如果是支付宝就显示支付宝的图标。\n\n```js\n\n//这里是注册了一个新的helper，名字叫做compare，而这个helper接受了三个参数，第一个和第二个参数是必填的，第三个参数是选填的\nHandlebars.registerHelper(\"compare\",function(v1,v2,options){\n\t //比较参数  满足条件添加继续执行\n    if(v1 == v2){\n        return options.fn(this);\n    }else{\n    //不满足条件执行{else}部分\n        return options.inverse(this);\n    }\n});\n\n```\n\n如上代码，注释写在了里面，我只想说一下`options.fn(this)`，其实这个意思就是执行下面的部分，这个部分其实不是在我们的js函数中，而是在我们引用这个`helper`的那个html页面中出现`# compare`的这个地方。看如下代码：\n\n```html\n\n//比较type是不是card\n   {#compare type 'card'}\n      <img src=\"img/ic_card.svg\" alt=\"\">\n     {else}\n      <img src=\"img/ic_weixin.svg\" alt=\"\">\n   {/compare}\n\n```\n\n如上，这个就是我在html页面的部分代码，`options.fn(this)`的功能就是执行`# compare`和`else`之间的代码。（以我浅显的理解，通俗的解释。。。。。）。\n\nPS:少写了一个花括号是因为双花括号在markdown语法中不能正常显示出来。。。。\n\n说完`handlebars`模板语言之后，我们来说另一种模板语言，`template.js`这个模板语法相比`handlebars`很轻量级，所以很适合移动端使用。他的语法和`handlebars`类似，而且他可以做一些比较复杂的逻辑判断，比如`if`判断来说他可以支持`if a > b || ( a < c && a == d )`这样的复杂判断。使用这样的模板语言，能够基本完成渲染时碰到的一些常用需求。\n\n****\n\n#### 2. 问题三\n\n后台返给我的数据是以`分`为单位的，而我要显示为以`元`为单位的并且保留两位小数，怎么办？其实这个函数是我网上搜索来的，因为我当时只是单纯的把返回的数据除以了100，这样是变成以`元`为单位了，但是没有保留两位小数。网上的具体方法是这样的：\n\n```js\n\n//分转换为元\nvar fen_yuan = function(val){\n    //toFixed来确定保留两位小数  因为除以100 所以都会整除\n    var str = (val/100).toFixed(2) + '';\n    var intSum = str.substring(0,str.indexOf(\".\")).replace( /\\B(?=(?:\\d{3})+$)/g, ',' );\n    //取到整数部分\n    var dot = str.substring(str.length,str.indexOf(\".\"))\n    //取到小数部分\n    var ret = intSum + dot;\n    return ret;\n}\n\n```\n\n如上代码，我给出了基本的注释，大家应该可以读懂，但是注意`tofixed()`这个函数会把小数点后面的部分进行四舍五入，所以不能得到精确结果。这个地方运用的因为是除以100，所以不存在不精确的问题，如果大家来使用的时候还是要参考当前的需求的。\n\n#### 3. 问题四\n\n有些时候我们在这个页面获得了一些数据，但是我们在去往下一个页面的时候还是需要这些数据而下一个页面的接口没有返回这些数据的时候怎么办？\n\n这时候就需要把我们需要的数据拼接到`url`当中，在到了下一个页面的时候，再把`url`中的参数分离出来，调用我们需要的一些参数。\n\n分离`url`参数的方法贴在下面，供大家参考。\n\n```js\n\nvar getQuery = function(){\n    var url=location.search;\n    var Request = {};\n    if(url.indexOf(\"?\")!=-1)\n    {\n        var str = url.substr(1);\n        strs = str.split(\"&\");\n        for(var i=0;i<strs.length;i++)\n        {\n            var _key = strs[i].split(\"=\")[0];\n            Request[_key]=strs[i].split(\"=\")[1];\n        }\n    }\n    return Request;\n};\n\n```\n\n如上代码，我们把`url`中`?`号部分后面的参数分离出来，组成一个对象，在需要哪个参数的时候，我们只要调用`getQuery`中对应的属性就可以了。\n\n****\n\n### 学习到的经验\n\n#### 1. 添加标识符\n\n在写`ajax`的时候，在`ajax`的不同阶段，应该设置一个标识符来进行标识，以`jquery`的`ajax`为例，比如：`beforeSend`，`success`，`complete`等等不同的阶段，对发送`ajax`的状态来进行标识。\n\n这个经验其实是这样的：我在设置下拉加载更多的时候，发现有的时候可能会发出多次请求，如果我们在程序里加上一个标识符，就可以避免这个问题的发生，如下代码：\n\n```js\n\nbeforeSend: function(){\n    loading = true;\n    },\nsuccess: function(data){\n    page += 1;\n    },\ncomplete: function(){\n    loading = false;\n    }\n\n```\n\n如上代码这个只是举一个例子，并不是全部代码，逻辑大概是这样，当页面滑到底部，就发出一个请求请求`page+1`页的数据。如果我一次下拉发出多次请求的话，在`success`中的`page`就会累加多次，出现错误。如果我们添加了标识符后，当只有`loading`结束的时候才去发送下一次请求，所以当一些特殊情况比如网络不好的情况下，下拉了多次而`ajax`还没有发送成功的时候，是不会发送第二次`ajax`请求的。这样就能避免这个问题的产生。\n\n****\n\n#### 2. 可以通过url把参数带到下一个页面\n\n这个经验在上面的问题中已经说过了，而且我还听同事介绍了，其实这种方式是最常用的一种把参数传导下一个页面的办法，虽说这种办法显得url不够优雅。。。。。\n\n****\n\n#### 3. 如果url所带的参数中有汉字怎么办\n\n在我携带参数的时候，有的参数可能是汉字，而在参数带到下一个页面后，如果调用这个参数的话，会出现乱码类似于`%E5%B7%A5%E4`这样的。其实这个不是乱码，而是浏览器所做的`encodeURI编码`，而我们所要做的就是只要把它`decodeURI`解码后，我们就可以在下一个页面中正常的使用了。\n\n****\n\n#### 4. handlebars helpers的学习\n\n这个在上文中已经做了介绍，其实`helper`还能完成一些更复杂的逻辑，大家可以多试一试，比如我在遇到判断的类型多的时候就写了一个`switch`的`helper`。\n\n以上。\n","source":"_posts/2016-02-19-工作总结.md","raw":"---\nlayout: post\ntitle: 日常工作总结-2016-02-19\ndate: 2016-02-19\ntags: [handlebars,小数点精确,url携带参数]\ncategories: 工作总结\n---\n\n最近几天，在做一个类似列表的一个界面，在做的时候碰到了很多问题和总结了一些经验，在这里有必要记录一下。设计图如下：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang.jpg)\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang_detail.jpg)\n\n*****\n\n### 遇到的问题\n\n页面看起来并不复杂，可以后台返回的数据并不是很完整，所以遇到了一些问题，有的问题在我看来不是很难我这里就不再描述了（以我的水平如果觉得不难那一定是非常简单了。。。 - -），具体有以下四个问题：\n\n1. 后台返回的交易类型有三种，根据每种交易类型展示不同的图片，可以参考上面到账详情那张图片。\n2. 请看最近到账那张图片，列表的到账状态有四种，根据不同的状态展示的文字颜色需要不一样。\n3. 后台返回的金额都是以分为单位的，而页面上展示的是以元为单位的。\n4. 详情页面的有些信息后台并没有返回给你，必须从列表页面来获取这些信息运用到这个界面上。\n\n这就是遇到的几个比较让我头疼的问题，下面我来简单说一下每个问题的解决办法。\n\n******\n\n#### 1. 问题一和问题二\n\n问题一和二，其实就是模板语言上面的问题，现在加载页面有一些页面上要展示出来的数据其实是后台返回给你的。所以你要预先读取这些数据并通过浏览器渲染到你的页面上。基本做前端的同学应该都会用到模板语言，而我用的是`handlebars`这个模板语言（其实解决这个问题的办法是换一个模板语言，最后我会简单的说一下），我主要是描述一下用`handlebars`这个模板语言是怎么解决的。\n\n在`handlebars`当中的`#if`只能来做这个变量存不存在的简单判断，而不能在`if`当中加一些参数的判断，所以这里我们需要引用`handlebars helper`，在我理解这个其实就是用来补充`handlebars`中的不足的，在`handlebars helper`中可以进行一些复杂的判断，以我用的这个`helper`为例来分析一下，我这个`helper`的功能是这样的，他可以判断后台返回的一个字段的类型，如果类型是微信支付就显示微信支付的图标，如果是支付宝就显示支付宝的图标。\n\n```js\n\n//这里是注册了一个新的helper，名字叫做compare，而这个helper接受了三个参数，第一个和第二个参数是必填的，第三个参数是选填的\nHandlebars.registerHelper(\"compare\",function(v1,v2,options){\n\t //比较参数  满足条件添加继续执行\n    if(v1 == v2){\n        return options.fn(this);\n    }else{\n    //不满足条件执行{else}部分\n        return options.inverse(this);\n    }\n});\n\n```\n\n如上代码，注释写在了里面，我只想说一下`options.fn(this)`，其实这个意思就是执行下面的部分，这个部分其实不是在我们的js函数中，而是在我们引用这个`helper`的那个html页面中出现`# compare`的这个地方。看如下代码：\n\n```html\n\n//比较type是不是card\n   {#compare type 'card'}\n      <img src=\"img/ic_card.svg\" alt=\"\">\n     {else}\n      <img src=\"img/ic_weixin.svg\" alt=\"\">\n   {/compare}\n\n```\n\n如上，这个就是我在html页面的部分代码，`options.fn(this)`的功能就是执行`# compare`和`else`之间的代码。（以我浅显的理解，通俗的解释。。。。。）。\n\nPS:少写了一个花括号是因为双花括号在markdown语法中不能正常显示出来。。。。\n\n说完`handlebars`模板语言之后，我们来说另一种模板语言，`template.js`这个模板语法相比`handlebars`很轻量级，所以很适合移动端使用。他的语法和`handlebars`类似，而且他可以做一些比较复杂的逻辑判断，比如`if`判断来说他可以支持`if a > b || ( a < c && a == d )`这样的复杂判断。使用这样的模板语言，能够基本完成渲染时碰到的一些常用需求。\n\n****\n\n#### 2. 问题三\n\n后台返给我的数据是以`分`为单位的，而我要显示为以`元`为单位的并且保留两位小数，怎么办？其实这个函数是我网上搜索来的，因为我当时只是单纯的把返回的数据除以了100，这样是变成以`元`为单位了，但是没有保留两位小数。网上的具体方法是这样的：\n\n```js\n\n//分转换为元\nvar fen_yuan = function(val){\n    //toFixed来确定保留两位小数  因为除以100 所以都会整除\n    var str = (val/100).toFixed(2) + '';\n    var intSum = str.substring(0,str.indexOf(\".\")).replace( /\\B(?=(?:\\d{3})+$)/g, ',' );\n    //取到整数部分\n    var dot = str.substring(str.length,str.indexOf(\".\"))\n    //取到小数部分\n    var ret = intSum + dot;\n    return ret;\n}\n\n```\n\n如上代码，我给出了基本的注释，大家应该可以读懂，但是注意`tofixed()`这个函数会把小数点后面的部分进行四舍五入，所以不能得到精确结果。这个地方运用的因为是除以100，所以不存在不精确的问题，如果大家来使用的时候还是要参考当前的需求的。\n\n#### 3. 问题四\n\n有些时候我们在这个页面获得了一些数据，但是我们在去往下一个页面的时候还是需要这些数据而下一个页面的接口没有返回这些数据的时候怎么办？\n\n这时候就需要把我们需要的数据拼接到`url`当中，在到了下一个页面的时候，再把`url`中的参数分离出来，调用我们需要的一些参数。\n\n分离`url`参数的方法贴在下面，供大家参考。\n\n```js\n\nvar getQuery = function(){\n    var url=location.search;\n    var Request = {};\n    if(url.indexOf(\"?\")!=-1)\n    {\n        var str = url.substr(1);\n        strs = str.split(\"&\");\n        for(var i=0;i<strs.length;i++)\n        {\n            var _key = strs[i].split(\"=\")[0];\n            Request[_key]=strs[i].split(\"=\")[1];\n        }\n    }\n    return Request;\n};\n\n```\n\n如上代码，我们把`url`中`?`号部分后面的参数分离出来，组成一个对象，在需要哪个参数的时候，我们只要调用`getQuery`中对应的属性就可以了。\n\n****\n\n### 学习到的经验\n\n#### 1. 添加标识符\n\n在写`ajax`的时候，在`ajax`的不同阶段，应该设置一个标识符来进行标识，以`jquery`的`ajax`为例，比如：`beforeSend`，`success`，`complete`等等不同的阶段，对发送`ajax`的状态来进行标识。\n\n这个经验其实是这样的：我在设置下拉加载更多的时候，发现有的时候可能会发出多次请求，如果我们在程序里加上一个标识符，就可以避免这个问题的发生，如下代码：\n\n```js\n\nbeforeSend: function(){\n    loading = true;\n    },\nsuccess: function(data){\n    page += 1;\n    },\ncomplete: function(){\n    loading = false;\n    }\n\n```\n\n如上代码这个只是举一个例子，并不是全部代码，逻辑大概是这样，当页面滑到底部，就发出一个请求请求`page+1`页的数据。如果我一次下拉发出多次请求的话，在`success`中的`page`就会累加多次，出现错误。如果我们添加了标识符后，当只有`loading`结束的时候才去发送下一次请求，所以当一些特殊情况比如网络不好的情况下，下拉了多次而`ajax`还没有发送成功的时候，是不会发送第二次`ajax`请求的。这样就能避免这个问题的产生。\n\n****\n\n#### 2. 可以通过url把参数带到下一个页面\n\n这个经验在上面的问题中已经说过了，而且我还听同事介绍了，其实这种方式是最常用的一种把参数传导下一个页面的办法，虽说这种办法显得url不够优雅。。。。。\n\n****\n\n#### 3. 如果url所带的参数中有汉字怎么办\n\n在我携带参数的时候，有的参数可能是汉字，而在参数带到下一个页面后，如果调用这个参数的话，会出现乱码类似于`%E5%B7%A5%E4`这样的。其实这个不是乱码，而是浏览器所做的`encodeURI编码`，而我们所要做的就是只要把它`decodeURI`解码后，我们就可以在下一个页面中正常的使用了。\n\n****\n\n#### 4. handlebars helpers的学习\n\n这个在上文中已经做了介绍，其实`helper`还能完成一些更复杂的逻辑，大家可以多试一试，比如我在遇到判断的类型多的时候就写了一个`switch`的`helper`。\n\n以上。\n","slug":"工作总结","published":1,"updated":"2016-03-24T09:23:13.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfr0011dk5nq1vxssfu","content":"<p>最近几天，在做一个类似列表的一个界面，在做的时候碰到了很多问题和总结了一些经验，在这里有必要记录一下。设计图如下：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang.jpg\" alt=\"\"></p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang_detail.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>页面看起来并不复杂，可以后台返回的数据并不是很完整，所以遇到了一些问题，有的问题在我看来不是很难我这里就不再描述了（以我的水平如果觉得不难那一定是非常简单了。。。 - -），具体有以下四个问题：</p>\n<ol>\n<li>后台返回的交易类型有三种，根据每种交易类型展示不同的图片，可以参考上面到账详情那张图片。</li>\n<li>请看最近到账那张图片，列表的到账状态有四种，根据不同的状态展示的文字颜色需要不一样。</li>\n<li>后台返回的金额都是以分为单位的，而页面上展示的是以元为单位的。</li>\n<li>详情页面的有些信息后台并没有返回给你，必须从列表页面来获取这些信息运用到这个界面上。</li>\n</ol>\n<p>这就是遇到的几个比较让我头疼的问题，下面我来简单说一下每个问题的解决办法。</p>\n<hr>\n<h4 id=\"1-问题一和问题二\"><a href=\"#1-问题一和问题二\" class=\"headerlink\" title=\"1. 问题一和问题二\"></a>1. 问题一和问题二</h4><p>问题一和二，其实就是模板语言上面的问题，现在加载页面有一些页面上要展示出来的数据其实是后台返回给你的。所以你要预先读取这些数据并通过浏览器渲染到你的页面上。基本做前端的同学应该都会用到模板语言，而我用的是<code>handlebars</code>这个模板语言（其实解决这个问题的办法是换一个模板语言，最后我会简单的说一下），我主要是描述一下用<code>handlebars</code>这个模板语言是怎么解决的。</p>\n<p>在<code>handlebars</code>当中的<code>#if</code>只能来做这个变量存不存在的简单判断，而不能在<code>if</code>当中加一些参数的判断，所以这里我们需要引用<code>handlebars helper</code>，在我理解这个其实就是用来补充<code>handlebars</code>中的不足的，在<code>handlebars helper</code>中可以进行一些复杂的判断，以我用的这个<code>helper</code>为例来分析一下，我这个<code>helper</code>的功能是这样的，他可以判断后台返回的一个字段的类型，如果类型是微信支付就显示微信支付的图标，如果是支付宝就显示支付宝的图标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是注册了一个新的helper，名字叫做compare，而这个helper接受了三个参数，第一个和第二个参数是必填的，第三个参数是选填的</span></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">\"compare\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2,options</span>)</span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">//比较参数  满足条件添加继续执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v1 == v2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> options.fn(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不满足条件执行&#123;else&#125;部分</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options.inverse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，注释写在了里面，我只想说一下<code>options.fn(this)</code>，其实这个意思就是执行下面的部分，这个部分其实不是在我们的js函数中，而是在我们引用这个<code>helper</code>的那个html页面中出现<code># compare</code>的这个地方。看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//比较type是不是card</span><br><span class=\"line\">   &#123;#compare type 'card'&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/ic_card.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">     &#123;else&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/ic_weixin.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   &#123;/compare&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，这个就是我在html页面的部分代码，<code>options.fn(this)</code>的功能就是执行<code># compare</code>和<code>else</code>之间的代码。（以我浅显的理解，通俗的解释。。。。。）。</p>\n<p>PS:少写了一个花括号是因为双花括号在markdown语法中不能正常显示出来。。。。</p>\n<p>说完<code>handlebars</code>模板语言之后，我们来说另一种模板语言，<code>template.js</code>这个模板语法相比<code>handlebars</code>很轻量级，所以很适合移动端使用。他的语法和<code>handlebars</code>类似，而且他可以做一些比较复杂的逻辑判断，比如<code>if</code>判断来说他可以支持<code>if a &gt; b || ( a &lt; c &amp;&amp; a == d )</code>这样的复杂判断。使用这样的模板语言，能够基本完成渲染时碰到的一些常用需求。</p>\n<hr>\n<h4 id=\"2-问题三\"><a href=\"#2-问题三\" class=\"headerlink\" title=\"2. 问题三\"></a>2. 问题三</h4><p>后台返给我的数据是以<code>分</code>为单位的，而我要显示为以<code>元</code>为单位的并且保留两位小数，怎么办？其实这个函数是我网上搜索来的，因为我当时只是单纯的把返回的数据除以了100，这样是变成以<code>元</code>为单位了，但是没有保留两位小数。网上的具体方法是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分转换为元</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fen_yuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//toFixed来确定保留两位小数  因为除以100 所以都会整除</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = (val/<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> intSum = str.substring(<span class=\"number\">0</span>,str.indexOf(<span class=\"string\">\".\"</span>)).replace( <span class=\"regexp\">/\\B(?=(?:\\d&#123;3&#125;)+$)/g</span>, <span class=\"string\">','</span> );</span><br><span class=\"line\">    <span class=\"comment\">//取到整数部分</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dot = str.substring(str.length,str.indexOf(<span class=\"string\">\".\"</span>))</span><br><span class=\"line\">    <span class=\"comment\">//取到小数部分</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = intSum + dot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码，我给出了基本的注释，大家应该可以读懂，但是注意<code>tofixed()</code>这个函数会把小数点后面的部分进行四舍五入，所以不能得到精确结果。这个地方运用的因为是除以100，所以不存在不精确的问题，如果大家来使用的时候还是要参考当前的需求的。</p>\n<h4 id=\"3-问题四\"><a href=\"#3-问题四\" class=\"headerlink\" title=\"3. 问题四\"></a>3. 问题四</h4><p>有些时候我们在这个页面获得了一些数据，但是我们在去往下一个页面的时候还是需要这些数据而下一个页面的接口没有返回这些数据的时候怎么办？</p>\n<p>这时候就需要把我们需要的数据拼接到<code>url</code>当中，在到了下一个页面的时候，再把<code>url</code>中的参数分离出来，调用我们需要的一些参数。</p>\n<p>分离<code>url</code>参数的方法贴在下面，供大家参考。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url=location.search;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Request = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(url.indexOf(<span class=\"string\">\"?\"</span>)!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = url.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">        strs = str.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;strs.length;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _key = strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">            Request[_key]=strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Request;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如上代码，我们把<code>url</code>中<code>?</code>号部分后面的参数分离出来，组成一个对象，在需要哪个参数的时候，我们只要调用<code>getQuery</code>中对应的属性就可以了。</p>\n<hr>\n<h3 id=\"学习到的经验\"><a href=\"#学习到的经验\" class=\"headerlink\" title=\"学习到的经验\"></a>学习到的经验</h3><h4 id=\"1-添加标识符\"><a href=\"#1-添加标识符\" class=\"headerlink\" title=\"1. 添加标识符\"></a>1. 添加标识符</h4><p>在写<code>ajax</code>的时候，在<code>ajax</code>的不同阶段，应该设置一个标识符来进行标识，以<code>jquery</code>的<code>ajax</code>为例，比如：<code>beforeSend</code>，<code>success</code>，<code>complete</code>等等不同的阶段，对发送<code>ajax</code>的状态来进行标识。</p>\n<p>这个经验其实是这样的：我在设置下拉加载更多的时候，发现有的时候可能会发出多次请求，如果我们在程序里加上一个标识符，就可以避免这个问题的发生，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    page += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码这个只是举一个例子，并不是全部代码，逻辑大概是这样，当页面滑到底部，就发出一个请求请求<code>page+1</code>页的数据。如果我一次下拉发出多次请求的话，在<code>success</code>中的<code>page</code>就会累加多次，出现错误。如果我们添加了标识符后，当只有<code>loading</code>结束的时候才去发送下一次请求，所以当一些特殊情况比如网络不好的情况下，下拉了多次而<code>ajax</code>还没有发送成功的时候，是不会发送第二次<code>ajax</code>请求的。这样就能避免这个问题的产生。</p>\n<hr>\n<h4 id=\"2-可以通过url把参数带到下一个页面\"><a href=\"#2-可以通过url把参数带到下一个页面\" class=\"headerlink\" title=\"2. 可以通过url把参数带到下一个页面\"></a>2. 可以通过url把参数带到下一个页面</h4><p>这个经验在上面的问题中已经说过了，而且我还听同事介绍了，其实这种方式是最常用的一种把参数传导下一个页面的办法，虽说这种办法显得url不够优雅。。。。。</p>\n<hr>\n<h4 id=\"3-如果url所带的参数中有汉字怎么办\"><a href=\"#3-如果url所带的参数中有汉字怎么办\" class=\"headerlink\" title=\"3. 如果url所带的参数中有汉字怎么办\"></a>3. 如果url所带的参数中有汉字怎么办</h4><p>在我携带参数的时候，有的参数可能是汉字，而在参数带到下一个页面后，如果调用这个参数的话，会出现乱码类似于<code>%E5%B7%A5%E4</code>这样的。其实这个不是乱码，而是浏览器所做的<code>encodeURI编码</code>，而我们所要做的就是只要把它<code>decodeURI</code>解码后，我们就可以在下一个页面中正常的使用了。</p>\n<hr>\n<h4 id=\"4-handlebars-helpers的学习\"><a href=\"#4-handlebars-helpers的学习\" class=\"headerlink\" title=\"4. handlebars helpers的学习\"></a>4. handlebars helpers的学习</h4><p>这个在上文中已经做了介绍，其实<code>helper</code>还能完成一些更复杂的逻辑，大家可以多试一试，比如我在遇到判断的类型多的时候就写了一个<code>switch</code>的<code>helper</code>。</p>\n<p>以上。</p>\n","excerpt":"","more":"<p>最近几天，在做一个类似列表的一个界面，在做的时候碰到了很多问题和总结了一些经验，在这里有必要记录一下。设计图如下：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang.jpg\" alt=\"\"></p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_picdaozhang_detail.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><p>页面看起来并不复杂，可以后台返回的数据并不是很完整，所以遇到了一些问题，有的问题在我看来不是很难我这里就不再描述了（以我的水平如果觉得不难那一定是非常简单了。。。 - -），具体有以下四个问题：</p>\n<ol>\n<li>后台返回的交易类型有三种，根据每种交易类型展示不同的图片，可以参考上面到账详情那张图片。</li>\n<li>请看最近到账那张图片，列表的到账状态有四种，根据不同的状态展示的文字颜色需要不一样。</li>\n<li>后台返回的金额都是以分为单位的，而页面上展示的是以元为单位的。</li>\n<li>详情页面的有些信息后台并没有返回给你，必须从列表页面来获取这些信息运用到这个界面上。</li>\n</ol>\n<p>这就是遇到的几个比较让我头疼的问题，下面我来简单说一下每个问题的解决办法。</p>\n<hr>\n<h4 id=\"1-问题一和问题二\"><a href=\"#1-问题一和问题二\" class=\"headerlink\" title=\"1. 问题一和问题二\"></a>1. 问题一和问题二</h4><p>问题一和二，其实就是模板语言上面的问题，现在加载页面有一些页面上要展示出来的数据其实是后台返回给你的。所以你要预先读取这些数据并通过浏览器渲染到你的页面上。基本做前端的同学应该都会用到模板语言，而我用的是<code>handlebars</code>这个模板语言（其实解决这个问题的办法是换一个模板语言，最后我会简单的说一下），我主要是描述一下用<code>handlebars</code>这个模板语言是怎么解决的。</p>\n<p>在<code>handlebars</code>当中的<code>#if</code>只能来做这个变量存不存在的简单判断，而不能在<code>if</code>当中加一些参数的判断，所以这里我们需要引用<code>handlebars helper</code>，在我理解这个其实就是用来补充<code>handlebars</code>中的不足的，在<code>handlebars helper</code>中可以进行一些复杂的判断，以我用的这个<code>helper</code>为例来分析一下，我这个<code>helper</code>的功能是这样的，他可以判断后台返回的一个字段的类型，如果类型是微信支付就显示微信支付的图标，如果是支付宝就显示支付宝的图标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是注册了一个新的helper，名字叫做compare，而这个helper接受了三个参数，第一个和第二个参数是必填的，第三个参数是选填的</span></span><br><span class=\"line\">Handlebars.registerHelper(<span class=\"string\">\"compare\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v1,v2,options</span>)</span>&#123;</span><br><span class=\"line\">\t <span class=\"comment\">//比较参数  满足条件添加继续执行</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v1 == v2)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> options.fn(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//不满足条件执行&#123;else&#125;部分</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> options.inverse(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如上代码，注释写在了里面，我只想说一下<code>options.fn(this)</code>，其实这个意思就是执行下面的部分，这个部分其实不是在我们的js函数中，而是在我们引用这个<code>helper</code>的那个html页面中出现<code># compare</code>的这个地方。看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//比较type是不是card</span><br><span class=\"line\">   &#123;#compare type 'card'&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/ic_card.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">     &#123;else&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"img/ic_weixin.svg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">   &#123;/compare&#125;</span><br></pre></td></tr></table></figure>\n<p>如上，这个就是我在html页面的部分代码，<code>options.fn(this)</code>的功能就是执行<code># compare</code>和<code>else</code>之间的代码。（以我浅显的理解，通俗的解释。。。。。）。</p>\n<p>PS:少写了一个花括号是因为双花括号在markdown语法中不能正常显示出来。。。。</p>\n<p>说完<code>handlebars</code>模板语言之后，我们来说另一种模板语言，<code>template.js</code>这个模板语法相比<code>handlebars</code>很轻量级，所以很适合移动端使用。他的语法和<code>handlebars</code>类似，而且他可以做一些比较复杂的逻辑判断，比如<code>if</code>判断来说他可以支持<code>if a &gt; b || ( a &lt; c &amp;&amp; a == d )</code>这样的复杂判断。使用这样的模板语言，能够基本完成渲染时碰到的一些常用需求。</p>\n<hr>\n<h4 id=\"2-问题三\"><a href=\"#2-问题三\" class=\"headerlink\" title=\"2. 问题三\"></a>2. 问题三</h4><p>后台返给我的数据是以<code>分</code>为单位的，而我要显示为以<code>元</code>为单位的并且保留两位小数，怎么办？其实这个函数是我网上搜索来的，因为我当时只是单纯的把返回的数据除以了100，这样是变成以<code>元</code>为单位了，但是没有保留两位小数。网上的具体方法是这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分转换为元</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fen_yuan = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//toFixed来确定保留两位小数  因为除以100 所以都会整除</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> str = (val/<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> intSum = str.substring(<span class=\"number\">0</span>,str.indexOf(<span class=\"string\">\".\"</span>)).replace( <span class=\"regexp\">/\\B(?=(?:\\d&#123;3&#125;)+$)/g</span>, <span class=\"string\">','</span> );</span><br><span class=\"line\">    <span class=\"comment\">//取到整数部分</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dot = str.substring(str.length,str.indexOf(<span class=\"string\">\".\"</span>))</span><br><span class=\"line\">    <span class=\"comment\">//取到小数部分</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret = intSum + dot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码，我给出了基本的注释，大家应该可以读懂，但是注意<code>tofixed()</code>这个函数会把小数点后面的部分进行四舍五入，所以不能得到精确结果。这个地方运用的因为是除以100，所以不存在不精确的问题，如果大家来使用的时候还是要参考当前的需求的。</p>\n<h4 id=\"3-问题四\"><a href=\"#3-问题四\" class=\"headerlink\" title=\"3. 问题四\"></a>3. 问题四</h4><p>有些时候我们在这个页面获得了一些数据，但是我们在去往下一个页面的时候还是需要这些数据而下一个页面的接口没有返回这些数据的时候怎么办？</p>\n<p>这时候就需要把我们需要的数据拼接到<code>url</code>当中，在到了下一个页面的时候，再把<code>url</code>中的参数分离出来，调用我们需要的一些参数。</p>\n<p>分离<code>url</code>参数的方法贴在下面，供大家参考。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> url=location.search;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Request = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(url.indexOf(<span class=\"string\">\"?\"</span>)!=<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = url.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">        strs = str.split(<span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;strs.length;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _key = strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">            Request[_key]=strs[i].split(<span class=\"string\">\"=\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Request;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如上代码，我们把<code>url</code>中<code>?</code>号部分后面的参数分离出来，组成一个对象，在需要哪个参数的时候，我们只要调用<code>getQuery</code>中对应的属性就可以了。</p>\n<hr>\n<h3 id=\"学习到的经验\"><a href=\"#学习到的经验\" class=\"headerlink\" title=\"学习到的经验\"></a>学习到的经验</h3><h4 id=\"1-添加标识符\"><a href=\"#1-添加标识符\" class=\"headerlink\" title=\"1. 添加标识符\"></a>1. 添加标识符</h4><p>在写<code>ajax</code>的时候，在<code>ajax</code>的不同阶段，应该设置一个标识符来进行标识，以<code>jquery</code>的<code>ajax</code>为例，比如：<code>beforeSend</code>，<code>success</code>，<code>complete</code>等等不同的阶段，对发送<code>ajax</code>的状态来进行标识。</p>\n<p>这个经验其实是这样的：我在设置下拉加载更多的时候，发现有的时候可能会发出多次请求，如果我们在程序里加上一个标识符，就可以避免这个问题的发生，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    page += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>如上代码这个只是举一个例子，并不是全部代码，逻辑大概是这样，当页面滑到底部，就发出一个请求请求<code>page+1</code>页的数据。如果我一次下拉发出多次请求的话，在<code>success</code>中的<code>page</code>就会累加多次，出现错误。如果我们添加了标识符后，当只有<code>loading</code>结束的时候才去发送下一次请求，所以当一些特殊情况比如网络不好的情况下，下拉了多次而<code>ajax</code>还没有发送成功的时候，是不会发送第二次<code>ajax</code>请求的。这样就能避免这个问题的产生。</p>\n<hr>\n<h4 id=\"2-可以通过url把参数带到下一个页面\"><a href=\"#2-可以通过url把参数带到下一个页面\" class=\"headerlink\" title=\"2. 可以通过url把参数带到下一个页面\"></a>2. 可以通过url把参数带到下一个页面</h4><p>这个经验在上面的问题中已经说过了，而且我还听同事介绍了，其实这种方式是最常用的一种把参数传导下一个页面的办法，虽说这种办法显得url不够优雅。。。。。</p>\n<hr>\n<h4 id=\"3-如果url所带的参数中有汉字怎么办\"><a href=\"#3-如果url所带的参数中有汉字怎么办\" class=\"headerlink\" title=\"3. 如果url所带的参数中有汉字怎么办\"></a>3. 如果url所带的参数中有汉字怎么办</h4><p>在我携带参数的时候，有的参数可能是汉字，而在参数带到下一个页面后，如果调用这个参数的话，会出现乱码类似于<code>%E5%B7%A5%E4</code>这样的。其实这个不是乱码，而是浏览器所做的<code>encodeURI编码</code>，而我们所要做的就是只要把它<code>decodeURI</code>解码后，我们就可以在下一个页面中正常的使用了。</p>\n<hr>\n<h4 id=\"4-handlebars-helpers的学习\"><a href=\"#4-handlebars-helpers的学习\" class=\"headerlink\" title=\"4. handlebars helpers的学习\"></a>4. handlebars helpers的学习</h4><p>这个在上文中已经做了介绍，其实<code>helper</code>还能完成一些更复杂的逻辑，大家可以多试一试，比如我在遇到判断的类型多的时候就写了一个<code>switch</code>的<code>helper</code>。</p>\n<p>以上。</p>\n"},{"layout":"post","title":"未来三个月的计划","date":"2016-03-15T16:00:00.000Z","_content":"\n感觉自己的进度比工作之前要慢了很多，该计划一下未来三个月应该多学习哪方面的知识，而且也需要做出一些自己的东西来了，不能只停留在做一些小demo和理论上面。\n\n1. 学习react\n2. 学习vue\n3. 美化自己的博客\n4. 用react和vue来重构自己的博客\n5. 最好是可以用react和vue写一个自己的手机webapp来（选做）\n6. 学习关于后端及node，可以搭起自己的一个后台，为了下一步可以自己建一个网站做准备。\n\n未来每个月总结一下，看看完成这个计划的进度如何。","source":"_posts/2016-03-16-未来三个月自己的计划.md","raw":"---\nlayout: post\ntitle: 未来三个月的计划\ndate: 2016-03-16\ncategories: 杂事二三\n---\n\n感觉自己的进度比工作之前要慢了很多，该计划一下未来三个月应该多学习哪方面的知识，而且也需要做出一些自己的东西来了，不能只停留在做一些小demo和理论上面。\n\n1. 学习react\n2. 学习vue\n3. 美化自己的博客\n4. 用react和vue来重构自己的博客\n5. 最好是可以用react和vue写一个自己的手机webapp来（选做）\n6. 学习关于后端及node，可以搭起自己的一个后台，为了下一步可以自己建一个网站做准备。\n\n未来每个月总结一下，看看完成这个计划的进度如何。","slug":"未来三个月自己的计划","published":1,"updated":"2016-03-21T09:55:11.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfw0016dk5nubu3ih9d","content":"<p>感觉自己的进度比工作之前要慢了很多，该计划一下未来三个月应该多学习哪方面的知识，而且也需要做出一些自己的东西来了，不能只停留在做一些小demo和理论上面。</p>\n<ol>\n<li>学习react</li>\n<li>学习vue</li>\n<li>美化自己的博客</li>\n<li>用react和vue来重构自己的博客</li>\n<li>最好是可以用react和vue写一个自己的手机webapp来（选做）</li>\n<li>学习关于后端及node，可以搭起自己的一个后台，为了下一步可以自己建一个网站做准备。</li>\n</ol>\n<p>未来每个月总结一下，看看完成这个计划的进度如何。</p>\n","excerpt":"","more":"<p>感觉自己的进度比工作之前要慢了很多，该计划一下未来三个月应该多学习哪方面的知识，而且也需要做出一些自己的东西来了，不能只停留在做一些小demo和理论上面。</p>\n<ol>\n<li>学习react</li>\n<li>学习vue</li>\n<li>美化自己的博客</li>\n<li>用react和vue来重构自己的博客</li>\n<li>最好是可以用react和vue写一个自己的手机webapp来（选做）</li>\n<li>学习关于后端及node，可以搭起自己的一个后台，为了下一步可以自己建一个网站做准备。</li>\n</ol>\n<p>未来每个月总结一下，看看完成这个计划的进度如何。</p>\n"},{"layout":"post","title":"百度ife项目之html","date":"2016-03-22T16:00:00.000Z","_content":"\n历时两天半的断断续续，我做完了本次百度ife的第七个任务（[这里](http://ife.baidu.com/task/detail?taskId=7)），是一个html的布局任务，我做好的demo（[这里](http://yatessss.github.io/demo/baidu_ife/task_7/index.html)）。\n\n尽管已经有过很多html布局的经验了，但不得不说很多东西我还都不太熟悉，下面就来总结一下做完这个任务的一些收获吧。\n\n我大概总结了这些收获吧：\n\n1. html5的新标签的应用，这个我专门总结了一下（[这里](http://www.yatessss.com/html/2016/03/18/HTML5%E7%9A%84%E5%AD%A6%E4%B9%A0.html)）\n2. 等宽多栏布局的实现\n3. 父元素与子元素的`margin-top`\n4. `border-width`\n5. 超过行数限制显示……\n6. `letter-spacing`\n7. 伪类标签\n\n*****\n\n#### 等宽多栏布局\n\n其中有一个部分是这样的：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_2.png)\n\n这个是四栏布局，每个栏等宽且宽度应该随着屏幕宽度变化，要求有一个最小的宽度。\n\n我大概想到了这么几种布局的方案：使用`inline-block`布局、使用`flex`布局、使用`float`布局、使用框架的栅格布局。\n\n首先来说一下我最后选用的布局方案，我采用的是`float`布局，我给每一栏定了25%的宽，然后定了一个最小宽度`min-width`，然后让他向左浮动。\n\n```css\n\n    text-align: center;\n    float: left;\n    height: inherit;\n    width: 25%;\n    min-width: 320px;\n\n```\n\n**为什么选择这种方案？**如果使用`inline-block`布局两栏之间会有一个间隙，还得去处理这个间隙；使用`flex`布局的话移动端是很好的，但是如果是pc端的话会有兼容方面的问题；栅格布局肯定是可以的，但是在这上使用一个框架的话显得有些大材小用了。所以浮动我认为是一个比较好的方法。\n\n简单来说一下每一种布局方案：\n\n1. 使用`inline-block`布局，这种布局方案会有一个小问题，就是在每个栏之间会有间隙，这个问题的具体解决与描述我找到了一篇文章（[这里](http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements)）。这里详细的说明了这个问题的解决办法，所以如果是本来每栏之间就有间距的话，用`inline-block`布局是最好的了，他还可以配合`text-align`把多栏居中，用起来真的不错。\n2. 使用`flex`布局，使用`dispaly: flex`，`flex : 1 ` 这样就保证了每栏等宽了，不过他有浏览器的兼容问题这个必须要注意，在ie10以上的浏览器中。\n3. 栅格布局，他会把整个屏幕平均分成12列，根据自己的宽度来定义占用几列，这个大家得看具体的框架了，我就不详细描述了（因为我自己的实践也不是很多 - -）\n4. `float`布局，这个主要注意的就是如果你的父容器如果没有定高的话记得清除浮动。不然父容器会没有高。。。。\n\n*****\n\n#### 父元素与子元素的`margin-top`\n\n这个就是如果你给父容器的第一个子元素设定了`margin-top`的话，页面的效果不是子元素向下移动，而是父元素向下移动，而父元素和子元素的边距是没有变化的。这里我查找到的答案（[这里](http://blog.csdn.net/duran1986/article/details/6930967)），我简单描述一下，在盒子模型中规定：所有毗邻的两个或更多盒元素的margin将会合并为一个margin共享之。毗邻的定义为：同级或者嵌套(父子之间)的盒元素，并且它们之间没有非空内容、Padding或Border分隔。所以父元素和子元素会共享这个边距。解决办法其实理解了上述的那篇文章自然就可以解决了。解决办法如下：\n\n1. 修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用） \n2. 为父元素添加overflow：hidden；样式即可（完美） \n3. 为父元素或者子元素声明浮动（float：left；可用） \n4. 为父元素添加border（border:1px solid transparent可用） \n5. 为父元素或者子元素声明绝对定位\n\n*****\n\n#### `border-width`\n\n通常我们写`border`时就会直接写成这样：`border: 1px solid #000;`类似这样，那这个`border-width`有什么用呢？这个可以定义四条边是不同宽度的，他的顺序和`margin`之类的是一样的上右下左这个顺序。\n\n还有这个用处，而且我这次写页面的时候就用到了：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_3.png)\n\n这个向下小箭头这么实现呢？当然我们可以用图标字体也可以用图片，但是用css我们也可以实现，这可能算是一个hack的方法吧，但是我觉得挺有趣的，我也是review别人代码是学习的。具体css如下：\n\n```css\n\n    display: block;\n    width: 6px;\n    height: 6px;\n    border: solid #867e7a;\n    border-width: 0 1px 1px 0;\n    -webkit-transform: rotate(45deg);\n    transform: rotate(45deg);\n    \n```\n\n哈哈，真的很聪明，这样用`border-width`属性隐藏掉两边，再旋转一下就可以了！\n\n****\n\n#### 超过行数限制显示……\n\n这个也是学习的啦，[张鑫旭的博客](http://www.zhangxinxu.com/study/201510/webkit-line-clamp-text-overflow-ellipsis.html)，下面贴出css：\n\n```css\n\n    .box {\n    width: 400px; \n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n```\n\n*****\n\n#### `letter-spacing`\n\n遇到这样的样式不知道大家是怎么解决的？\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_4.png)\n\n大家是不是在两个字之间加很多的空格（`&nbsp;`）呢？还是怎么样？可以用一下这个css属性`letter-spacing`他可以改变字之间的间距，但是他有一个问题就是他会在`搜索`两个字的后面都加间距字不是居中的，所以配合`padding-left`加一个和间距相同的左内边距，这样就可以保证字是居中的了。\n\n******\n\n#### 伪类标签\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_5.png)\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_6.png)\n\n像图中对勾和横线这样的无意义的标签，我们最好是用before和after伪类来代替。\n","source":"_posts/2016-03-23-百度ife之html.md","raw":"---\nlayout: post\ntitle: 百度ife项目之html\ndate: 2016-03-23\ncategories: HTML\t\n---\n\n历时两天半的断断续续，我做完了本次百度ife的第七个任务（[这里](http://ife.baidu.com/task/detail?taskId=7)），是一个html的布局任务，我做好的demo（[这里](http://yatessss.github.io/demo/baidu_ife/task_7/index.html)）。\n\n尽管已经有过很多html布局的经验了，但不得不说很多东西我还都不太熟悉，下面就来总结一下做完这个任务的一些收获吧。\n\n我大概总结了这些收获吧：\n\n1. html5的新标签的应用，这个我专门总结了一下（[这里](http://www.yatessss.com/html/2016/03/18/HTML5%E7%9A%84%E5%AD%A6%E4%B9%A0.html)）\n2. 等宽多栏布局的实现\n3. 父元素与子元素的`margin-top`\n4. `border-width`\n5. 超过行数限制显示……\n6. `letter-spacing`\n7. 伪类标签\n\n*****\n\n#### 等宽多栏布局\n\n其中有一个部分是这样的：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_2.png)\n\n这个是四栏布局，每个栏等宽且宽度应该随着屏幕宽度变化，要求有一个最小的宽度。\n\n我大概想到了这么几种布局的方案：使用`inline-block`布局、使用`flex`布局、使用`float`布局、使用框架的栅格布局。\n\n首先来说一下我最后选用的布局方案，我采用的是`float`布局，我给每一栏定了25%的宽，然后定了一个最小宽度`min-width`，然后让他向左浮动。\n\n```css\n\n    text-align: center;\n    float: left;\n    height: inherit;\n    width: 25%;\n    min-width: 320px;\n\n```\n\n**为什么选择这种方案？**如果使用`inline-block`布局两栏之间会有一个间隙，还得去处理这个间隙；使用`flex`布局的话移动端是很好的，但是如果是pc端的话会有兼容方面的问题；栅格布局肯定是可以的，但是在这上使用一个框架的话显得有些大材小用了。所以浮动我认为是一个比较好的方法。\n\n简单来说一下每一种布局方案：\n\n1. 使用`inline-block`布局，这种布局方案会有一个小问题，就是在每个栏之间会有间隙，这个问题的具体解决与描述我找到了一篇文章（[这里](http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements)）。这里详细的说明了这个问题的解决办法，所以如果是本来每栏之间就有间距的话，用`inline-block`布局是最好的了，他还可以配合`text-align`把多栏居中，用起来真的不错。\n2. 使用`flex`布局，使用`dispaly: flex`，`flex : 1 ` 这样就保证了每栏等宽了，不过他有浏览器的兼容问题这个必须要注意，在ie10以上的浏览器中。\n3. 栅格布局，他会把整个屏幕平均分成12列，根据自己的宽度来定义占用几列，这个大家得看具体的框架了，我就不详细描述了（因为我自己的实践也不是很多 - -）\n4. `float`布局，这个主要注意的就是如果你的父容器如果没有定高的话记得清除浮动。不然父容器会没有高。。。。\n\n*****\n\n#### 父元素与子元素的`margin-top`\n\n这个就是如果你给父容器的第一个子元素设定了`margin-top`的话，页面的效果不是子元素向下移动，而是父元素向下移动，而父元素和子元素的边距是没有变化的。这里我查找到的答案（[这里](http://blog.csdn.net/duran1986/article/details/6930967)），我简单描述一下，在盒子模型中规定：所有毗邻的两个或更多盒元素的margin将会合并为一个margin共享之。毗邻的定义为：同级或者嵌套(父子之间)的盒元素，并且它们之间没有非空内容、Padding或Border分隔。所以父元素和子元素会共享这个边距。解决办法其实理解了上述的那篇文章自然就可以解决了。解决办法如下：\n\n1. 修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用） \n2. 为父元素添加overflow：hidden；样式即可（完美） \n3. 为父元素或者子元素声明浮动（float：left；可用） \n4. 为父元素添加border（border:1px solid transparent可用） \n5. 为父元素或者子元素声明绝对定位\n\n*****\n\n#### `border-width`\n\n通常我们写`border`时就会直接写成这样：`border: 1px solid #000;`类似这样，那这个`border-width`有什么用呢？这个可以定义四条边是不同宽度的，他的顺序和`margin`之类的是一样的上右下左这个顺序。\n\n还有这个用处，而且我这次写页面的时候就用到了：\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_3.png)\n\n这个向下小箭头这么实现呢？当然我们可以用图标字体也可以用图片，但是用css我们也可以实现，这可能算是一个hack的方法吧，但是我觉得挺有趣的，我也是review别人代码是学习的。具体css如下：\n\n```css\n\n    display: block;\n    width: 6px;\n    height: 6px;\n    border: solid #867e7a;\n    border-width: 0 1px 1px 0;\n    -webkit-transform: rotate(45deg);\n    transform: rotate(45deg);\n    \n```\n\n哈哈，真的很聪明，这样用`border-width`属性隐藏掉两边，再旋转一下就可以了！\n\n****\n\n#### 超过行数限制显示……\n\n这个也是学习的啦，[张鑫旭的博客](http://www.zhangxinxu.com/study/201510/webkit-line-clamp-text-overflow-ellipsis.html)，下面贴出css：\n\n```css\n\n    .box {\n    width: 400px; \n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n}\n\n```\n\n*****\n\n#### `letter-spacing`\n\n遇到这样的样式不知道大家是怎么解决的？\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_4.png)\n\n大家是不是在两个字之间加很多的空格（`&nbsp;`）呢？还是怎么样？可以用一下这个css属性`letter-spacing`他可以改变字之间的间距，但是他有一个问题就是他会在`搜索`两个字的后面都加间距字不是居中的，所以配合`padding-left`加一个和间距相同的左内边距，这样就可以保证字是居中的了。\n\n******\n\n#### 伪类标签\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_5.png)\n\n![](http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_6.png)\n\n像图中对勾和横线这样的无意义的标签，我们最好是用before和after伪类来代替。\n","slug":"百度ife之html","published":1,"updated":"2016-03-24T05:18:13.000Z","comments":1,"photos":[],"link":"","_id":"cim631wfy0019dk5nm6k0pzt9","content":"<p>历时两天半的断断续续，我做完了本次百度ife的第七个任务（<a href=\"http://ife.baidu.com/task/detail?taskId=7\" target=\"_blank\" rel=\"external\">这里</a>），是一个html的布局任务，我做好的demo（<a href=\"http://yatessss.github.io/demo/baidu_ife/task_7/index.html\" target=\"_blank\" rel=\"external\">这里</a>）。</p>\n<p>尽管已经有过很多html布局的经验了，但不得不说很多东西我还都不太熟悉，下面就来总结一下做完这个任务的一些收获吧。</p>\n<p>我大概总结了这些收获吧：</p>\n<ol>\n<li>html5的新标签的应用，这个我专门总结了一下（<a href=\"http://www.yatessss.com/html/2016/03/18/HTML5%E7%9A%84%E5%AD%A6%E4%B9%A0.html\" target=\"_blank\" rel=\"external\">这里</a>）</li>\n<li>等宽多栏布局的实现</li>\n<li>父元素与子元素的<code>margin-top</code></li>\n<li><code>border-width</code></li>\n<li>超过行数限制显示……</li>\n<li><code>letter-spacing</code></li>\n<li>伪类标签</li>\n</ol>\n<hr>\n<h4 id=\"等宽多栏布局\"><a href=\"#等宽多栏布局\" class=\"headerlink\" title=\"等宽多栏布局\"></a>等宽多栏布局</h4><p>其中有一个部分是这样的：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_2.png\" alt=\"\"></p>\n<p>这个是四栏布局，每个栏等宽且宽度应该随着屏幕宽度变化，要求有一个最小的宽度。</p>\n<p>我大概想到了这么几种布局的方案：使用<code>inline-block</code>布局、使用<code>flex</code>布局、使用<code>float</code>布局、使用框架的栅格布局。</p>\n<p>首先来说一下我最后选用的布局方案，我采用的是<code>float</code>布局，我给每一栏定了25%的宽，然后定了一个最小宽度<code>min-width</code>，然后让他向左浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 25%;</span><br><span class=\"line\"><span class=\"selector-tag\">min-width</span>: 320<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>为什么选择这种方案？</strong>如果使用<code>inline-block</code>布局两栏之间会有一个间隙，还得去处理这个间隙；使用<code>flex</code>布局的话移动端是很好的，但是如果是pc端的话会有兼容方面的问题；栅格布局肯定是可以的，但是在这上使用一个框架的话显得有些大材小用了。所以浮动我认为是一个比较好的方法。</p>\n<p>简单来说一下每一种布局方案：</p>\n<ol>\n<li>使用<code>inline-block</code>布局，这种布局方案会有一个小问题，就是在每个栏之间会有间隙，这个问题的具体解决与描述我找到了一篇文章（<a href=\"http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements\" target=\"_blank\" rel=\"external\">这里</a>）。这里详细的说明了这个问题的解决办法，所以如果是本来每栏之间就有间距的话，用<code>inline-block</code>布局是最好的了，他还可以配合<code>text-align</code>把多栏居中，用起来真的不错。</li>\n<li>使用<code>flex</code>布局，使用<code>dispaly: flex</code>，<code>flex : 1</code> 这样就保证了每栏等宽了，不过他有浏览器的兼容问题这个必须要注意，在ie10以上的浏览器中。</li>\n<li>栅格布局，他会把整个屏幕平均分成12列，根据自己的宽度来定义占用几列，这个大家得看具体的框架了，我就不详细描述了（因为我自己的实践也不是很多 - -）</li>\n<li><code>float</code>布局，这个主要注意的就是如果你的父容器如果没有定高的话记得清除浮动。不然父容器会没有高。。。。</li>\n</ol>\n<hr>\n<h4 id=\"父元素与子元素的margin-top\"><a href=\"#父元素与子元素的margin-top\" class=\"headerlink\" title=\"父元素与子元素的margin-top\"></a>父元素与子元素的<code>margin-top</code></h4><p>这个就是如果你给父容器的第一个子元素设定了<code>margin-top</code>的话，页面的效果不是子元素向下移动，而是父元素向下移动，而父元素和子元素的边距是没有变化的。这里我查找到的答案（<a href=\"http://blog.csdn.net/duran1986/article/details/6930967\" target=\"_blank\" rel=\"external\">这里</a>），我简单描述一下，在盒子模型中规定：所有毗邻的两个或更多盒元素的margin将会合并为一个margin共享之。毗邻的定义为：同级或者嵌套(父子之间)的盒元素，并且它们之间没有非空内容、Padding或Border分隔。所以父元素和子元素会共享这个边距。解决办法其实理解了上述的那篇文章自然就可以解决了。解决办法如下：</p>\n<ol>\n<li>修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用） </li>\n<li>为父元素添加overflow：hidden；样式即可（完美） </li>\n<li>为父元素或者子元素声明浮动（float：left；可用） </li>\n<li>为父元素添加border（border:1px solid transparent可用） </li>\n<li>为父元素或者子元素声明绝对定位</li>\n</ol>\n<hr>\n<h4 id=\"border-width\"><a href=\"#border-width\" class=\"headerlink\" title=\"border-width\"></a><code>border-width</code></h4><p>通常我们写<code>border</code>时就会直接写成这样：<code>border: 1px solid #000;</code>类似这样，那这个<code>border-width</code>有什么用呢？这个可以定义四条边是不同宽度的，他的顺序和<code>margin</code>之类的是一样的上右下左这个顺序。</p>\n<p>还有这个用处，而且我这次写页面的时候就用到了：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_3.png\" alt=\"\"></p>\n<p>这个向下小箭头这么实现呢？当然我们可以用图标字体也可以用图片，但是用css我们也可以实现，这可能算是一个hack的方法吧，但是我觉得挺有趣的，我也是review别人代码是学习的。具体css如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 6<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 6<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#867e7a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-width</span>: 0 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> 0;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure>\n<p>哈哈，真的很聪明，这样用<code>border-width</code>属性隐藏掉两边，再旋转一下就可以了！</p>\n<hr>\n<h4 id=\"超过行数限制显示……\"><a href=\"#超过行数限制显示……\" class=\"headerlink\" title=\"超过行数限制显示……\"></a>超过行数限制显示……</h4><p>这个也是学习的啦，<a href=\"http://www.zhangxinxu.com/study/201510/webkit-line-clamp-text-overflow-ellipsis.html\" target=\"_blank\" rel=\"external\">张鑫旭的博客</a>，下面贴出css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"letter-spacing\"><a href=\"#letter-spacing\" class=\"headerlink\" title=\"letter-spacing\"></a><code>letter-spacing</code></h4><p>遇到这样的样式不知道大家是怎么解决的？</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_4.png\" alt=\"\"></p>\n<p>大家是不是在两个字之间加很多的空格（<code>&amp;nbsp;</code>）呢？还是怎么样？可以用一下这个css属性<code>letter-spacing</code>他可以改变字之间的间距，但是他有一个问题就是他会在<code>搜索</code>两个字的后面都加间距字不是居中的，所以配合<code>padding-left</code>加一个和间距相同的左内边距，这样就可以保证字是居中的了。</p>\n<hr>\n<h4 id=\"伪类标签\"><a href=\"#伪类标签\" class=\"headerlink\" title=\"伪类标签\"></a>伪类标签</h4><p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_5.png\" alt=\"\"></p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_6.png\" alt=\"\"></p>\n<p>像图中对勾和横线这样的无意义的标签，我们最好是用before和after伪类来代替。</p>\n","excerpt":"","more":"<p>历时两天半的断断续续，我做完了本次百度ife的第七个任务（<a href=\"http://ife.baidu.com/task/detail?taskId=7\">这里</a>），是一个html的布局任务，我做好的demo（<a href=\"http://yatessss.github.io/demo/baidu_ife/task_7/index.html\">这里</a>）。</p>\n<p>尽管已经有过很多html布局的经验了，但不得不说很多东西我还都不太熟悉，下面就来总结一下做完这个任务的一些收获吧。</p>\n<p>我大概总结了这些收获吧：</p>\n<ol>\n<li>html5的新标签的应用，这个我专门总结了一下（<a href=\"http://www.yatessss.com/html/2016/03/18/HTML5%E7%9A%84%E5%AD%A6%E4%B9%A0.html\">这里</a>）</li>\n<li>等宽多栏布局的实现</li>\n<li>父元素与子元素的<code>margin-top</code></li>\n<li><code>border-width</code></li>\n<li>超过行数限制显示……</li>\n<li><code>letter-spacing</code></li>\n<li>伪类标签</li>\n</ol>\n<hr>\n<h4 id=\"等宽多栏布局\"><a href=\"#等宽多栏布局\" class=\"headerlink\" title=\"等宽多栏布局\"></a>等宽多栏布局</h4><p>其中有一个部分是这样的：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_2.png\" alt=\"\"></p>\n<p>这个是四栏布局，每个栏等宽且宽度应该随着屏幕宽度变化，要求有一个最小的宽度。</p>\n<p>我大概想到了这么几种布局的方案：使用<code>inline-block</code>布局、使用<code>flex</code>布局、使用<code>float</code>布局、使用框架的栅格布局。</p>\n<p>首先来说一下我最后选用的布局方案，我采用的是<code>float</code>布局，我给每一栏定了25%的宽，然后定了一个最小宽度<code>min-width</code>，然后让他向左浮动。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">text-align</span>: <span class=\"selector-tag\">center</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">float</span>: <span class=\"selector-tag\">left</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">inherit</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 25%;</span><br><span class=\"line\"><span class=\"selector-tag\">min-width</span>: 320<span class=\"selector-tag\">px</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>为什么选择这种方案？</strong>如果使用<code>inline-block</code>布局两栏之间会有一个间隙，还得去处理这个间隙；使用<code>flex</code>布局的话移动端是很好的，但是如果是pc端的话会有兼容方面的问题；栅格布局肯定是可以的，但是在这上使用一个框架的话显得有些大材小用了。所以浮动我认为是一个比较好的方法。</p>\n<p>简单来说一下每一种布局方案：</p>\n<ol>\n<li>使用<code>inline-block</code>布局，这种布局方案会有一个小问题，就是在每个栏之间会有间隙，这个问题的具体解决与描述我找到了一篇文章（<a href=\"http://www.w3cplus.com/css/fighting-the-space-between-inline-block-elements\">这里</a>）。这里详细的说明了这个问题的解决办法，所以如果是本来每栏之间就有间距的话，用<code>inline-block</code>布局是最好的了，他还可以配合<code>text-align</code>把多栏居中，用起来真的不错。</li>\n<li>使用<code>flex</code>布局，使用<code>dispaly: flex</code>，<code>flex : 1</code> 这样就保证了每栏等宽了，不过他有浏览器的兼容问题这个必须要注意，在ie10以上的浏览器中。</li>\n<li>栅格布局，他会把整个屏幕平均分成12列，根据自己的宽度来定义占用几列，这个大家得看具体的框架了，我就不详细描述了（因为我自己的实践也不是很多 - -）</li>\n<li><code>float</code>布局，这个主要注意的就是如果你的父容器如果没有定高的话记得清除浮动。不然父容器会没有高。。。。</li>\n</ol>\n<hr>\n<h4 id=\"父元素与子元素的margin-top\"><a href=\"#父元素与子元素的margin-top\" class=\"headerlink\" title=\"父元素与子元素的margin-top\"></a>父元素与子元素的<code>margin-top</code></h4><p>这个就是如果你给父容器的第一个子元素设定了<code>margin-top</code>的话，页面的效果不是子元素向下移动，而是父元素向下移动，而父元素和子元素的边距是没有变化的。这里我查找到的答案（<a href=\"http://blog.csdn.net/duran1986/article/details/6930967\">这里</a>），我简单描述一下，在盒子模型中规定：所有毗邻的两个或更多盒元素的margin将会合并为一个margin共享之。毗邻的定义为：同级或者嵌套(父子之间)的盒元素，并且它们之间没有非空内容、Padding或Border分隔。所以父元素和子元素会共享这个边距。解决办法其实理解了上述的那篇文章自然就可以解决了。解决办法如下：</p>\n<ol>\n<li>修改父元素的高度，增加padding-top样式模拟（padding-top：1px；常用） </li>\n<li>为父元素添加overflow：hidden；样式即可（完美） </li>\n<li>为父元素或者子元素声明浮动（float：left；可用） </li>\n<li>为父元素添加border（border:1px solid transparent可用） </li>\n<li>为父元素或者子元素声明绝对定位</li>\n</ol>\n<hr>\n<h4 id=\"border-width\"><a href=\"#border-width\" class=\"headerlink\" title=\"border-width\"></a><code>border-width</code></h4><p>通常我们写<code>border</code>时就会直接写成这样：<code>border: 1px solid #000;</code>类似这样，那这个<code>border-width</code>有什么用呢？这个可以定义四条边是不同宽度的，他的顺序和<code>margin</code>之类的是一样的上右下左这个顺序。</p>\n<p>还有这个用处，而且我这次写页面的时候就用到了：</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_3.png\" alt=\"\"></p>\n<p>这个向下小箭头这么实现呢？当然我们可以用图标字体也可以用图片，但是用css我们也可以实现，这可能算是一个hack的方法吧，但是我觉得挺有趣的，我也是review别人代码是学习的。具体css如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">width</span>: 6<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">height</span>: 6<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border</span>: <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#867e7a</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">border-width</span>: 0 1<span class=\"selector-tag\">px</span> 1<span class=\"selector-tag\">px</span> 0;</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transform</span>: <span class=\"selector-tag\">rotate</span>(45<span class=\"selector-tag\">deg</span>);</span><br></pre></td></tr></table></figure>\n<p>哈哈，真的很聪明，这样用<code>border-width</code>属性隐藏掉两边，再旋转一下就可以了！</p>\n<hr>\n<h4 id=\"超过行数限制显示……\"><a href=\"#超过行数限制显示……\" class=\"headerlink\" title=\"超过行数限制显示……\"></a>超过行数限制显示……</h4><p>这个也是学习的啦，<a href=\"http://www.zhangxinxu.com/study/201510/webkit-line-clamp-text-overflow-ellipsis.html\">张鑫旭的博客</a>，下面贴出css：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>; </span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"letter-spacing\"><a href=\"#letter-spacing\" class=\"headerlink\" title=\"letter-spacing\"></a><code>letter-spacing</code></h4><p>遇到这样的样式不知道大家是怎么解决的？</p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_4.png\" alt=\"\"></p>\n<p>大家是不是在两个字之间加很多的空格（<code>&amp;nbsp;</code>）呢？还是怎么样？可以用一下这个css属性<code>letter-spacing</code>他可以改变字之间的间距，但是他有一个问题就是他会在<code>搜索</code>两个字的后面都加间距字不是居中的，所以配合<code>padding-left</code>加一个和间距相同的左内边距，这样就可以保证字是居中的了。</p>\n<hr>\n<h4 id=\"伪类标签\"><a href=\"#伪类标签\" class=\"headerlink\" title=\"伪类标签\"></a>伪类标签</h4><p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_5.png\" alt=\"\"></p>\n<p><img src=\"http://7xqch8.com1.z0.glb.clouddn.com/blog_2016_03_pic_6.png\" alt=\"\"></p>\n<p>像图中对勾和横线这样的无意义的标签，我们最好是用before和after伪类来代替。</p>\n"},{"layout":"post","title":"HTML5的学习","date":"2016-03-17T16:00:00.000Z","_content":"\n虽说已经知道html5很长时间了，但是我们平常写页面的时候是不是还是会这样呢？\n\n```html\n\n<div class=\"header\">\n  //一些内容\n</div>\n\n<div class=\"main-body\">\n  //一些内容\n</div>\n\n<div class=\"footer\">\n  //一些内容\n</div>\n\n```\n\n其实我们可以这么写：\n\n```html\n\n<header>\n  //一些内容\n</header>\n\n<main>\n  //一些内容\n</main>\n\n<footer>\n  //一些内容\n</footer>\n\n```\n\nhtml5给了我们很多新的标签可供使用，以前对html5有些了解，但没有仔细的学习，正好最近在看百度ife的任务题([点击这里](http://ife.baidu.com/task/all))，我们就来一起学一学我们以前知道但是没有注意的html5新标签吧~~~\n\n就像我们上面那个例子看到的那样，我觉得这是里面最常用的的标签了。`<header>`、`<footer>`、`<main>`、`<section>`、`<nav>`，以前我们都会用`id`或者`class`去表明这个`div`的意图，现在我们多了这几个标签之后，我们可以更加语义化的去编写html的结构了。\n\n******\n\n#### `<header>`和`<footer>`\n\n`<header>`和`<footer>`标签就是定义页眉和页脚，语义很明显。用法和`div`和没有本质的区别。\n\n*******\n\n#### `<main>`\n\n接下来是`<main>`标签了，这个标签貌似不是h5新出来的标签，但是之前我都没有注意过，W3School给出他的定义和用法是这样的(w3c的在这里。。。。有能力的同学可以看这个[地址](http://w3c.github.io/html/index.html#contents))。\n\n\n>`<main>` 标签规定文档的主要内容。\n>`<main>` 元素中的内容对于文档来说应当是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。\n\n>**在一个文档中，不能出现一个以上的 `<main>` 元素。`<main>` 元素不能是以下元素的后代：`<article>`、`<aside>`、`<footer>`、`<header>` 或 `<nav>`。**\n\n根据这个说明，我们可以知道`<main>`标签很适合做主要内容的标签，而不用再用`div`来定义一个`class=\"main-body\"`类似这样的结构来编写主要内容部分了。\n\n******\n\n#### `<nav>`\n\n\n\n\n\n","source":"_posts/2016-03-18-HTML5的学习.md","raw":"---\nlayout: post\ntitle: HTML5的学习\ndate: 2016-03-18\ncategories: HTML\t\n---\n\n虽说已经知道html5很长时间了，但是我们平常写页面的时候是不是还是会这样呢？\n\n```html\n\n<div class=\"header\">\n  //一些内容\n</div>\n\n<div class=\"main-body\">\n  //一些内容\n</div>\n\n<div class=\"footer\">\n  //一些内容\n</div>\n\n```\n\n其实我们可以这么写：\n\n```html\n\n<header>\n  //一些内容\n</header>\n\n<main>\n  //一些内容\n</main>\n\n<footer>\n  //一些内容\n</footer>\n\n```\n\nhtml5给了我们很多新的标签可供使用，以前对html5有些了解，但没有仔细的学习，正好最近在看百度ife的任务题([点击这里](http://ife.baidu.com/task/all))，我们就来一起学一学我们以前知道但是没有注意的html5新标签吧~~~\n\n就像我们上面那个例子看到的那样，我觉得这是里面最常用的的标签了。`<header>`、`<footer>`、`<main>`、`<section>`、`<nav>`，以前我们都会用`id`或者`class`去表明这个`div`的意图，现在我们多了这几个标签之后，我们可以更加语义化的去编写html的结构了。\n\n******\n\n#### `<header>`和`<footer>`\n\n`<header>`和`<footer>`标签就是定义页眉和页脚，语义很明显。用法和`div`和没有本质的区别。\n\n*******\n\n#### `<main>`\n\n接下来是`<main>`标签了，这个标签貌似不是h5新出来的标签，但是之前我都没有注意过，W3School给出他的定义和用法是这样的(w3c的在这里。。。。有能力的同学可以看这个[地址](http://w3c.github.io/html/index.html#contents))。\n\n\n>`<main>` 标签规定文档的主要内容。\n>`<main>` 元素中的内容对于文档来说应当是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。\n\n>**在一个文档中，不能出现一个以上的 `<main>` 元素。`<main>` 元素不能是以下元素的后代：`<article>`、`<aside>`、`<footer>`、`<header>` 或 `<nav>`。**\n\n根据这个说明，我们可以知道`<main>`标签很适合做主要内容的标签，而不用再用`div`来定义一个`class=\"main-body\"`类似这样的结构来编写主要内容部分了。\n\n******\n\n#### `<nav>`\n\n\n\n\n\n","slug":"HTML5的学习","published":1,"updated":"2016-03-24T05:18:14.000Z","comments":1,"photos":[],"link":"","_id":"cim631wg0001cdk5nht4rcvq4","content":"<p>虽说已经知道html5很长时间了，但是我们平常写页面的时候是不是还是会这样呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实我们可以这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>html5给了我们很多新的标签可供使用，以前对html5有些了解，但没有仔细的学习，正好最近在看百度ife的任务题(<a href=\"http://ife.baidu.com/task/all\" target=\"_blank\" rel=\"external\">点击这里</a>)，我们就来一起学一学我们以前知道但是没有注意的html5新标签吧~~~</p>\n<p>就像我们上面那个例子看到的那样，我觉得这是里面最常用的的标签了。<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;nav&gt;</code>，以前我们都会用<code>id</code>或者<code>class</code>去表明这个<code>div</code>的意图，现在我们多了这几个标签之后，我们可以更加语义化的去编写html的结构了。</p>\n<hr>\n<h4 id=\"lt-header-gt-和-lt-footer-gt\"><a href=\"#lt-header-gt-和-lt-footer-gt\" class=\"headerlink\" title=\"&lt;header&gt;和&lt;footer&gt;\"></a><code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code></h4><p><code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>标签就是定义页眉和页脚，语义很明显。用法和<code>div</code>和没有本质的区别。</p>\n<hr>\n<h4 id=\"lt-main-gt\"><a href=\"#lt-main-gt\" class=\"headerlink\" title=\"&lt;main&gt;\"></a><code>&lt;main&gt;</code></h4><p>接下来是<code>&lt;main&gt;</code>标签了，这个标签貌似不是h5新出来的标签，但是之前我都没有注意过，W3School给出他的定义和用法是这样的(w3c的在这里。。。。有能力的同学可以看这个<a href=\"http://w3c.github.io/html/index.html#contents\" target=\"_blank\" rel=\"external\">地址</a>)。</p>\n<blockquote>\n<p><code>&lt;main&gt;</code> 标签规定文档的主要内容。<br><code>&lt;main&gt;</code> 元素中的内容对于文档来说应当是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。</p>\n<p><strong>在一个文档中，不能出现一个以上的 <code>&lt;main&gt;</code> 元素。<code>&lt;main&gt;</code> 元素不能是以下元素的后代：<code>&lt;article&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;header&gt;</code> 或 <code>&lt;nav&gt;</code>。</strong></p>\n</blockquote>\n<p>根据这个说明，我们可以知道<code>&lt;main&gt;</code>标签很适合做主要内容的标签，而不用再用<code>div</code>来定义一个<code>class=&quot;main-body&quot;</code>类似这样的结构来编写主要内容部分了。</p>\n<hr>\n<h4 id=\"lt-nav-gt\"><a href=\"#lt-nav-gt\" class=\"headerlink\" title=\"&lt;nav&gt;\"></a><code>&lt;nav&gt;</code></h4>","excerpt":"","more":"<p>虽说已经知道html5很长时间了，但是我们平常写页面的时候是不是还是会这样呢？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实我们可以这么写：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  //一些内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>html5给了我们很多新的标签可供使用，以前对html5有些了解，但没有仔细的学习，正好最近在看百度ife的任务题(<a href=\"http://ife.baidu.com/task/all\">点击这里</a>)，我们就来一起学一学我们以前知道但是没有注意的html5新标签吧~~~</p>\n<p>就像我们上面那个例子看到的那样，我觉得这是里面最常用的的标签了。<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;nav&gt;</code>，以前我们都会用<code>id</code>或者<code>class</code>去表明这个<code>div</code>的意图，现在我们多了这几个标签之后，我们可以更加语义化的去编写html的结构了。</p>\n<hr>\n<h4 id=\"lt-header-gt-和-lt-footer-gt\"><a href=\"#lt-header-gt-和-lt-footer-gt\" class=\"headerlink\" title=\"&lt;header&gt;和&lt;footer&gt;\"></a><code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code></h4><p><code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>标签就是定义页眉和页脚，语义很明显。用法和<code>div</code>和没有本质的区别。</p>\n<hr>\n<h4 id=\"lt-main-gt\"><a href=\"#lt-main-gt\" class=\"headerlink\" title=\"&lt;main&gt;\"></a><code>&lt;main&gt;</code></h4><p>接下来是<code>&lt;main&gt;</code>标签了，这个标签貌似不是h5新出来的标签，但是之前我都没有注意过，W3School给出他的定义和用法是这样的(w3c的在这里。。。。有能力的同学可以看这个<a href=\"http://w3c.github.io/html/index.html#contents\">地址</a>)。</p>\n<blockquote>\n<p><code>&lt;main&gt;</code> 标签规定文档的主要内容。<br><code>&lt;main&gt;</code> 元素中的内容对于文档来说应当是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。</p>\n<p><strong>在一个文档中，不能出现一个以上的 <code>&lt;main&gt;</code> 元素。<code>&lt;main&gt;</code> 元素不能是以下元素的后代：<code>&lt;article&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;header&gt;</code> 或 <code>&lt;nav&gt;</code>。</strong></p>\n</blockquote>\n<p>根据这个说明，我们可以知道<code>&lt;main&gt;</code>标签很适合做主要内容的标签，而不用再用<code>div</code>来定义一个<code>class=&quot;main-body&quot;</code>类似这样的结构来编写主要内容部分了。</p>\n<hr>\n<h4 id=\"lt-nav-gt\"><a href=\"#lt-nav-gt\" class=\"headerlink\" title=\"&lt;nav&gt;\"></a><code>&lt;nav&gt;</code></h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cim631we30008dk5nhwpzek16","category_id":"cim631wdw0005dk5nqpiysbuv","_id":"cim631wey000edk5n7167ah1c"},{"post_id":"cim631wd90000dk5nopeff6dy","category_id":"cim631wdw0005dk5nqpiysbuv","_id":"cim631wf3000idk5n1491xpap"},{"post_id":"cim631wdm0002dk5nvu2d5vog","category_id":"cim631wet000bdk5n4j9slz6e","_id":"cim631wff000mdk5nfzfniehj"},{"post_id":"cim631wf4000kdk5nwd0ro50g","category_id":"cim631wf3000hdk5nxa1n9u50","_id":"cim631wfk000sdk5nd7pw8ju2"},{"post_id":"cim631wdx0006dk5nhg8a3maj","category_id":"cim631wf3000hdk5nxa1n9u50","_id":"cim631wfo000xdk5njk61fi8l"},{"post_id":"cim631wfh000qdk5ncla73s2f","category_id":"cim631wdw0005dk5nqpiysbuv","_id":"cim631wfq0010dk5nxstijm23"},{"post_id":"cim631weq000adk5nhqd7x42b","category_id":"cim631wf3000hdk5nxa1n9u50","_id":"cim631wfv0014dk5nla5np6c4"},{"post_id":"cim631wfl000tdk5nk0qkxwns","category_id":"cim631wdw0005dk5nqpiysbuv","_id":"cim631wfy0018dk5nyxrsykpc"},{"post_id":"cim631weu000ddk5nyowfxjdj","category_id":"cim631wfn000vdk5n4hoaaoud","_id":"cim631wfz001adk5n7gnmnd6t"},{"post_id":"cim631wfw0016dk5nubu3ih9d","category_id":"cim631wdw0005dk5nqpiysbuv","_id":"cim631wg2001edk5nyub7tx7b"},{"post_id":"cim631wey000fdk5n50zqxw0k","category_id":"cim631wfv0015dk5n039db7lj","_id":"cim631wg2001fdk5n3w2ovi31"},{"post_id":"cim631wfd000ldk5nxyksofuh","category_id":"cim631wg1001ddk5nbw766n31","_id":"cim631wg4001kdk5n5aodwf5e"},{"post_id":"cim631wfo000ydk5n4fe1jwye","category_id":"cim631wg2001hdk5n0bhuumhb","_id":"cim631wg7001odk5n04ohxxm0"},{"post_id":"cim631wfr0011dk5nq1vxssfu","category_id":"cim631wg2001hdk5n0bhuumhb","_id":"cim631wg9001sdk5ni3uheth6"},{"post_id":"cim631wfy0019dk5nm6k0pzt9","category_id":"cim631wg7001pdk5n0j2qgyl0","_id":"cim631wga001vdk5n5aazkrn5"},{"post_id":"cim631wg0001cdk5nht4rcvq4","category_id":"cim631wg7001pdk5n0j2qgyl0","_id":"cim631wgd001ydk5nkadpyclg"}],"PostTag":[{"post_id":"cim631wd90000dk5nopeff6dy","tag_id":"cim631wdt0004dk5n33fzcvjk","_id":"cim631weu000cdk5nvh1ixqp5"},{"post_id":"cim631wdm0002dk5nvu2d5vog","tag_id":"cim631wep0009dk5nfnl6n2z8","_id":"cim631wf4000jdk5n756m52cw"},{"post_id":"cim631wf4000kdk5nwd0ro50g","tag_id":"cim631wf2000gdk5nrn05pvmj","_id":"cim631wfg000odk5nr5vgh4yg"},{"post_id":"cim631wdx0006dk5nhg8a3maj","tag_id":"cim631wf2000gdk5nrn05pvmj","_id":"cim631wfj000rdk5nw6q969ag"},{"post_id":"cim631wfh000qdk5ncla73s2f","tag_id":"cim631wdt0004dk5n33fzcvjk","_id":"cim631wfn000udk5nylnktarv"},{"post_id":"cim631we30008dk5nhwpzek16","tag_id":"cim631wff000ndk5ni94ryvy4","_id":"cim631wfq000zdk5n3665ea3g"},{"post_id":"cim631wfl000tdk5nk0qkxwns","tag_id":"cim631wdt0004dk5n33fzcvjk","_id":"cim631wfv0012dk5n0yv88zbo"},{"post_id":"cim631weq000adk5nhqd7x42b","tag_id":"cim631wf2000gdk5nrn05pvmj","_id":"cim631wfx0017dk5n4s844jiv"},{"post_id":"cim631weu000ddk5nyowfxjdj","tag_id":"cim631wfv0013dk5nvmcakhgn","_id":"cim631wg3001idk5nptzs41xi"},{"post_id":"cim631weu000ddk5nyowfxjdj","tag_id":"cim631wfz001bdk5nnxq7cufz","_id":"cim631wg4001jdk5na0gruevx"},{"post_id":"cim631wey000fdk5n50zqxw0k","tag_id":"cim631wg2001gdk5ndoqo133x","_id":"cim631wg7001ndk5nko8w1zqi"},{"post_id":"cim631wfd000ldk5nxyksofuh","tag_id":"cim631wg4001ldk5nduqmo7hl","_id":"cim631wg8001rdk5nj8n354bw"},{"post_id":"cim631wfo000ydk5n4fe1jwye","tag_id":"cim631wg7001qdk5n7jjnqw28","_id":"cim631wgd001xdk5nr32qcl0r"},{"post_id":"cim631wfo000ydk5n4fe1jwye","tag_id":"cim631wg9001udk5nluh4hsbc","_id":"cim631wgd001zdk5npfu8fldk"},{"post_id":"cim631wfr0011dk5nq1vxssfu","tag_id":"cim631wgc001wdk5n2oq7r16b","_id":"cim631wgg0022dk5nszghpg3z"},{"post_id":"cim631wfr0011dk5nq1vxssfu","tag_id":"cim631wgd0020dk5nwt54yxsh","_id":"cim631wgg0023dk5nyved3tpz"},{"post_id":"cim631wfr0011dk5nq1vxssfu","tag_id":"cim631wge0021dk5ng98druv0","_id":"cim631wgg0024dk5n69mbts6l"}],"Tag":[{"name":"杂事二三","_id":"cim631wdt0004dk5n33fzcvjk"},{"name":"markdown","_id":"cim631wep0009dk5nfnl6n2z8"},{"name":"ES6","_id":"cim631wf2000gdk5nrn05pvmj"},{"name":"好的博客","_id":"cim631wff000ndk5ni94ryvy4"},{"name":"Charles","_id":"cim631wfv0013dk5nvmcakhgn"},{"name":"跨域问题","_id":"cim631wfz001bdk5nnxq7cufz"},{"name":"webpack","_id":"cim631wg2001gdk5ndoqo133x"},{"name":"React","_id":"cim631wg4001ldk5nduqmo7hl"},{"name":"JSSDK","_id":"cim631wg7001qdk5n7jjnqw28"},{"name":"iOS微信二维码","_id":"cim631wg9001udk5nluh4hsbc"},{"name":"handlebars","_id":"cim631wgc001wdk5n2oq7r16b"},{"name":"小数点精确","_id":"cim631wgd0020dk5nwt54yxsh"},{"name":"url携带参数","_id":"cim631wge0021dk5ng98druv0"}]}}